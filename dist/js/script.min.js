"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var filter;!function(t,e){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=t.document?e(t,!0):function(t){if(t.document)return e(t);throw new Error("jQuery requires a window with a document")}:e(t)}("undefined"!=typeof window?window:void 0,function(x,j){function v(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item}function g(t){return null!=t&&t===t.window}var e=[],L=Object.getPrototypeOf,a=e.slice,B=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},F=e.push,H=e.indexOf,_={},q=_.toString,W=_.hasOwnProperty,z=W.toString,U=z.call(Object),m={},C=x.document,G={type:!0,src:!0,nonce:!0,noModule:!0};function X(t,e,n){var i,o,r=(n=n||C).createElement("script");if(r.text=t,e)for(i in G)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function h(t){return null==t?t+"":"object"===_typeof(t)||"function"==typeof t?_[q.call(t)]||"object":_typeof(t)}var t="3.6.1",S=function t(e,n){return new t.fn.init(e,n)};function Y(t){var e=!!t&&"length"in t&&t.length,n=h(t);return!v(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}S.fn=S.prototype={jquery:t,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){t=S.merge(this.constructor(),t);return t.prevObject=this,t},each:function(t){return S.each(this,t)},map:function(n){return this.pushStack(S.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,t=+t+(t<0?e:0);return this.pushStack(0<=t&&t<e?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:F,sort:e.sort,splice:e.splice},S.extend=S.fn.extend=function(){var t,e,n,i,o,r=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof r&&(l=r,r=arguments[s]||{},s++),"object"===_typeof(r)||v(r)||(r={}),s===a&&(r=this,s--);s<a;s++)if(null!=(t=arguments[s]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(l&&n&&(S.isPlainObject(n)||(i=Array.isArray(n)))?(o=r[e],o=i&&!Array.isArray(o)?[]:i||S.isPlainObject(o)?o:{},i=!1,r[e]=S.extend(l,o,n)):void 0!==n&&(r[e]=n));return r},S.extend({expando:"jQuery"+(t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){return!(!t||"[object Object]"!==q.call(t)||(t=L(t))&&("function"!=typeof(t=W.call(t,"constructor")&&t.constructor)||z.call(t)!==U))},isEmptyObject:function(t){for(var e in t)return!1;return!0},globalEval:function(t,e,n){X(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(Y(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){e=e||[];return null!=t&&(Y(Object(t))?S.merge(e,"string"==typeof t?[t]:t):F.call(e,t)),e},inArray:function(t,e,n){return null==e?-1:H.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!=s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,s=[];if(Y(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&s.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&s.push(o);return B(s)},guid:1,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=e[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){_["[object "+e+"]"]=e.toLowerCase()});function i(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&S(t).is(n))break;i.push(t)}return i}function V(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}var t=function(j){function d(t,e){return t="0x"+t.slice(1)-65536,e||(t<0?String.fromCharCode(65536+t):String.fromCharCode(t>>10|55296,1023&t|56320))}function L(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}function B(){C()}var t,p,w,r,F,f,H,_,x,l,c,C,S,n,T,h,i,o,g,A="sizzle"+ +new Date,u=j.document,k=0,q=0,W=N(),z=N(),U=N(),m=N(),G=function(t,e){return t===e&&(c=!0),0},X={}.hasOwnProperty,e=[],Y=e.pop,V=e.push,E=e.push,K=e.slice,v=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",s="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Z="\\["+s+"*("+a+")(?:"+s+"*([*^$|!~]?=)"+s+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+s+"*\\]",J=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Z+")*)|.*)\\)|)",tt=new RegExp(s+"+","g"),y=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g"),et=new RegExp("^"+s+"*,"+s+"*"),nt=new RegExp("^"+s+"*([>+~]|"+s+")"+s+"*"),it=new RegExp(s+"|>"),ot=new RegExp(J),rt=new RegExp("^"+a+"$"),b={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+Z),PSEUDO:new RegExp("^"+J),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+s+"*(even|odd|(([+-]|)(\\d*)n|)"+s+"*(?:([+-]|)"+s+"*(\\d+)|))"+s+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+s+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+s+"*((?:-\\d)?\\d*)"+s+"*\\)|)(?=[^-]|$)","i")},st=/HTML$/i,at=/^(?:input|select|textarea|button)$/i,lt=/^h\d$/i,D=/^[^{]+\{\s*\[native \w/,ct=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ut=/[+~]/,O=new RegExp("\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\([^\\r\\n\\f])","g"),dt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,pt=vt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{E.apply(e=K.call(u.childNodes),u.childNodes),e[u.childNodes.length].nodeType}catch(t){E={apply:e.length?function(t,e){V.apply(t,K.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function I(e,t,n,i){var o,r,s,a,l,c,u=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!i&&(C(t),t=t||S,T)){if(11!==d&&(a=ct.exec(e)))if(o=a[1]){if(9===d){if(!(c=t.getElementById(o)))return n;if(c.id===o)return n.push(c),n}else if(u&&(c=u.getElementById(o))&&g(t,c)&&c.id===o)return n.push(c),n}else{if(a[2])return E.apply(n,t.getElementsByTagName(e)),n;if((o=a[3])&&p.getElementsByClassName&&t.getElementsByClassName)return E.apply(n,t.getElementsByClassName(o)),n}if(p.qsa&&!m[e+" "]&&(!h||!h.test(e))&&(1!==d||"object"!==t.nodeName.toLowerCase())){if(c=e,u=t,1===d&&(it.test(e)||nt.test(e))){for((u=ut.test(e)&&mt(t.parentNode)||t)===t&&p.scope||((s=t.getAttribute("id"))?s=s.replace(dt,L):t.setAttribute("id",s=A)),r=(l=f(e)).length;r--;)l[r]=(s?"#"+s:":scope")+" "+M(l[r]);c=l.join(",")}try{return E.apply(n,u.querySelectorAll(c)),n}catch(t){m(e,!0)}finally{s===A&&t.removeAttribute("id")}}}return _(e.replace(y,"$1"),t,n,i)}function N(){var n=[];function i(t,e){return n.push(t+" ")>w.cacheLength&&delete i[n.shift()],i[t+" "]=e}return i}function P(t){return t[A]=!0,t}function R(t){var e=S.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e)}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&pt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function $(s){return P(function(r){return r=+r,P(function(t,e){for(var n,i=s([],t.length,r),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in p=I.support={},F=I.isXML=function(t){var e=t&&t.namespaceURI,t=t&&(t.ownerDocument||t).documentElement;return!st.test(e||t&&t.nodeName||"HTML")},C=I.setDocument=function(t){var t=t?t.ownerDocument||t:u;return t!=S&&9===t.nodeType&&t.documentElement&&(n=(S=t).documentElement,T=!F(S),u!=S&&(t=S.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",B,!1):t.attachEvent&&t.attachEvent("onunload",B)),p.scope=R(function(t){return n.appendChild(t).appendChild(S.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),p.attributes=R(function(t){return t.className="i",!t.getAttribute("className")}),p.getElementsByTagName=R(function(t){return t.appendChild(S.createComment("")),!t.getElementsByTagName("*").length}),p.getElementsByClassName=D.test(S.getElementsByClassName),p.getById=R(function(t){return n.appendChild(t).id=A,!S.getElementsByName||!S.getElementsByName(A).length}),p.getById?(w.filter.ID=function(t){var e=t.replace(O,d);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T)return(e=e.getElementById(t))?[e]:[]}):(w.filter.ID=function(t){var e=t.replace(O,d);return function(t){t=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return t&&t.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),w.find.TAG=p.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):p.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"!==t)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=p.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},i=[],h=[],(p.qsa=D.test(S.querySelectorAll))&&(R(function(t){var e;n.appendChild(t).innerHTML="<a id='"+A+"'></a><select id='"+A+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+s+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||h.push("\\["+s+"*(?:value|"+Q+")"),t.querySelectorAll("[id~="+A+"-]").length||h.push("~="),(e=S.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||h.push("\\["+s+"*name"+s+"*="+s+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||h.push(":checked"),t.querySelectorAll("a#"+A+"+*").length||h.push(".#.+[+~]"),t.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),R(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=S.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&h.push("name"+s+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),h.push(",.*:")})),(p.matchesSelector=D.test(o=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&R(function(t){p.disconnectedMatch=o.call(t,"*"),o.call(t,"[s!='']:x"),i.push("!=",J)}),h=h.length&&new RegExp(h.join("|")),i=i.length&&new RegExp(i.join("|")),t=D.test(n.compareDocumentPosition),g=t||D.test(n.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,e=e&&e.parentNode;return t===e||!(!e||1!==e.nodeType||!(n.contains?n.contains(e):t.compareDocumentPosition&&16&t.compareDocumentPosition(e)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},G=t?function(t,e){var n;return t===e?(c=!0,0):(n=!t.compareDocumentPosition-!e.compareDocumentPosition)||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===n?t==S||t.ownerDocument==u&&g(u,t)?-1:e==S||e.ownerDocument==u&&g(u,e)?1:l?v(l,t)-v(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t==S?-1:e==S?1:o?-1:r?1:l?v(l,t)-v(l,e):0;if(o===r)return ht(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ht(s[i],a[i]):s[i]==u?-1:a[i]==u?1:0}),S},I.matches=function(t,e){return I(t,null,null,e)},I.matchesSelector=function(t,e){if(C(t),p.matchesSelector&&T&&!m[e+" "]&&(!i||!i.test(e))&&(!h||!h.test(e)))try{var n=o.call(t,e);if(n||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){m(e,!0)}return 0<I(e,S,null,[t]).length},I.contains=function(t,e){return(t.ownerDocument||t)!=S&&C(t),g(t,e)},I.attr=function(t,e){(t.ownerDocument||t)!=S&&C(t);var n=w.attrHandle[e.toLowerCase()],n=n&&X.call(w.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==n?n:p.attributes||!T?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},I.escape=function(t){return(t+"").replace(dt,L)},I.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},I.uniqueSort=function(t){var e,n=[],i=0,o=0;if(c=!p.detectDuplicates,l=!p.sortStable&&t.slice(0),t.sort(G),c){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return l=null,t},r=I.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(w=I.selectors={cacheLength:50,createPseudo:P,match:b,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(O,d),t[3]=(t[3]||t[4]||t[5]||"").replace(O,d),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||I.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&I.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return b.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ot.test(n)&&(e=(e=f(n,!0))&&n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(O,d).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+s+")"+t+"("+s+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(t){t=I.attr(t,e);return null==t?"!="===n:!n||(t+="","="===n?t===i:"!="===n?t!==i:"^="===n?i&&0===t.indexOf(i):"*="===n?i&&-1<t.indexOf(i):"$="===n?i&&t.slice(-i.length)===i:"~="===n?-1<(" "+t.replace(tt," ")+" ").indexOf(i):"|="===n&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,t,e,g,m){var y="nth"!==h.slice(0,3),v="last"!==h.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,o,r,s,a,l,c=y!=v?"nextSibling":"previousSibling",u=t.parentNode,d=b&&t.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(u){if(y){for(;c;){for(s=t;s=s[c];)if(b?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[v?u.firstChild:u.lastChild],v&&p){for(f=(a=(i=(o=(r=(s=u)[A]||(s[A]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===k&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0,l.pop());)if(1===s.nodeType&&++f&&s===t){o[h]=[k,a,f];break}}else if(!1===(f=p?a=(i=(o=(r=(s=t)[A]||(s[A]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===k&&i[1]:f))for(;(s=++a&&s&&s[c]||(f=a=0,l.pop()))&&((b?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[A]||(s[A]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[k,f]),s!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,r){var e,s=w.pseudos[t]||w.setFilters[t.toLowerCase()]||I.error("unsupported pseudo: "+t);return s[A]?s(r):1<s.length?(e=[t,t,"",r],w.setFilters.hasOwnProperty(t.toLowerCase())?P(function(t,e){for(var n,i=s(t,r),o=i.length;o--;)t[n=v(t,i[o])]=!(e[n]=i[o])}):function(t){return s(t,0,e)}):s}},pseudos:{not:P(function(t){var i=[],o=[],a=H(t.replace(y,"$1"));return a[A]?P(function(t,e,n,i){for(var o,r=a(t,null,i,[]),s=t.length;s--;)(o=r[s])&&(t[s]=!(e[s]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),i[0]=null,!o.pop()}}),has:P(function(e){return function(t){return 0<I(e,t).length}}),contains:P(function(e){return e=e.replace(O,d),function(t){return-1<(t.textContent||r(t)).indexOf(e)}}),lang:P(function(n){return rt.test(n||"")||I.error("unsupported lang: "+n),n=n.replace(O,d).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=j.location&&j.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===n},focus:function(t){return t===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return lt.test(t.nodeName)},input:function(t){return at.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(t=t.getAttribute("type"))||"text"===t.toLowerCase())},first:$(function(){return[0]}),last:$(function(t,e){return[e-1]}),eq:$(function(t,e,n){return[n<0?n+e:n]}),even:$(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:$(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:$(function(t,e,n){for(var i=n<0?n+e:e<n?e:n;0<=--i;)t.push(i);return t}),gt:$(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=function(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}(t);function yt(){}function M(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function vt(s,t,e){var a=t.dir,l=t.next,c=l||a,u=e&&"parentNode"===c,d=q++;return t.first?function(t,e,n){for(;t=t[a];)if(1===t.nodeType||u)return s(t,e,n);return!1}:function(t,e,n){var i,o,r=[k,d];if(n){for(;t=t[a];)if((1===t.nodeType||u)&&s(t,e,n))return!0}else for(;t=t[a];)if(1===t.nodeType||u)if(o=(o=t[A]||(t[A]={}))[t.uniqueID]||(o[t.uniqueID]={}),l&&l===t.nodeName.toLowerCase())t=t[a]||t;else{if((i=o[c])&&i[0]===k&&i[1]===d)return r[2]=i[2];if((o[c]=r)[2]=s(t,e,n))return!0}return!1}}function bt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function wt(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)!(r=t[a])||n&&!n(r,i,o)||(s.push(r),c&&e.push(a));return s}function xt(f,h,g,m,y,t){return m&&!m[A]&&(m=xt(m)),y&&!y[A]&&(y=xt(y,t)),P(function(t,e,n,i){var o,r,s,a=[],l=[],c=e.length,u=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)I(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!t&&h?u:wt(u,a,f,n,i),p=g?y||(t?f:c||m)?[]:e:d;if(g&&g(d,p,n,i),m)for(o=wt(p,l),m(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(t){if(y||f){if(y){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);y(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=y?v(t,s):a[r])&&(t[o]=!(e[o]=s))}}else p=wt(p===e?p.splice(c,p.length):p),y?y(null,e,p,i):E.apply(e,p)})}function Ct(m,y){function t(t,e,n,i,o){var r,s,a,l=0,c="0",u=t&&[],d=[],p=x,f=t||b&&w.find.TAG("*",o),h=k+=null==p?1:Math.random()||.1,g=f.length;for(o&&(x=e==S||e||o);c!==g&&null!=(r=f[c]);c++){if(b&&r){for(s=0,e||r.ownerDocument==S||(C(r),n=!T);a=m[s++];)if(a(r,e||S,n)){i.push(r);break}o&&(k=h)}v&&((r=!a&&r)&&l--,t)&&u.push(r)}if(l+=c,v&&c!==l){for(s=0;a=y[s++];)a(u,d,e,n);if(t){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=Y.call(i));d=wt(d)}E.apply(i,d),o&&!t&&0<d.length&&1<l+y.length&&I.uniqueSort(i)}return o&&(k=h,x=p),u}var v=0<y.length,b=0<m.length;return v?P(t):t}return yt.prototype=w.filters=w.pseudos,w.setFilters=new yt,f=I.tokenize=function(t,e){var n,i,o,r,s,a,l,c=z[t+" "];if(c)return e?0:c.slice(0);for(s=t,a=[],l=w.preFilter;s;){for(r in n&&!(i=et.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=nt.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(y," ")}),s=s.slice(n.length)),w.filter)!(i=b[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?I.error(t):z(t,a).slice(0)},H=I.compile=function(t,e){var n,i=[],o=[],r=U[t+" "];if(!r){for(n=(e=e||f(t)).length;n--;)((r=function t(e){for(var i,n,o,r=e.length,s=w.relative[e[0].type],a=s||w.relative[" "],l=s?1:0,c=vt(function(t){return t===i},a,!0),u=vt(function(t){return-1<v(i,t)},a,!0),d=[function(t,e,n){return t=!s&&(n||e!==x)||((i=e).nodeType?c:u)(t,e,n),i=null,t}];l<r;l++)if(n=w.relative[e[l].type])d=[vt(bt(d),n)];else{if((n=w.filter[e[l].type].apply(null,e[l].matches))[A]){for(o=++l;o<r&&!w.relative[e[o].type];o++);return xt(1<l&&bt(d),1<l&&M(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(y,"$1"),n,l<o&&t(e.slice(l,o)),o<r&&t(e=e.slice(o)),o<r&&M(e))}d.push(n)}return bt(d)}(e[n]))[A]?i:o).push(r);(r=U(t,Ct(o,i))).selector=t}return r},_=I.select=function(t,e,n,i){var o,r,s,a,l,c="function"==typeof t&&t,u=!i&&f(t=c.selector||t);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===e.nodeType&&T&&w.relative[r[1].type]){if(!(e=(w.find.ID(s.matches[0].replace(O,d),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=b.needsContext.test(t)?0:r.length;o--&&(s=r[o],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(O,d),ut.test(r[0].type)&&mt(e.parentNode)||e))){if(r.splice(o,1),t=i.length&&M(r))break;return E.apply(n,i),n}}return(c||H(t,u))(i,e,!T,n,!e||ut.test(t)&&mt(e.parentNode)||e),n},p.sortStable=A.split("").sort(G).join("")===A,p.detectDuplicates=!!c,C(),p.sortDetached=R(function(t){return 1&t.compareDocumentPosition(S.createElement("fieldset"))}),R(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ft("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),p.attributes&&R(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ft("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),R(function(t){return null==t.getAttribute("disabled")})||ft(Q,function(t,e,n){if(!n)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),I}(x),K=(S.find=t,S.expr=t.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=t.uniqueSort,S.text=t.getText,S.isXMLDoc=t.isXML,S.contains=t.contains,S.escapeSelector=t.escape,S.expr.match.needsContext);function l(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var Q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Z(t,n,i){return v(n)?S.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?S.grep(t,function(t){return t===n!==i}):"string"!=typeof n?S.grep(t,function(t){return-1<H.call(n,t)!==i}):S.filter(n,t,i)}S.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?S.find.matchesSelector(i,t)?[i]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<i;e++)if(S.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)S.find(t,o[e],n);return 1<i?S.uniqueSort(n):n},filter:function(t){return this.pushStack(Z(this,t||[],!1))},not:function(t){return this.pushStack(Z(this,t||[],!0))},is:function(t){return!!Z(this,"string"==typeof t&&K.test(t)?S(t):t||[],!1).length}});var J,tt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,et=((S.fn.init=function(t,e,n){if(t){if(n=n||J,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(S):S.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:tt.exec(t))||!i[1]&&e)return(!e||e.jquery?e||n:this.constructor(e)).find(t);if(i[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:C,!0)),Q.test(i[1])&&S.isPlainObject(e))for(var i in e)v(this[i])?this[i](e[i]):this.attr(i,e[i])}else(n=C.getElementById(i[2]))&&(this[0]=n,this.length=1)}return this}).prototype=S.fn,J=S(C),/^(?:parents|prev(?:Until|All))/),nt={children:!0,contents:!0,next:!0,prev:!0};function it(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&S(t);if(!K.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&S.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(1<r.length?S.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?H.call(S(t),this[0]):H.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){return(t=t.parentNode)&&11!==t.nodeType?t:null},parents:function(t){return i(t,"parentNode")},parentsUntil:function(t,e,n){return i(t,"parentNode",n)},next:function(t){return it(t,"nextSibling")},prev:function(t){return it(t,"previousSibling")},nextAll:function(t){return i(t,"nextSibling")},prevAll:function(t){return i(t,"previousSibling")},nextUntil:function(t,e,n){return i(t,"nextSibling",n)},prevUntil:function(t,e,n){return i(t,"previousSibling",n)},siblings:function(t){return V((t.parentNode||{}).firstChild,t)},children:function(t){return V(t.firstChild)},contents:function(t){return null!=t.contentDocument&&L(t.contentDocument)?t.contentDocument:(l(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},function(i,o){S.fn[i]=function(t,e){var n=S.map(this,o,t);return(e="Until"!==i.slice(-5)?t:e)&&"string"==typeof e&&(n=S.filter(e,n)),1<this.length&&(nt[i]||S.uniqueSort(n),et.test(i))&&n.reverse(),this.pushStack(n)}});var T=/[^\x20\t\r\n\f]+/g;function u(t){return t}function ot(t){throw t}function rt(t,e,n,i){var o;try{t&&v(o=t.promise)?o.call(t).done(e).fail(n):t&&v(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}S.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},S.each(t.match(T)||[],function(t,e){n[e]=!0}),n):S.extend({},i);function o(){for(a=a||i.once,s=r=!0;c.length;u=-1)for(e=c.shift();++u<l.length;)!1===l[u].apply(e[0],e[1])&&i.stopOnFalse&&(u=l.length,e=!1);i.memory||(e=!1),r=!1,a&&(l=e?[]:"")}var r,e,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(e&&!r&&(u=l.length-1,c.push(e)),function n(t){S.each(t,function(t,e){v(e)?i.unique&&d.has(e)||l.push(e):e&&e.length&&"string"!==h(e)&&n(e)})}(arguments),e)&&!r&&o(),this},remove:function(){return S.each(arguments,function(t,e){for(var n;-1<(n=S.inArray(e,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(t){return t?-1<S.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||r||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),r)||o(),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},S.extend({Deferred:function(t){var r=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var o=arguments;return S.Deferred(function(i){S.each(r,function(t,e){var n=v(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),o=null}).promise()},then:function(e,n,i){var l=0;function c(o,r,s,a){return function(){function t(){var t,e;if(!(o<l)){if((t=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"===_typeof(t)||"function"==typeof t)&&t.then,v(e)?a?e.call(t,c(l,r,u,a),c(l,r,ot,a)):(l++,e.call(t,c(l,r,u,a),c(l,r,ot,a),c(l,r,u,r.notifyWith))):(s!==u&&(n=void 0,i=[t]),(a||r.resolveWith)(n,i))}}var n=this,i=arguments,e=a?t:function(){try{t()}catch(t){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(s!==ot&&(n=void 0,i=[t]),r.rejectWith(n,i))}};o?e():(S.Deferred.getStackHook&&(e.stackTrace=S.Deferred.getStackHook()),x.setTimeout(e))}}return S.Deferred(function(t){r[0][3].add(c(0,t,v(i)?i:u,t.notifyWith)),r[1][3].add(c(0,t,v(e)?e:u)),r[2][3].add(c(0,t,v(n)?n:ot))}).promise()},promise:function(t){return null!=t?S.extend(t,s):s}},a={};return S.each(r,function(t,e){var n=e[2],i=e[5];s[e[1]]=n.add,i&&n.add(function(){o=i},r[3-t][2].disable,r[3-t][3].disable,r[0][2].lock,r[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),s.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,r[e]=1<arguments.length?a.call(arguments):t,--n||s.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=a.call(arguments),s=S.Deferred();if(n<=1&&(rt(t,s.done(e(i)).resolve,s.reject,!n),"pending"===s.state()||v(r[i]&&r[i].then)))return s.then();for(;i--;)rt(r[i],e(i),s.reject);return s.promise()}});var st=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,at=(S.Deferred.exceptionHook=function(t,e){x.console&&x.console.warn&&t&&st.test(t.name)&&x.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){x.setTimeout(function(){throw t})},S.Deferred());function lt(){C.removeEventListener("DOMContentLoaded",lt),x.removeEventListener("load",lt),S.ready()}S.fn.ready=function(t){return at.then(t).catch(function(t){S.readyException(t)}),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0)!==t&&0<--S.readyWait||at.resolveWith(C,[S])}}),S.ready.then=at.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?x.setTimeout(S.ready):(C.addEventListener("DOMContentLoaded",lt),x.addEventListener("load",lt));function d(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===h(n))for(a in o=!0,n)d(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,v(i)||(s=!0),e=c?s?(e.call(t,i),null):(c=e,function(t,e,n){return c.call(S(t),n)}):e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r}var ct=/^-ms-/,ut=/-([a-z])/g;function dt(t,e){return e.toUpperCase()}function b(t){return t.replace(ct,"ms-").replace(ut,dt)}function y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function pt(){this.expando=S.expando+pt.uid++}pt.uid=1,pt.prototype={cache:function(t){var e=t[this.expando];return e||(e={},y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[b(e)]=n;else for(i in e)o[b(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][b(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(b):(e=b(e))in i?[e]:e.match(T)||[]).length;for(;n--;)delete i[e[n]]}void 0!==e&&!S.isEmptyObject(i)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){t=t[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var w=new pt,c=new pt,ft=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ht=/[A-Z]/g;function gt(t,e,n){var i,o;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(ht,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:ft.test(o)?JSON.parse(o):o)}catch(t){}c.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return c.hasData(t)||w.hasData(t)},data:function(t,e,n){return c.access(t,e,n)},removeData:function(t,e){c.remove(t,e)},_data:function(t,e,n){return w.access(t,e,n)},_removeData:function(t,e){w.remove(t,e)}}),S.fn.extend({data:function(n,t){var e,i,o,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){c.set(this,n)}):d(this,function(t){var e;if(r&&void 0===t)return void 0!==(e=c.get(r,n))||void 0!==(e=gt(r,n))?e:void 0;this.each(function(){c.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=c.get(r),1===r.nodeType)&&!w.get(r,"hasDataAttrs")){for(e=s.length;e--;)s[e]&&0===(i=s[e].name).indexOf("data-")&&(i=b(i.slice(5)),gt(r,i,o[i]));w.set(r,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){c.remove(this,t)})}}),S.extend({queue:function(t,e,n){var i;if(t)return i=w.get(t,e=(e||"fx")+"queue"),n&&(!i||Array.isArray(n)?i=w.access(t,e,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),i=n.length,o=n.shift(),r=S._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){S.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return w.get(t,n)||w.access(t,n,{empty:S.Callbacks("once memory").add(function(){w.remove(t,[e+"queue",n])})})}}),S.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?S.queue(this[0],e):void 0===n?this:this.each(function(){var t=S.queue(this,e,n);S._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&S.dequeue(this,e)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function n(){--o||r.resolveWith(s,[s])}var i,o=1,r=S.Deferred(),s=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(i=w.get(s[a],t+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(e)}});function mt(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&k(t)&&"none"===S.css(t,"display")}var t=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,yt=new RegExp("^(?:([+-])=|)("+t+")([a-z%]*)$","i"),p=["Top","Right","Bottom","Left"],A=C.documentElement,k=function(t){return S.contains(t.ownerDocument,t)},vt={composed:!0};A.getRootNode&&(k=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(vt)===t.ownerDocument});function bt(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return S.css(t,e,"")},l=a(),c=n&&n[3]||(S.cssNumber[e]?"":"px"),u=t.nodeType&&(S.cssNumber[e]||"px"!==c&&+l)&&yt.exec(S.css(t,e));if(u&&u[3]!==c){for(c=c||u[3],u=+(l/=2)||1;s--;)S.style(t,e,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;S.style(t,e,(u*=2)+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i)&&(i.unit=c,i.start=u,i.end=o),o}var wt={};function E(t,e){for(var n,i,o,r,s,a=[],l=0,c=t.length;l<c;l++)(i=t[l]).style&&(n=i.style.display,e?("none"===n&&(a[l]=w.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&mt(i)&&(a[l]=(s=r=void 0,r=(o=i).ownerDocument,o=o.nodeName,(s=wt[o])||(r=r.body.appendChild(r.createElement(o)),s=S.css(r,"display"),r.parentNode.removeChild(r),wt[o]=s="none"===s?"block":s),s))):"none"!==n&&(a[l]="none",w.set(i,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(t[l].style.display=a[l]);return t}S.fn.extend({show:function(){return E(this,!0)},hide:function(){return E(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){mt(this)?S(this).show():S(this).hide()})}});var xt=/^(?:checkbox|radio)$/i,Ct=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,St=/^$|^module$|\/(?:java|ecma)script/i,D=(P=C.createDocumentFragment().appendChild(C.createElement("div")),(r=C.createElement("input")).setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),P.appendChild(r),m.checkClone=P.cloneNode(!0).cloneNode(!0).lastChild.checked,P.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!P.cloneNode(!0).lastChild.defaultValue,P.innerHTML="<option></option>",m.option=!!P.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function O(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&l(t,e)?S.merge([t],n):n}function Tt(t,e){for(var n=0,i=t.length;n<i;n++)w.set(t[n],"globalEval",!e||w.get(e[n],"globalEval"))}D.tbody=D.tfoot=D.colgroup=D.caption=D.thead,D.th=D.td,m.option||(D.optgroup=D.option=[1,"<select multiple='multiple'>","</select>"]);var At=/<|&#?\w+;/;function kt(t,e,n,i,o){for(var r,s,a,l,c,u=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((r=t[p])||0===r)if("object"===h(r))S.merge(d,r.nodeType?[r]:r);else if(At.test(r)){for(s=s||u.appendChild(e.createElement("div")),a=(Ct.exec(r)||["",""])[1].toLowerCase(),a=D[a]||D._default,s.innerHTML=a[1]+S.htmlPrefilter(r)+a[2],c=a[0];c--;)s=s.lastChild;S.merge(d,s.childNodes),(s=u.firstChild).textContent=""}else d.push(e.createTextNode(r));for(u.textContent="",p=0;r=d[p++];)if(i&&-1<S.inArray(r,i))o&&o.push(r);else if(l=k(r),s=O(u.appendChild(r),"script"),l&&Tt(s),n)for(c=0;r=s[c++];)St.test(r.type||"")&&n.push(r);return u}var Et=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function f(){return!1}function Dt(t,e){return t===function(){try{return C.activeElement}catch(t){}}()==("focus"===e)}function Ot(t,e,n,i,o,r){var s,a;if("object"===_typeof(e)){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Ot(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=f;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return S().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),t.each(function(){S.event.add(this,e,o,i,n)})}function It(t,o,r){r?(w.set(t,o,!1),S.event.add(t,o,{namespace:!1,handler:function(t){var e,n,i=w.get(this,o);if(1&t.isTrigger&&this[o]){if(i.length)(S.event.special[o]||{}).delegateType&&t.stopPropagation();else if(i=a.call(arguments),w.set(this,o,i),e=r(this,o),this[o](),i!==(n=w.get(this,o))||e?w.set(this,o,!1):n={},i!==n)return t.stopImmediatePropagation(),t.preventDefault(),n&&n.value}else i.length&&(w.set(this,o,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===w.get(t,o)&&S.event.add(t,o,n)}S.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h=w.get(e);if(y(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&S.find.matchesSelector(A,o),n.guid||(n.guid=S.guid++),a=(a=h.events)||(h.events=Object.create(null)),s=(s=h.handle)||(h.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(T)||[""]).length;l--;)d=f=(p=Et.exec(t[l])||[])[1],p=(p[2]||"").split(".").sort(),d&&(c=S.event.special[d]||{},d=(o?c.delegateType:c.bindType)||d,c=S.event.special[d]||{},f=S.extend({type:d,origType:f,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:p.join(".")},r),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,p,s))||e.addEventListener&&e.addEventListener(d,s),c.add&&(c.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),o?u.splice(u.delegateCount++,0,f):u.push(f),S.event.global[d]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,d,p,f,h,g,m=w.hasData(t)&&w.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(T)||[""]).length;c--;)if(f=g=(a=Et.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=S.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(t,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(t,h,m.handle)||S.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)S.event.remove(t,f+e[c],n,i,!0);S.isEmptyObject(l)&&w.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s=new Array(arguments.length),a=S.event.fix(t),t=(w.get(this,"events")||Object.create(null))[a.type]||[],l=S.event.special[a.type]||{};for(s[0]=a,e=1;e<arguments.length;e++)s[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(r=S.event.handlers.call(this,a,t),e=0;(i=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(o=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?-1<S(o,this).index(c):S.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&It(t,"click",n),!1},trigger:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&It(t,"click"),!0},_default:function(t){t=t.target;return xt.test(t.type)&&t.click&&l(t,"input")&&w.get(t,"click")||l(t,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?n:f,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=n,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=n,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=n,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return It(this,e,Dt),!1},trigger:function(){return It(this,e),!0},_default:function(t){return w.get(t.target,e)},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){S.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||S.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),S.fn.extend({on:function(t,e,n,i){return Ot(this,t,e,n,i)},one:function(t,e,n,i){return Ot(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)i=t.handleObj,S(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);else{if("object"!==_typeof(t))return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=f),this.each(function(){S.event.remove(this,t,n,e)});for(o in t)this.off(o,e,t[o])}return this}});var Nt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function $t(t,e){return l(t,"table")&&l(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function jt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Lt(t,e){var n,i,o,r;if(1===e.nodeType){if(w.hasData(t)&&(r=w.get(t).events))for(o in w.remove(e,"handle events"),r)for(n=0,i=r[o].length;n<i;n++)S.event.add(e,o,r[o][n]);c.hasData(t)&&(t=c.access(t),t=S.extend({},t),c.set(e,t))}}function I(n,i,o,r){i=B(i);var t,e,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=v(f);if(h||1<d&&"string"==typeof f&&!m.checkClone&&Pt.test(f))return n.each(function(t){var e=n.eq(t);h&&(i[0]=f.call(this,t,e.html())),I(e,i,o,r)});if(d&&(e=(t=kt(i,n[0].ownerDocument,!1,n,r)).firstChild,1===t.childNodes.length&&(t=e),e||r)){for(a=(s=S.map(O(t,"script"),Mt)).length;u<d;u++)l=t,u!==p&&(l=S.clone(l,!0,!0),a)&&S.merge(s,O(l,"script")),o.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,S.map(s,jt),u=0;u<a;u++)l=s[u],St.test(l.type||"")&&!w.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):X(l.textContent.replace(Rt,""),l,c))}return n}function Bt(t,e,n){for(var i,o=e?S.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||S.cleanData(O(i)),i.parentNode&&(n&&k(i)&&Tt(O(i,"script")),i.parentNode.removeChild(i));return t}S.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,r,s,a,l,c,u=t.cloneNode(!0),d=k(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(s=O(u),i=0,o=(r=O(t)).length;i<o;i++)a=r[i],l=s[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&xt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(r=r||O(t),s=s||O(u),i=0,o=r.length;i<o;i++)Lt(r[i],s[i]);else Lt(t,u);return 0<(s=O(u,"script")).length&&Tt(s,!d&&O(t,"script")),u},cleanData:function(t){for(var e,n,i,o=S.event.special,r=0;void 0!==(n=t[r]);r++)if(y(n)){if(e=n[w.expando]){if(e.events)for(i in e.events)o[i]?S.event.remove(n,i):S.removeEvent(n,i,e.handle);n[w.expando]=void 0}n[c.expando]&&(n[c.expando]=void 0)}}}),S.fn.extend({detach:function(t){return Bt(this,t,!0)},remove:function(t){return Bt(this,t)},text:function(t){return d(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return I(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$t(this,t).appendChild(t)})},prepend:function(){return I(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=$t(this,t)).insertBefore(t,e.firstChild)})},before:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(O(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return d(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!D[(Ct.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(O(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return I(this,arguments,function(t){var e=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(O(this)),e)&&e.replaceChild(t,this)},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,s){S.fn[t]=function(t){for(var e,n=[],i=S(t),o=i.length-1,r=0;r<=o;r++)e=r===o?this:this.clone(!0),S(i[r])[s](e),F.apply(n,e.get());return this.pushStack(n)}});function Ft(t){var e=t.ownerDocument.defaultView;return(e=e&&e.opener?e:x).getComputedStyle(t)}function Ht(t,e,n){var i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in n=n.call(t),e)t.style[i]=o[i];return n}var _t,qt,Wt,zt,Ut,Gt,Xt,o,Yt=new RegExp("^("+t+")(?!px)[a-z%]+$","i"),Vt=/^--/,Kt=new RegExp(p.join("|"),"i"),r="[\\x20\\t\\r\\n\\f]",Qt=new RegExp("^"+r+"+|((?:^|[^\\\\])(?:\\\\.)*)"+r+"+$","g");function Zt(){var t;o&&(Xt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",o.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",A.appendChild(Xt).appendChild(o),t=x.getComputedStyle(o),_t="1%"!==t.top,Gt=12===Jt(t.marginLeft),o.style.right="60%",zt=36===Jt(t.right),qt=36===Jt(t.width),o.style.position="absolute",Wt=12===Jt(o.offsetWidth/3),A.removeChild(Xt),o=null)}function Jt(t){return Math.round(parseFloat(t))}function te(t,e,n){var i,o=Vt.test(e),r=t.style;return(n=n||Ft(t))&&(i=n.getPropertyValue(e)||n[e],""!==(i=o?i.replace(Qt,"$1"):i)||k(t)||(i=S.style(t,e)),!m.pixelBoxStyles())&&Yt.test(i)&&Kt.test(e)&&(o=r.width,t=r.minWidth,e=r.maxWidth,r.minWidth=r.maxWidth=r.width=i,i=n.width,r.width=o,r.minWidth=t,r.maxWidth=e),void 0!==i?i+"":i}function ee(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Xt=C.createElement("div"),(o=C.createElement("div")).style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===o.style.backgroundClip,S.extend(m,{boxSizingReliable:function(){return Zt(),qt},pixelBoxStyles:function(){return Zt(),zt},pixelPosition:function(){return Zt(),_t},reliableMarginLeft:function(){return Zt(),Gt},scrollboxSize:function(){return Zt(),Wt},reliableTrDimensions:function(){var t,e,n;return null==Ut&&(t=C.createElement("table"),e=C.createElement("tr"),n=C.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",A.appendChild(t).appendChild(e).appendChild(n),n=x.getComputedStyle(e),Ut=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===e.offsetHeight,A.removeChild(t)),Ut}}));var ne=["Webkit","Moz","ms"],ie=C.createElement("div").style,oe={};function re(t){var e=S.cssProps[t]||oe[t];return e||(t in ie?t:oe[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if((t=ne[n]+e)in ie)return t}(t)||t)}var se=/^(none|table(?!-c[ea]).+)/,ae={position:"absolute",visibility:"hidden",display:"block"},le={letterSpacing:"0",fontWeight:"400"};function ce(t,e,n){var i=yt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ue(t,e,n,i,o,r){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=S.css(t,n+p[s],!0,o)),i?("content"===n&&(l-=S.css(t,"padding"+p[s],!0,o)),"margin"!==n&&(l-=S.css(t,"border"+p[s]+"Width",!0,o))):(l+=S.css(t,"padding"+p[s],!0,o),"padding"!==n?l+=S.css(t,"border"+p[s]+"Width",!0,o):a+=S.css(t,"border"+p[s]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function de(t,e,n){var i=Ft(t),o=(!m.boxSizingReliable()||n)&&"border-box"===S.css(t,"boxSizing",!1,i),r=o,s=te(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Yt.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&l(t,"tr")||"auto"===s||!parseFloat(s)&&"inline"===S.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===S.css(t,"boxSizing",!1,i),r=a in t)&&(s=t[a]),(s=parseFloat(s)||0)+ue(t,e,n||(o?"border":"content"),r,i,s)+"px"}function s(t,e,n,i,o){return new s.prototype.init(t,e,n,i,o)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e)return""===(e=te(t,"opacity"))?"1":e}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=b(e),l=Vt.test(e),c=t.style;if(l||(e=re(a)),s=S.cssHooks[e]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"===(r=_typeof(n))&&(o=yt.exec(n))&&o[1]&&(n=bt(t,e,o),r="number"),null==n||n!=n||("number"!==r||l||(n+=o&&o[3]||(S.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i)))||(l?c.setProperty(e,n):c[e]=n)}},css:function(t,e,n,i){var o,r=b(e);return Vt.test(e)||(e=re(r)),"normal"===(o=void 0===(o=(r=S.cssHooks[e]||S.cssHooks[r])&&"get"in r?r.get(t,!0,n):o)?te(t,e,i):o)&&e in le&&(o=le[e]),(""===n||n)&&(r=parseFloat(o),!0===n||isFinite(r))?r||0:o}}),S.each(["height","width"],function(t,s){S.cssHooks[s]={get:function(t,e,n){if(e)return!se.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?de(t,s,n):Ht(t,ae,function(){return de(t,s,n)})},set:function(t,e,n){var i=Ft(t),o=!m.scrollboxSize()&&"absolute"===i.position,r=(o||n)&&"border-box"===S.css(t,"boxSizing",!1,i),n=n?ue(t,s,n,r,i):0;return r&&o&&(n-=Math.ceil(t["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(i[s])-ue(t,s,"border",!1,i)-.5)),n&&(r=yt.exec(e))&&"px"!==(r[3]||"px")&&(t.style[s]=e,e=S.css(t,s)),ce(0,e,n)}}}),S.cssHooks.marginLeft=ee(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(te(t,"marginLeft"))||t.getBoundingClientRect().left-Ht(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(o,r){S.cssHooks[o+r]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+p[e]+r]=i[e]||i[e-2]||i[0];return n}},"margin"!==o&&(S.cssHooks[o+r].set=ce)}),S.fn.extend({css:function(t,e){return d(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Ft(t),o=e.length;s<o;s++)r[e[s]]=S.css(t,e[s],!1,i);return r}return void 0!==n?S.style(t,e,n):S.css(t,e)},t,e,1<arguments.length)}}),((S.Tween=s).prototype={constructor:s,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(S.cssNumber[n]?"":"px")},cur:function(){var t=s.propHooks[this.prop];return(t&&t.get?t:s.propHooks._default).get(this)},run:function(t){var e,n=s.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:s.propHooks._default).set(this),this}}).init.prototype=s.prototype,(s.propHooks={_default:{get:function(t){return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(t=S.css(t.elem,t.prop,""))&&"auto"!==t?t:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[re(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=s.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=s.prototype.init,S.fx.step={};var N,pe,P,fe=/^(?:toggle|show|hide)$/,he=/queueHooks$/;function ge(){pe&&(!1===C.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(ge):x.setTimeout(ge,S.fx.interval),S.fx.tick())}function me(){return x.setTimeout(function(){N=void 0}),N=Date.now()}function ye(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=p[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function ve(t,e,n){for(var i,o=(R.tweeners[e]||[]).concat(R.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function R(o,t,e){var n,r,i,s,a,l,c,u=0,d=R.prefilters.length,p=S.Deferred().always(function(){delete f.elem}),f=function(){if(!r){for(var t=N||me(),t=Math.max(0,h.startTime+h.duration-t),e=1-(t/h.duration||0),n=0,i=h.tweens.length;n<i;n++)h.tweens[n].run(e);if(p.notifyWith(o,[h,e,t]),e<1&&i)return t;i||p.notifyWith(o,[h,1,0]),p.resolveWith(o,[h])}return!1},h=p.promise({elem:o,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},e),originalProperties:t,originalOptions:e,startTime:N||me(),duration:e.duration,tweens:[],createTween:function(t,e){e=S.Tween(o,h.opts,t,e,h.opts.specialEasing[t]||h.opts.easing);return h.tweens.push(e),e},stop:function(t){var e=0,n=t?h.tweens.length:0;if(!r){for(r=!0;e<n;e++)h.tweens[e].run(1);t?(p.notifyWith(o,[h,1,0]),p.resolveWith(o,[h,t])):p.rejectWith(o,[h,t])}return this}}),g=h.props,m=g,y=h.opts.specialEasing;for(i in m)if(a=y[s=b(i)],l=m[i],Array.isArray(l)&&(a=l[1],l=m[i]=l[0]),i!==s&&(m[s]=l,delete m[i]),(c=S.cssHooks[s])&&"expand"in c)for(i in l=c.expand(l),delete m[s],l)i in m||(m[i]=l[i],y[i]=a);else y[s]=a;for(;u<d;u++)if(n=R.prefilters[u].call(h,o,g,h.opts))return v(n.stop)&&(S._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return S.map(g,ve,h),v(h.opts.start)&&h.opts.start.call(o,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),S.fx.timer(S.extend(f,{elem:o,anim:h,queue:h.opts.queue})),h}S.Animation=S.extend(R,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return bt(n.elem,t,yt.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,o=(t=v(t)?(e=t,["*"]):t.match(T)).length;i<o;i++)n=t[i],R.tweeners[n]=R.tweeners[n]||[],R.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u="width"in e||"height"in e,d=this,p={},f=t.style,h=t.nodeType&&mt(t),g=w.get(t,"fxshow");for(i in n.queue||(null==(s=S._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,S.queue(t,"fx").length||s.empty.fire()})})),e)if(o=e[i],fe.test(o)){if(delete e[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||S.style(t,i)}if((l=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(i in u&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=w.get(t,"display")),"none"===(u=S.css(t,"display"))&&(c?u=c:(E([t],!0),c=t.style.display||c,u=S.css(t,"display"),E([t]))),"inline"===u||"inline-block"===u&&null!=c)&&"none"===S.css(t,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block"),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=w.access(t,"fxshow",{display:c}),r&&(g.hidden=!h),h&&E([t],!0),d.done(function(){for(i in h||E([t]),w.remove(t,"fxshow"),p)S.style(t,i,p[i])})),l=ve(h?g[i]:0,i,d),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?R.prefilters.unshift(t):R.prefilters.push(t)}}),S.speed=function(t,e,n){var i=t&&"object"===_typeof(t)?S.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(t,e,n,i){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){function o(){var t=R(this,S.extend({},e),s);(r||w.get(this,"finish"))&&t.stop(!0)}var r=S.isEmptyObject(e),s=S.speed(t,n,i);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,t,r){function s(t){var e=t.stop;delete t.stop,e(r)}return"string"!=typeof o&&(r=t,t=o,o=void 0),t&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=S.timers,i=w.get(this);if(e)i[e]&&i[e].stop&&s(i[e]);else for(e in i)i[e]&&i[e].stop&&he.test(e)&&s(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(r),t=!1,n.splice(e,1));!t&&r||S.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var t,e=w.get(this),n=e[s+"queue"],i=e[s+"queueHooks"],o=S.timers,r=n?n.length:0;for(e.finish=!0,S.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===s&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),S.each(["toggle","show","hide"],function(t,i){var o=S.fn[i];S.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(ye(i,!0),t,e,n)}}),S.each({slideDown:ye("show"),slideUp:ye("hide"),slideToggle:ye("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){S.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(N=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),N=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pe||(pe=!0,ge())},S.fx.stop=function(){pe=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(i,t){return i=S.fx&&S.fx.speeds[i]||i,this.queue(t=t||"fx",function(t,e){var n=x.setTimeout(t,i);e.stop=function(){x.clearTimeout(n)}})},P=C.createElement("input"),t=C.createElement("select").appendChild(C.createElement("option")),P.type="checkbox",m.checkOn=""!==P.value,m.optSelected=t.selected,(P=C.createElement("input")).value="t",P.type="radio",m.radioValue="t"===P.value;var be,we=S.expr.attrHandle,xe=(S.fn.extend({attr:function(t,e){return d(this,S.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?S.prop(t,e,n):(1===r&&S.isXMLDoc(t)||(o=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):!(o&&"get"in o&&null!==(i=o.get(t,e)))&&null==(i=S.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){var n;if(!m.radioValue&&"radio"===e&&l(t,"input"))return n=t.value,t.setAttribute("type",e),n&&(t.value=n),e}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(T);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var s=we[e]||S.find.attr;we[e]=function(t,e,n){var i,o,r=e.toLowerCase();return n||(o=we[r],we[r]=i,i=null!=s(t,e,n)?r:null,we[r]=o),i}}),/^(?:input|select|textarea|button)$/i),Ce=/^(?:a|area)$/i;function $(t){return(t.match(T)||[]).join(" ")}function M(t){return t.getAttribute&&t.getAttribute("class")||""}function Se(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(T)||[]}S.fn.extend({prop:function(t,e){return d(this,S.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&S.isXMLDoc(t)||(e=S.propFix[e]||e,o=S.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):xe.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(t){t=t.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(t){t=t.parentNode;t&&(t.selectedIndex,t.parentNode)&&t.parentNode.selectedIndex}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(e){var t,n,i,o,r,s;return v(e)?this.each(function(t){S(this).addClass(e.call(this,t,M(this)))}):(t=Se(e)).length?this.each(function(){if(i=M(this),n=1===this.nodeType&&" "+$(i)+" "){for(r=0;r<t.length;r++)o=t[r],n.indexOf(" "+o+" ")<0&&(n+=o+" ");s=$(n),i!==s&&this.setAttribute("class",s)}}):this},removeClass:function(e){var t,n,i,o,r,s;return v(e)?this.each(function(t){S(this).removeClass(e.call(this,t,M(this)))}):arguments.length?(t=Se(e)).length?this.each(function(){if(i=M(this),n=1===this.nodeType&&" "+$(i)+" "){for(r=0;r<t.length;r++)for(o=t[r];-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");s=$(n),i!==s&&this.setAttribute("class",s)}}):this:this.attr("class","")},toggleClass:function(e,n){var t,i,o,r,s=_typeof(e),a="string"===s||Array.isArray(e);return v(e)?this.each(function(t){S(this).toggleClass(e.call(this,t,M(this),n),n)}):"boolean"==typeof n&&a?n?this.addClass(e):this.removeClass(e):(t=Se(e),this.each(function(){if(a)for(r=S(this),o=0;o<t.length;o++)i=t[o],r.hasClass(i)?r.removeClass(i):r.addClass(i);else void 0!==e&&"boolean"!==s||((i=M(this))&&w.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",!i&&!1!==e&&w.get(this,"__className__")||""))}))},hasClass:function(t){for(var e,n=0,i=" "+t+" ";e=this[n++];)if(1===e.nodeType&&-1<(" "+$(M(e))+" ").indexOf(i))return!0;return!1}});function Te(t){t.stopPropagation()}var Ae=/\r/g,ke=(S.fn.extend({val:function(e){var n,t,i,o=this[0];return arguments.length?(i=v(e),this.each(function(t){1!==this.nodeType||(null==(t=i?e.call(this,t,S(this).val()):e)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(t){return null==t?"":t+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value"))||(this.value=t)})):o?(n=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(t=n.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(Ae,""):null==t?"":t:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:$(S.text(t))}},select:{get:function(t){for(var e,n=t.options,i=t.selectedIndex,o="select-one"===t.type,r=o?null:[],s=o?i+1:n.length,a=i<0?s:o?i:0;a<s;a++)if(((e=n[a]).selected||a===i)&&!e.disabled&&(!e.parentNode.disabled||!l(e.parentNode,"optgroup"))){if(e=S(e).val(),o)return e;r.push(e)}return r},set:function(t,e){for(var n,i,o=t.options,r=S.makeArray(e),s=o.length;s--;)((i=o[s]).selected=-1<S.inArray(S.valHooks.option.get(i),r))&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<S.inArray(S(t).val(),e)}},m.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),m.focusin="onfocusin"in x,/^(?:focusinfocus|focusoutblur)$/),Ee=(S.extend(S.event,{trigger:function(t,e,n,i){var o,r,s,a,l,c,u,d=[n||C],p=W.call(t,"type")?t.type:t,f=W.call(t,"namespace")?t.namespace.split("."):[],h=u=r=n=n||C;if(3!==n.nodeType&&8!==n.nodeType&&!ke.test(p+S.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(t=t[S.expando]?t:new S.Event(p,"object"===_typeof(t)&&t)).isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:S.makeArray(e,[t]),c=S.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,e))){if(!i&&!c.noBubble&&!g(n)){for(s=c.delegateType||p,ke.test(s+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),r=h;r===(n.ownerDocument||C)&&d.push(r.defaultView||r.parentWindow||x)}for(o=0;(h=d[o++])&&!t.isPropagationStopped();)u=h,t.type=1<o?s:c.bindType||p,(l=(w.get(h,"events")||Object.create(null))[t.type]&&w.get(h,"handle"))&&l.apply(h,e),(l=a&&h[a])&&l.apply&&y(h)&&(t.result=l.apply(h,e),!1===t.result)&&t.preventDefault();return t.type=p,i||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),e)||!y(n)||a&&v(n[p])&&!g(n)&&((r=n[a])&&(n[a]=null),S.event.triggered=p,t.isPropagationStopped()&&u.addEventListener(p,Te),n[p](),t.isPropagationStopped()&&u.removeEventListener(p,Te),S.event.triggered=void 0,r)&&(n[a]=r),t.result}},simulate:function(t,e,n){n=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(n,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}}),m.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,i){function o(t){S.event.simulate(i,t.target,S.event.fix(t))}S.event.special[i]={setup:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,i);e||t.addEventListener(n,o,!0),w.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,i)-1;e?w.access(t,i,e):(t.removeEventListener(n,o,!0),w.remove(t,i))}}}),x.location),De={guid:Date.now()},Oe=/\?/,Ie=(S.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new x.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,function(t){return t.textContent}).join("\n"):t)),e},/\[\]$/),Ne=/\r?\n/g,Pe=/^(?:submit|button|image|reset|file)$/i,Re=/^(?:input|select|textarea|keygen)/i;S.param=function(t,e){function n(t,e){e=v(e)?e():e,o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)}var i,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){n(this.name,this.value)});else for(i in t)!function n(i,t,o,r){if(Array.isArray(t))S.each(t,function(t,e){o||Ie.test(i)?r(i,e):n(i+"["+("object"===_typeof(e)&&null!=e?t:"")+"]",e,o,r)});else if(o||"object"!==h(t))r(i,t);else for(var e in t)n(i+"["+e+"]",t[e],o,r)}(i,t[i],e,n);return o.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Re.test(this.nodeName)&&!Pe.test(t)&&(this.checked||!xt.test(t))}).map(function(t,e){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}}):{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}});var $e=/%20/g,Me=/#.*$/,je=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,Fe=/^\/\//,He={},_e={},qe="*/".concat("*"),We=C.createElement("a");function ze(r){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(T)||[];if(v(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(e)):(r[n]=r[n]||[]).push(e)}}function Ue(e,i,o,r){var s={},a=e===_e;function l(t){var n;return s[t]=!0,S.each(e[t]||[],function(t,e){e=e(i,o,r);return"string"!=typeof e||a||s[e]?a?!(n=e):void 0:(i.dataTypes.unshift(e),l(e),!1)}),n}return l(i.dataTypes[0])||!s["*"]&&l("*")}function Ge(t,e){var n,i,o=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i=i||{})[n]=e[n]);return i&&S.extend(!0,t,i),t}We.href=Ee.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,S.ajaxSettings),e):Ge(S.ajaxSettings,t)},ajaxPrefilter:ze(He),ajaxTransport:ze(_e),ajax:function(t,e){"object"===_typeof(t)&&(e=t,t=void 0);var l,c,u,n,d,p,f,i,h=S.ajaxSetup({},e=e||{}),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?S(g):S.event,y=S.Deferred(),v=S.Callbacks("once memory"),b=h.statusCode||{},o={},r={},s="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=Le.exec(u);)n[e[1].toLowerCase()+" "]=(n[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=n[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return p?u:null},setRequestHeader:function(t,e){return null==p&&(t=r[t.toLowerCase()]=r[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==p&&(h.mimeType=t),this},statusCode:function(t){if(t)if(p)w.always(t[w.status]);else for(var e in t)b[e]=[b[e],t[e]];return this},abort:function(t){t=t||s;return l&&l.abort(t),a(0,t),this}};if(y.promise(w),h.url=((t||h.url||Ee.href)+"").replace(Fe,Ee.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(T)||[""],null==h.crossDomain){t=C.createElement("a");try{t.href=h.url,t.href=t.href,h.crossDomain=We.protocol+"//"+We.host!=t.protocol+"//"+t.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=S.param(h.data,h.traditional)),Ue(He,h,e,w),!p){for(i in(f=S.event&&h.global)&&0==S.active++&&S.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Be.test(h.type),c=h.url.replace(Me,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace($e,"+")):(t=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(Oe.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(je,"$1"),t=(Oe.test(c)?"&":"?")+"_="+De.guid+++t),h.url=c+t),h.ifModified&&(S.lastModified[c]&&w.setRequestHeader("If-Modified-Since",S.lastModified[c]),S.etag[c])&&w.setRequestHeader("If-None-Match",S.etag[c]),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&w.setRequestHeader("Content-Type",h.contentType),w.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qe+"; q=0.01":""):h.accepts["*"]),h.headers)w.setRequestHeader(i,h.headers[i]);if(h.beforeSend&&(!1===h.beforeSend.call(g,w,h)||p))return w.abort();if(s="abort",v.add(h.complete),w.done(h.success),w.fail(h.error),l=Ue(_e,h,e,w)){if(w.readyState=1,f&&m.trigger("ajaxSend",[w,h]),p)return w;h.async&&0<h.timeout&&(d=x.setTimeout(function(){w.abort("timeout")},h.timeout));try{p=!1,l.send(o,a)}catch(t){if(p)throw t;a(-1,t)}}else a(-1,"No Transport")}return w;function a(t,e,n,i){var o,r,s,a=e;p||(p=!0,d&&x.clearTimeout(d),l=void 0,u=i||"",w.readyState=0<t?4:0,i=200<=t&&t<300||304===t,n&&(s=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(h,w,n)),!i&&-1<S.inArray("script",h.dataTypes)&&S.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(h,s,w,i),i?(h.ifModified&&((n=w.getResponseHeader("Last-Modified"))&&(S.lastModified[c]=n),n=w.getResponseHeader("etag"))&&(S.etag[c]=n),204===t||"HEAD"===h.type?a="nocontent":304===t?a="notmodified":(a=s.state,o=s.data,i=!(r=s.error))):(r=a,!t&&a||(a="error",t<0&&(t=0))),w.status=t,w.statusText=(e||a)+"",i?y.resolveWith(g,[o,a,w]):y.rejectWith(g,[w,a,r]),w.statusCode(b),b=void 0,f&&m.trigger(i?"ajaxSuccess":"ajaxError",[w,h,i?o:r]),v.fireWith(g,[w,a]),f&&(m.trigger("ajaxComplete",[w,h]),--S.active||S.event.trigger("ajaxStop")))}},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,o){S[o]=function(t,e,n,i){return v(e)&&(i=i||n,n=e,e=void 0),S.ajax(S.extend({url:t,type:o,dataType:i,data:e,success:n},S.isPlainObject(t)&&t))}}),S.ajaxPrefilter(function(t){for(var e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),S._evalUrl=function(t,e,n){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e,n)}})},S.fn.extend({wrapAll:function(t){return this[0]&&(v(t)&&(t=t.call(this[0])),t=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(t){S(this).wrapInner(n.call(this,t))}):this.each(function(){var t=S(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=v(e);return this.each(function(t){S(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(t){}};var Xe={0:200,1223:204},Ye=S.ajaxSettings.xhr(),Ve=(m.cors=!!Ye&&"withCredentials"in Ye,m.ajax=Ye=!!Ye,S.ajaxTransport(function(o){var r,s;if(m.cors||Ye&&!o.crossDomain)return{send:function(t,e){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);r=function(t){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Xe[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&x.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(t){if(r)throw t}},abort:function(){r&&r()}}}),S.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(t,e){i=S("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(t){i.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),C.head.appendChild(i[0])},abort:function(){o&&o()}}}),[]),Ke=/(=)\?(?=&|$)|\?\?/,Qe=(S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||S.expando+"_"+De.guid++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,r,s=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ke,"$1"+i):!1!==t.jsonp&&(t.url+=(Oe.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return r||S.error(i+" was not called"),r[0]},t.dataTypes[0]="json",o=x[i],x[i]=function(){r=arguments},n.always(function(){void 0===o?S(x).removeProp(i):x[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(i)),r&&v(o)&&o(r[0]),r=o=void 0}),"script"}),m.createHTMLDocument=((r=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===r.childNodes.length),S.parseHTML=function(t,e,n){var i;return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,e.head.appendChild(i)):e=C),i=!n&&[],(n=Q.exec(t))?[e.createElement(n[1])]:(n=kt([t],e,i),i&&i.length&&S(i).remove(),S.merge([],n.childNodes)))},S.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return-1<a&&(i=$(t.slice(a)),t=t.slice(0,a)),v(e)?(n=e,e=void 0):e&&"object"===_typeof(e)&&(o="POST"),0<s.length&&S.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?S("<div>").append(S.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(t,e,n){var i,o,r,s,a=S.css(t,"position"),l=S(t),c={};"static"===a&&(t.style.position="relative"),r=l.offset(),i=S.css(t,"top"),s=S.css(t,"left"),a=("absolute"===a||"fixed"===a)&&-1<(i+s).indexOf("auto")?(o=(a=l.position()).top,a.left):(o=parseFloat(i)||0,parseFloat(s)||0),null!=(e=v(e)?e.call(t,n,S.extend({},r)):e).top&&(c.top=e.top-r.top+o),null!=e.left&&(c.left=e.left-r.left+a),"using"in e?e.using.call(t,c):l.css(c)}},S.fn.extend({offset:function(e){var t,n;return arguments.length?void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)}):(n=this[0])?n.getClientRects().length?(t=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===S.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),o.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-S.css(i,"marginTop",!0),left:e.left-o.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||A})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var r="pageYOffset"===o;S.fn[e]=function(t){return d(this,function(t,e,n){var i;if(g(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[o]:t[e];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),S.each(["top","left"],function(t,n){S.cssHooks[n]=ee(m.pixelPosition,function(t,e){if(e)return e=te(t,n),Yt.test(e)?S(t).position()[n]+"px":e})}),S.each({Height:"height",Width:"width"},function(s,a){S.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,r){S.fn[r]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return d(this,function(t,e,n){var i;return g(t)?0===r.indexOf("outer")?t["inner"+s]:t.document.documentElement["client"+s]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+s],i["scroll"+s],t.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?S.css(t,e,o):S.style(t,e,n,o)},a,n?t:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){S.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Ze=(S.proxy=function(t,e){var n,i;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),(i=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||S.guid++,i},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=l,S.isFunction=v,S.isWindow=g,S.camelCase=b,S.type=h,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},S.trim=function(t){return null==t?"":(t+"").replace(Qe,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S}),x.jQuery),Je=x.$;return S.noConflict=function(t){return x.$===S&&(x.$=Je),t&&x.jQuery===S&&(x.jQuery=Ze),S},void 0===j&&(x.jQuery=x.$=S),S}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){var i,s=window.Slick||{};i=0,(s=function(t,e){var n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,t=c(t).data("slick")||{},n.options=c.extend({},n.defaults,e,t),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=i++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(t,e,n){var i=this;if("boolean"==typeof e)n=e,e=null;else if(e<0||e>=i.slideCount)return!1;i.unload(),"number"==typeof e?0===e&&0===i.$slides.length?c(t).appendTo(i.$slideTrack):n?c(t).insertBefore(i.$slides.eq(e)):c(t).insertAfter(i.$slides.eq(e)):!0===n?c(t).prependTo(i.$slideTrack):c(t).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),i.$slidesCache=i.$slides,i.reinit()},s.prototype.animateHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:t},e.options.speed))},s.prototype.animateSlide=function(t,e){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(t=-t),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:t},i.options.speed,i.options.easing,e):i.$slideTrack.animate({top:t},i.options.speed,i.options.easing,e):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:t},{duration:i.options.speed,easing:i.options.easing,step:function(t){t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate("+t+"px, 0px)":n[i.animType]="translate(0px,"+t+"px)",i.$slideTrack.css(n)},complete:function(){e&&e.call()}})):(i.applyTransition(),t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate3d("+t+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+t+"px, 0px)",i.$slideTrack.css(n),e&&setTimeout(function(){i.disableTransition(),e.call()},i.options.speed))},s.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t=t&&null!==t?c(t).not(this.$slider):t},s.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"===_typeof(t)&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},s.prototype.applyTransition=function(t){var e=this,n={};!1===e.options.fade?n[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:n[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,(!1===e.options.fade?e.$slideTrack:e.$slides.eq(t)).css(n)},s.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0)&&(t.direction=1)),t.slideHandler(e))},s.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var t,e,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)e.append(c("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=e.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},s.prototype.buildRows=function(){var t,e,n,i=this,o=document.createDocumentFragment(),r=i.$slider.children();if(0<i.options.rows){for(n=i.options.slidesPerRow*i.options.rows,e=Math.ceil(r.length/n),t=0;t<e;t++){for(var s=document.createElement("div"),a=0;a<i.options.rows;a++){for(var l=document.createElement("div"),c=0;c<i.options.slidesPerRow;c++){var u=t*n+(a*i.options.slidesPerRow+c);r.get(u)&&l.appendChild(r.get(u))}s.appendChild(l)}o.appendChild(s)}i.$slider.empty().append(o),i.$slider.children().children().children().css({width:100/i.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(t,e){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint&&i===r.activeBreakpoint&&!e||(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t),s=i),t||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(t,e){var n,i=this,o=c(t.currentTarget);switch(o.is("a")&&t.preventDefault(),o.is("li")||(o=o.closest("li")),n=i.slideCount%i.options.slidesToScroll!=0?0:(i.slideCount-i.currentSlide)%i.options.slidesToScroll,t.data.message){case"previous":r=0==n?i.options.slidesToScroll:i.options.slidesToShow-n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide-r,!1,e);break;case"next":r=0==n?i.options.slidesToScroll:n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide+r,!1,e);break;case"index":var r=0===t.data.index?0:t.data.index||o.index()*i.options.slidesToScroll;i.slideHandler(i.checkNavigable(r),!1,e),o.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(t){var e=this.getNavigableIndexes(),n=0;if(t>e[e.length-1])t=e[e.length-1];else for(var i in e){if(t<e[i]){t=n;break}n=e[i]}return t},s.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility)&&t.$dots.off("keydown.slick",t.keyHandler),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility)&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow)&&t.$nextArrow.off("keydown.slick",t.keyHandler),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},s.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},s.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},s.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow))&&e.$prevArrow.remove(),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow))&&e.$nextArrow.remove(),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},s.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(t)).css(e)},s.prototype.fadeSlide=function(t,e){var n=this;!1===n.cssTransitions?(n.$slides.eq(t).css({zIndex:n.options.zIndex}),n.$slides.eq(t).animate({opacity:1},n.options.speed,n.options.easing,e)):(n.applyTransition(t),n.$slides.eq(t).css({opacity:1,zIndex:n.options.zIndex}),e&&setTimeout(function(){n.disableTransition(t),e.call()},n.options.speed))},s.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},s.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=e.is(":focus"),n.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var t=this,e=0,n=0,i=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++i;else for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)i=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else i=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return i-1},s.prototype.getLeft=function(t){var e,n,i=this,o=0;return i.slideOffset=0,e=i.$slides.first().outerHeight(!0),!0===i.options.infinite?(i.slideCount>i.options.slidesToShow&&(i.slideOffset=i.slideWidth*i.options.slidesToShow*-1,n=-1,!0===i.options.vertical&&!0===i.options.centerMode&&(2===i.options.slidesToShow?n=-1.5:1===i.options.slidesToShow&&(n=-2)),o=e*i.options.slidesToShow*n),i.slideCount%i.options.slidesToScroll!=0&&t+i.options.slidesToScroll>i.slideCount&&i.slideCount>i.options.slidesToShow&&(o=t>i.slideCount?(i.slideOffset=(i.options.slidesToShow-(t-i.slideCount))*i.slideWidth*-1,(i.options.slidesToShow-(t-i.slideCount))*e*-1):(i.slideOffset=i.slideCount%i.options.slidesToScroll*i.slideWidth*-1,i.slideCount%i.options.slidesToScroll*e*-1))):t+i.options.slidesToShow>i.slideCount&&(i.slideOffset=(t+i.options.slidesToShow-i.slideCount)*i.slideWidth,o=(t+i.options.slidesToShow-i.slideCount)*e),i.slideCount<=i.options.slidesToShow&&(o=i.slideOffset=0),!0===i.options.centerMode&&i.slideCount<=i.options.slidesToShow?i.slideOffset=i.slideWidth*Math.floor(i.options.slidesToShow)/2-i.slideWidth*i.slideCount/2:!0===i.options.centerMode&&!0===i.options.infinite?i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)-i.slideWidth:!0===i.options.centerMode&&(i.slideOffset=0,i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)),n=!1===i.options.vertical?t*i.slideWidth*-1+i.slideOffset:t*e*-1+o,!0===i.options.variableWidth&&(e=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow),n=!0===i.options.rtl?e[0]?-1*(i.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,!0===i.options.centerMode)&&(e=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow+1),n=!0===i.options.rtl?e[0]?-1*(i.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,n+=(i.$list.width()-e.outerWidth())/2),n},s.prototype.getOption=s.prototype.slickGetOption=function(t){return this.options[t]},s.prototype.getNavigableIndexes=function(){for(var t=this,e=0,n=0,i=[],o=!1===t.options.infinite?t.slideCount:(e=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);e<o;)i.push(e),e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return i},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var n,i=this,o=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0;return!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*i.swipeLeft)return n=e,!1}),Math.abs(c(n).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},s.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},s.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(t){return 0<=t&&t<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+t,tabindex:-1}),-1!==e&&(t="slick-slide-control"+n.instanceUid+e,c("#"+t).length)&&c(this).attr({"aria-describedby":t})}),n.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+t,"aria-controls":"slick-slide"+n.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=n.currentSlide,e=t+n.options.slidesToShow;t<e;t++)n.options.focusOnChange?n.$slides.eq(t).attr({tabindex:"0"}):n.$slides.eq(t).removeAttr("tabindex");n.activateADA()},s.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility)&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler))},s.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility)&&t.$dots.on("keydown.slick",t.keyHandler),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},s.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},s.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},s.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var t,e,n,r=this;function i(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),i)&&t.attr("sizes",i),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,e])},o.src=e})}if(!0===r.options.centerMode?n=!0===r.options.infinite?(e=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(e=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(e=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,n=Math.ceil(e+r.options.slidesToShow),!0===r.options.fade&&(0<e&&e--,n<=r.slideCount)&&n++),t=r.$slider.find(".slick-slide").slice(e,n),"anticipated"===r.options.lazyLoad)for(var o=e-1,s=n,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(s)),o--,s++;i(t),r.slideCount<=r.options.slidesToShow?i(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?i(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&i(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},s.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange)&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus())},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(t){t.preventDefault()},s.prototype.progressiveLazyLoad=function(t){t=t||1;var e,n,i,o,r=this,s=c("img[data-lazy]",r.$slider);s.length?(e=s.first(),n=e.attr("data-lazy"),i=e.attr("data-srcset"),o=e.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){i&&(e.attr("srcset",i),o)&&e.attr("sizes",o),e.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,e,n]),r.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){r.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,n]),r.progressiveLazyLoad())},s.src=n):r.$slider.trigger("allImagesLoaded",[r])},s.prototype.refresh=function(t){var e=this,n=e.slideCount-e.options.slidesToShow;!e.options.infinite&&e.currentSlide>n&&(e.currentSlide=n),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),n=e.currentSlide,e.destroy(!0),c.extend(e,e.initials,{currentSlide:n}),e.init(),t||e.changeSlide({data:{message:"index",index:n}},!1)},s.prototype.registerBreakpoints=function(){var t,e,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===e&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(e),i.breakpointSettings[e]=o[t].settings}i.breakpoints.sort(function(t,e){return i.options.mobileFirst?t-e:e-t})}},s.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},s.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(t,e,n){var i=this;if(t="boolean"==typeof t?!0===(e=t)?0:i.slideCount-1:!0===e?--t:t,i.slideCount<1||t<0||t>i.slideCount-1)return!1;i.unload(),(!0===n?i.$slideTrack.children():i.$slideTrack.children(this.options.slide).eq(t)).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},s.prototype.setCSS=function(t){var e,n,i=this,o={};!0===i.options.rtl&&(t=-t),e="left"==i.positionProp?Math.ceil(t)+"px":"0px",n="top"==i.positionProp?Math.ceil(t)+"px":"0px",o[i.positionProp]=t,!1!==i.transformsEnabled&&(!(o={})===i.cssTransitions?o[i.animType]="translate("+e+", "+n+")":o[i.animType]="translate3d("+e+", "+n+", 0px)"),i.$slideTrack.css(o)},s.prototype.setDimensions=function(){var t=this,e=(!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length))),t.$slides.first().outerWidth(!0)-t.$slides.first().width());!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},s.prototype.setFade=function(){var n,i=this;i.$slides.each(function(t,e){n=i.slideWidth*t*-1,!0===i.options.rtl?c(e).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.css("height",t))},s.prototype.setOption=s.prototype.slickSetOption=function(){var t,e,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[0],i=arguments[1],s=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(t,e){r.options[t]=e});else if("responsive"===o)for(e in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[e]];else{for(t=r.options.responsive.length-1;0<=t;)r.options.responsive[t].breakpoint===i[e].breakpoint&&r.options.responsive.splice(t,1),t--;r.options.responsive.push(i[e])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},s.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty)&&void 0===e.webkitPerspective&&(t.animType=!1),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty)&&void 0===e.MozPerspective&&(t.animType=!1),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty)&&void 0===e.webkitPerspective&&(t.animType=!1),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform)&&(t.animType=!1),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},s.prototype.setSlideClasses=function(t){var e,n,i,o=this,r=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode?(n=o.options.slidesToShow%2==0?1:0,i=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&((i<=t&&t<=o.slideCount-1-i?o.$slides.slice(t-i+n,t+i+1):(e=o.options.slidesToShow+t,r.slice(e-i+1+n,e+i+2))).addClass("slick-active").attr("aria-hidden","false"),0===t?r.eq(r.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&r.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")):(0<=t&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow):r.length<=o.options.slidesToShow?r:(n=o.slideCount%o.options.slidesToShow,e=!0===o.options.infinite?o.options.slidesToShow+t:t,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?r.slice(e-(o.options.slidesToShow-n),e+n):r.slice(e,e+o.options.slidesToShow))).addClass("slick-active").attr("aria-hidden","false"),"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},s.prototype.setupInfinite=function(){var t,e,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(e=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,t=i.slideCount;t>i.slideCount-n;--t)c(i.$slides[e=t-1]).clone(!0).attr("id","").attr("data-slick-index",e-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(t=0;t<n+i.slideCount;t+=1)e=t,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},s.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},s.prototype.selectHandler=function(t){t=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),t=(t=parseInt(t.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(t,!1,!0):this.slideHandler(t)},s.prototype.slideHandler=function(t,e,n){var i,o,r,s=this;e=e||!1,!0===s.animating&&!0===s.options.waitForAnimate||!0===s.options.fade&&s.currentSlide===t||(!1===e&&s.asNavFor(t),i=t,e=s.getLeft(i),r=s.getLeft(s.currentSlide),s.currentLeft=null===s.swipeLeft?r:s.swipeLeft,!1===s.options.infinite&&!1===s.options.centerMode&&(t<0||t>s.getDotCount()*s.options.slidesToScroll)||!1===s.options.infinite&&!0===s.options.centerMode&&(t<0||t>s.slideCount-s.options.slidesToScroll)?!1===s.options.fade&&(i=s.currentSlide,!0!==n&&s.slideCount>s.options.slidesToShow?s.animateSlide(r,function(){s.postSlide(i)}):s.postSlide(i)):(s.options.autoplay&&clearInterval(s.autoPlayTimer),o=i<0?s.slideCount%s.options.slidesToScroll!=0?s.slideCount-s.slideCount%s.options.slidesToScroll:s.slideCount+i:i>=s.slideCount?s.slideCount%s.options.slidesToScroll!=0?0:i-s.slideCount:i,s.animating=!0,s.$slider.trigger("beforeChange",[s,s.currentSlide,o]),t=s.currentSlide,s.currentSlide=o,s.setSlideClasses(s.currentSlide),s.options.asNavFor&&(r=(r=s.getNavTarget()).slick("getSlick")).slideCount<=r.options.slidesToShow&&r.setSlideClasses(s.currentSlide),s.updateDots(),s.updateArrows(),!0===s.options.fade?(!0!==n?(s.fadeSlideOut(t),s.fadeSlide(o,function(){s.postSlide(o)})):s.postSlide(o),s.animateHeight()):!0!==n&&s.slideCount>s.options.slidesToShow?s.animateSlide(e,function(){s.postSlide(o)}):s.postSlide(o)))},s.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var t=this,e=t.touchObject.startX-t.touchObject.curX,n=t.touchObject.startY-t.touchObject.curY,n=Math.atan2(n,e),e=Math.round(180*n/Math.PI);return(e=e<0?360-Math.abs(e):e)<=45&&0<=e||e<=360&&315<=e?!1===t.options.rtl?"left":"right":135<=e&&e<=225?!1===t.options.rtl?"right":"left":!0===t.options.verticalSwiping?35<=e&&e<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(t){var e,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(e),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},s.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},s.prototype.swipeMove=function(t){var e,n,i=this,o=void 0!==t.originalEvent?t.originalEvent.touches:null;return!(!i.dragging||i.scrolling||o&&1!==o.length)&&(e=i.getLeft(i.currentSlide),i.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,i.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curX-i.touchObject.startX,2))),o=Math.round(Math.sqrt(Math.pow(i.touchObject.curY-i.touchObject.startY,2))),!i.options.verticalSwiping&&!i.swiping&&4<o?!(i.scrolling=!0):(!0===i.options.verticalSwiping&&(i.touchObject.swipeLength=o),o=i.swipeDirection(),void 0!==t.originalEvent&&4<i.touchObject.swipeLength&&(i.swiping=!0,t.preventDefault()),t=(!1===i.options.rtl?1:-1)*(i.touchObject.curX>i.touchObject.startX?1:-1),!0===i.options.verticalSwiping&&(t=i.touchObject.curY>i.touchObject.startY?1:-1),n=i.touchObject.swipeLength,(i.touchObject.edgeHit=!1)===i.options.infinite&&(0===i.currentSlide&&"right"===o||i.currentSlide>=i.getDotCount()&&"left"===o)&&(n=i.touchObject.swipeLength*i.options.edgeFriction,i.touchObject.edgeHit=!0),!1===i.options.vertical?i.swipeLeft=e+n*t:i.swipeLeft=e+n*(i.$list.height()/i.listWidth)*t,!0===i.options.verticalSwiping&&(i.swipeLeft=e+n*t),!0!==i.options.fade&&!1!==i.options.touchMove&&(!0===i.animating?(i.swipeLeft=null,!1):void i.setCSS(i.swipeLeft))))},s.prototype.swipeStart=function(t){var e,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==e?e.pageX:t.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==e?e.pageY:t.clientY,n.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},s.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},s.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2);!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var t,e=this,n=arguments[0],i=Array.prototype.slice.call(arguments,1),o=e.length,r=0;r<o;r++)if("object"==_typeof(n)||void 0===n?e[r].slick=new s(e[r],n):t=e[r].slick[n].apply(e[r].slick,i),void 0!==t)return t;return e}}),function(p){for(var o,r,s,a,f=null,h=null,t=["webkit","moz","o","ms"],e=p.document.createElement("div"),n=-1,n=0;n<t.length&&!p.requestAnimationFrame;n++)p.requestAnimationFrame=p[t[n]+"RequestAnimationFrame"];function i(){}void 0===e.nextElementSibling&&Object.defineProperty(p.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(e=p.Element.prototype).matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(r=Object.prototype.hasOwnProperty,s=!{toString:null}.propertyIsEnumerable("toString"),a=(o=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],n="",i=-1;if("object"!==_typeof(t)&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(n in t)r.call(t,n)&&e.push(n);if(s)for(i=0;i<a;i++)r.call(t,o[i])&&e.push(o[i]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");i.prototype=t||{};var n=new i;return i.prototype=null,void 0!==e&&Object.defineProperties(n,e),null===t&&(n.__proto__=null),n}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,i,o;if(null===this)throw new TypeError;if(0!=(o=(i=Object(this)).length>>>0)&&(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),!(o<=e)))for(n=0<=e?e:Math.max(o-Math.abs(e),0);n<o;n++)if(n in i&&i[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,i,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),i=function(){},o=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))},(n=this).prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),p.Element.prototype.dispatchEvent||(p.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}}),(f=function(t,e,n){var i,o=null,r=!1,s=null,a=null,l=[],c="",u=[],d=-1,a=n||p.document,r=(r=arguments[3])&&"boolean"==typeof r;if("string"==typeof t)u=a.querySelectorAll(t);else if(t&&"object"===_typeof(t)&&h.isElement(t,a))u=[t];else{if(!t||"object"!==_typeof(t)||!t.length)throw new Error(f.messages.errorFactoryInvalidContainer());u=t}if(u.length<1)throw new Error(f.messages.errorFactoryContainerNotFound());for(d=0;(o=u[d])&&(!(0<d)||r);d++)o.id?c=o.id:(c="MixItUp"+h.randomHex(),o.id=c),f.instances[c]instanceof f.Mixer?(s=f.instances[c],(!e||e.debug&&!1!==e.debug.showWarnings)&&console.warn(f.messages.warningFactoryPreexistingInstance())):((s=new f.Mixer).attach(o,a,c,e),f.instances[c]=s),i=new f.Facade(s),e&&e.debug&&e.debug.enable?l.push(s):l.push(i);return r?new f.Collection(l):l[0]}).use=function(t){f.Base.prototype.callActions.call(f,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===f.extensions[t.NAME]&&(t(f),f.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(f.libraries.$=t),f.Base.prototype.callActions.call(f,"afterUse",arguments)},f.instances={},f.extensions={},f.libraries={},h={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){this.hasClass(t,e)&&(e=new RegExp("(\\s|^)"+e+"(\\s|$)"),t.className=t.className.replace(e," ").trim())},extend:function(e,t,n,i){var o,r=[],s=-1;n=n||!1,i=i||!1;try{if(Array.isArray(t))for(s=0;s<t.length;s++)r.push(s);else t&&(r=Object.keys(t));for(s=0;s<r.length;s++)o=r[s],!n||"object"!==_typeof(t[o])||this.isElement(t[o])?e[o]=t[o]:(Array.isArray(t[o])?e[o]||(e[o]=[]):e[o]||(e[o]={}),this.extend(e[o],t[o],n,i))}catch(t){if(!i)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var n=null,i="",o="",r="",s="",a=-1,l=-1;if(t instanceof TypeError&&(n=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(s in i=n[1],e){for(l=0;l<i.length&&i.charAt(l)===s.charAt(l);)l++;a<l&&(a=l,r=s)}throw 1<a&&(o=f.messages.errorConfigInvalidPropertySuggestion({probableMatch:r})),n=f.messages.errorConfigInvalidProperty({erroneous:i,suggestion:o}),new TypeError(n)}throw t},template:function(i){for(var t,e=/\${([\w]*)}/g,o={};t=e.exec(i);)o[t[1]]=new RegExp("\\${"+t[1]+"}","g");return function(t){var e="",n=i;for(e in t=t||{},o)n=n.replace(o[e],void 0!==t[e]?t[e]:"");return n}},on:function(t,e,n,i){t&&(t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&(t["e"+e+n]=n,t[e+n]=function(){t["e"+e+n](p.event)},t.attachEvent("on"+e,t[e+n])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(t,e,n){var i=null;return n=n||p.document,"function"==typeof p.CustomEvent?i=new p.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof n.createEvent?(i=n.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((i=n.createEventObject()).type=t,i.returnValue=!1,i.cancelBubble=!1,i.detail=e),i},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||p.document,!!(p.HTMLElement&&t instanceof p.HTMLElement)||!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},createElement:function(t,e){var n=null,i=null,n=(e=e||p.document).createDocumentFragment();for((i=e.createElement("div")).innerHTML=t.trim();i.firstChild;)n.appendChild(i.firstChild);return n},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){if("object"===_typeof(t)&&t&&"object"===_typeof(e)&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e,n,i=t.slice(),o=i.length,r=o;r--;)e=~~(Math.random()*o),n=i[r],i[r]=i[e],i[e]=n;return i},arrayFromList:function(e){var n,i;try{return Array.prototype.slice.call(e)}catch(t){for(n=[],i=0;i<e.length;i++)n.push(e[i]);return n}},debounce:function(o,r,s){var a;return function(){var t=this,e=arguments,n=s&&!a,i=function(){a=null,s||o.apply(t,e)};clearTimeout(a),a=setTimeout(i,r),n&&o.apply(t,e)}},position:function(t){for(var e=0,n=0,i=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===i&&(e+=t.offsetLeft,n+=t.offsetTop,i=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=(n=t.x-e.x)<0?-1*n:n,t=(t=t.y-e.y)<0?-1*t:t;return Math.sqrt(Math.pow(n,2)+Math.pow(t,2))},getIntersectionRatio:function(t,e){var n=t.width*t.height,i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left));return Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/n},closestParent:function(t,e,n,i){var o=t.parentNode;if(i=i||p.document,n&&t.matches(e))return t;for(;o&&o!=i.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,n){var i=[],o="";return n=n||p.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),i=n.querySelectorAll("#"+t.id+" > "+e),o)&&t.removeAttribute("id"),i},clean:function(t){for(var e=[],n=-1,n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(t){var e=null,n=null,i=null,n=new this.Deferred;return f.features.has.promises?n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}):(i=p.jQuery||t.$)&&"function"==typeof i.Deferred?(e=i.Deferred(),n.promise=e.promise(),n.resolve=e.resolve,n.reject=e.reject):p.console&&console.warn(f.messages.warningNoPromiseImplementation()),n},all:function(t,e){var n=null;return f.features.has.promises?Promise.all(t):(n=p.jQuery||e.$)&&"function"==typeof n.when?n.when.apply(n,t).done(function(){return arguments}):(p.console&&console.warn(f.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,n){var i=-1,o="";if(h.dashCase(e)in t.style)return"";for(i=0;o=n[i];i++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"===_typeof(t.body)?t:p.document,{scrollTop:p.pageYOffset,scrollLeft:p.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){return!!t.offsetParent||"fixed"===(t=p.getComputedStyle(t)).position&&"hidden"!==t.visibility&&"0"!==t.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){for(var n,i,o=t.split("."),r=e.split("."),s=-1,s=0;s<o.length;s++){if(n=parseInt(o[s].replace(/[^\d.]/g,"")),(i=parseInt(r[s].replace(/[^\d.]/g,"")||0))<n)return!1;if(n<i)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=h.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var i="";return(i+=t.block).length&&(i+=t.delineatorElement),i+=t["element"+this.pascalCase(e)],n&&(i.length&&(i+=t.delineatorModifier),i+=n),i},getProperty:function(t,e){var n,i=e.split("."),o="",r=0;if(!e)return t;for(n=function(t){return t?t[o]:null};r<i.length;)o=i[r],t=n(t),r++;return void 0!==t?t:null}},f.h=h,f.Base=function(){},f.Base.prototype={constructor:f.Base,callActions:function(t,e){var n=this.constructor.actions[t],i="";if(n&&!h.isEmptyObject(n))for(i in n)n[i].apply(this,e)},callFilters:function(t,e,n){var i=this.constructor.filters[t],o=e,r="";if(i&&!h.isEmptyObject(i))for(r in n=n||[],i)(n=h.arrayFromList(n)).unshift(o),o=i[r].apply(this,n);return o}},f.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){h.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},f.Features=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new f.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},f.BaseStatic.call(f.Features),f.Features.prototype=Object.create(f.Base.prototype),h.extend(f.Features.prototype,{constructor:f.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof p.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),h.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=h.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=h.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=h.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+h.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+h.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),f.Has=function(){this.transitions=!1,this.promises=!1,h.seal(this)},f.features=new f.Features,f.features.init(),f.ConfigAnimation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigAnimation),f.ConfigAnimation.prototype=Object.create(f.Base.prototype),f.ConfigAnimation.prototype.constructor=f.ConfigAnimation,f.ConfigBehavior=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigBehavior),f.ConfigBehavior.prototype=Object.create(f.Base.prototype),f.ConfigBehavior.prototype.constructor=f.ConfigBehavior,f.ConfigCallbacks=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigCallbacks),f.ConfigCallbacks.prototype=Object.create(f.Base.prototype),f.ConfigCallbacks.prototype.constructor=f.ConfigCallbacks,f.ConfigControls=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigControls),f.ConfigControls.prototype=Object.create(f.Base.prototype),f.ConfigControls.prototype.constructor=f.ConfigControls,f.ConfigClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigClassNames),f.ConfigClassNames.prototype=Object.create(f.Base.prototype),f.ConfigClassNames.prototype.constructor=f.ConfigClassNames,f.ConfigData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigData),f.ConfigData.prototype=Object.create(f.Base.prototype),f.ConfigData.prototype.constructor=f.ConfigData,f.ConfigDebug=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigDebug),f.ConfigDebug.prototype=Object.create(f.Base.prototype),f.ConfigDebug.prototype.constructor=f.ConfigDebug,f.ConfigLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLayout),f.ConfigLayout.prototype=Object.create(f.Base.prototype),f.ConfigLayout.prototype.constructor=f.ConfigLayout,f.ConfigLoad=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLoad),f.ConfigLoad.prototype=Object.create(f.Base.prototype),f.ConfigLoad.prototype.constructor=f.ConfigLoad,f.ConfigSelectors=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigSelectors),f.ConfigSelectors.prototype=Object.create(f.Base.prototype),f.ConfigSelectors.prototype.constructor=f.ConfigSelectors,f.ConfigRender=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigRender),f.ConfigRender.prototype=Object.create(f.Base.prototype),f.ConfigRender.prototype.constructor=f.ConfigRender,f.ConfigTemplates=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigTemplates),f.ConfigTemplates.prototype=Object.create(f.Base.prototype),f.ConfigTemplates.prototype.constructor=f.ConfigTemplates,f.Config=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.animation=new f.ConfigAnimation,this.behavior=new f.ConfigBehavior,this.callbacks=new f.ConfigCallbacks,this.controls=new f.ConfigControls,this.classNames=new f.ConfigClassNames,this.data=new f.ConfigData,this.debug=new f.ConfigDebug,this.layout=new f.ConfigLayout,this.load=new f.ConfigLoad,this.selectors=new f.ConfigSelectors,this.render=new f.ConfigRender,this.templates=new f.ConfigTemplates,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Config),f.Config.prototype=Object.create(f.Base.prototype),f.Config.prototype.constructor=f.Config,f.MixerDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.MixerDom),f.MixerDom.prototype=Object.create(f.Base.prototype),f.MixerDom.prototype.constructor=f.MixerDom,f.UiClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UiClassNames),f.UiClassNames.prototype=Object.create(f.Base.prototype),f.UiClassNames.prototype.constructor=f.UiClassNames,f.CommandDataset=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandDataset),f.CommandDataset.prototype=Object.create(f.Base.prototype),f.CommandDataset.prototype.constructor=f.CommandDataset,f.CommandMultimix=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandMultimix),f.CommandMultimix.prototype=Object.create(f.Base.prototype),f.CommandMultimix.prototype.constructor=f.CommandMultimix,f.CommandFilter=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandFilter),f.CommandFilter.prototype=Object.create(f.Base.prototype),f.CommandFilter.prototype.constructor=f.CommandFilter,f.CommandSort=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandSort),f.CommandSort.prototype=Object.create(f.Base.prototype),f.CommandSort.prototype.constructor=f.CommandSort,f.CommandInsert=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandInsert),f.CommandInsert.prototype=Object.create(f.Base.prototype),f.CommandInsert.prototype.constructor=f.CommandInsert,f.CommandRemove=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandRemove),f.CommandRemove.prototype=Object.create(f.Base.prototype),f.CommandRemove.prototype.constructor=f.CommandRemove,f.CommandChangeLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandChangeLayout),f.CommandChangeLayout.prototype=Object.create(f.Base.prototype),f.CommandChangeLayout.prototype.constructor=f.CommandChangeLayout,f.ControlDefinition=function(t,e,n,i){f.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=n||!1,this.parent=i||"",this.callActions("afterConstruct"),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.ControlDefinition),f.ControlDefinition.prototype=Object.create(f.Base.prototype),f.ControlDefinition.prototype.constructor=f.ControlDefinition,f.controlDefinitions=[],f.controlDefinitions.push(new f.ControlDefinition("multimix","[data-filter][data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("filter","[data-filter]")),f.controlDefinitions.push(new f.ControlDefinition("sort","[data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("toggle","[data-toggle]")),f.Control=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new f.UiClassNames,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Control),f.Control.prototype=Object.create(f.Base.prototype),h.extend(f.Control.prototype,{constructor:f.Control,init:function(t,e,n){var i=this;if(this.callActions("beforeInit",arguments),i.el=t,i.type=e,i.selector=n,i.selector)i.status="live";else switch(i.canDisable="boolean"==typeof i.el.disable,i.type){case"filter":i.filter=i.el.getAttribute("data-filter");break;case"toggle":i.filter=i.el.getAttribute("data-toggle");break;case"sort":i.sort=i.el.getAttribute("data-sort");break;case"multimix":i.filter=i.el.getAttribute("data-filter"),i.sort=i.el.getAttribute("data-sort")}i.bindClick(),f.controls.push(i),this.callActions("afterInit",arguments)},isBound:function(t){var e=!1;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this;this.callActions("beforeRemoveBinding",arguments),-1<(t=e.bound.indexOf(t))&&e.bound.splice(t,1),e.bound.length<1&&(e.unbindClick(),t=f.controls.indexOf(e),f.controls.splice(t,1),"active"===e.status)&&e.renderStatus(e.el,"inactive"),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},h.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),h.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e,n=this,i=null,o=null,r=!1,s={},a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=n.bound[0],i=n.selector?h.closestParent(t.target,o.config.selectors.control+n.selector,!0,o.dom.document):n.el){switch(n.type){case"filter":s.filter=n.filter||i.getAttribute("data-filter");break;case"sort":s.sort=n.sort||i.getAttribute("data-sort");break;case"multimix":s.filter=n.filter||i.getAttribute("data-filter"),s.sort=n.sort||i.getAttribute("data-sort");break;case"toggle":s.filter=n.filter||i.getAttribute("data-toggle"),r="live"===n.status?h.hasClass(i,n.classNames.active):"active"===n.status}for(l=0;l<n.bound.length;l++)e=new f.CommandMultimix,h.extend(e,s),a.push(e);for(a=n.callFilters("commandsHandleClick",a,arguments),n.pending=n.bound.length,l=0;o=n.bound[l];l++)(s=a[l])&&(o.lastClicked||(o.lastClicked=i),f.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===n.type?r?o.toggleOff(s.filter):o.toggleOn(s.filter):o.multimix(s)));this.callActions("afterHandleClick",arguments)}else n.callActions("afterHandleClick",arguments)},update:function(t,e){var n=this,i=new f.CommandMultimix;n.callActions("beforeUpdate",arguments),n.pending--,n.pending=Math.max(0,n.pending),0<n.pending||("live"===n.status?n.updateLive(t,e):(i.sort=n.sort,i.filter=n.filter,n.callFilters("actionsUpdate",i,arguments),n.parseStatusChange(n.el,t,i,e)),n.callActions("afterUpdate",arguments))},updateLive:function(t,e){var n,i=this,o=null,r=null,s=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(n=i.el.querySelectorAll(i.selector),s=0;r=n[s];s++){switch(o=new f.CommandMultimix,i.type){case"filter":o.filter=r.getAttribute("data-filter");break;case"sort":o.sort=r.getAttribute("data-sort");break;case"multimix":o.filter=r.getAttribute("data-filter"),o.sort=r.getAttribute("data-sort");break;case"toggle":o.filter=r.getAttribute("data-toggle")}o=i.callFilters("actionsUpdateLive",o,arguments),i.parseStatusChange(r,t,o,e)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,i){var o=this,r="",s=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(r=e.sort.replace(/:asc/g,"")),e.sort===n.sort||r===n.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(t,"inactive"),e.filter===n.filter&&o.renderStatus(t,"active"),s=0;s<i.length;s++){if(i[s]===n.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var n=this;switch(n.callActions("beforeRenderStatus",arguments),e){case"active":h.addClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"inactive":h.removeClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"disabled":n.canDisable&&(n.el.disabled=!0),h.addClass(t,n.classNames.disabled),h.removeClass(t,n.classNames.active)}"live"!==n.status&&(n.status=e),n.callActions("afterRenderStatus",arguments)}}),f.controls=[],f.StyleData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new f.TransformData,this.translateX=new f.TransformData,this.translateY=new f.TransformData,this.translateZ=new f.TransformData,this.rotateX=new f.TransformData,this.rotateY=new f.TransformData,this.rotateZ=new f.TransformData,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.StyleData),f.StyleData.prototype=Object.create(f.Base.prototype),f.StyleData.prototype.constructor=f.StyleData,f.TransformData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformData),f.TransformData.prototype=Object.create(f.Base.prototype),f.TransformData.prototype.constructor=f.TransformData,f.TransformDefaults=function(){f.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformDefaults),f.TransformDefaults.prototype=Object.create(f.StyleData.prototype),f.TransformDefaults.prototype.constructor=f.TransformDefaults,f.transformDefaults=new f.TransformDefaults,f.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},f.Events=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Events),f.Events.prototype=Object.create(f.Base.prototype),f.Events.prototype.constructor=f.Events,f.Events.prototype.fire=function(t,e,n,i){var o=new f.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');o.state=new f.State,h.extend(o.state,n.state),n.futureState&&(o.futureState=new f.State,h.extend(o.futureState,n.futureState)),o.instance=n.instance,n.originalEvent&&(o.originalEvent=n.originalEvent),n=h.getCustomEvent(t,o,i),this.callFilters("eventFire",n,arguments),e.dispatchEvent(n)},f.events=new f.Events,f.QueueItem=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.QueueItem),f.QueueItem.prototype=Object.create(f.Base.prototype),f.QueueItem.prototype.constructor=f.QueueItem,f.Mixer=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.config=new f.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new f.MixerDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Mixer),f.Mixer.prototype=Object.create(f.Base.prototype),h.extend(f.Mixer.prototype,{constructor:f.Mixer,attach:function(t,e,n,i){var o=this,r=null,s=-1;for(o.callActions("beforeAttach",arguments),o.id=n,i&&h.extend(o.config,i,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&h.addClass(o.dom.container,o.config.layout.containerClassName),f.features.has.transitions||(o.config.animation.enable=!1),void 0===p.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),s=0;r=o.lastOperation.toHide[s];s++)r.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new f.State,n=new f.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(f.messages.errorConfigDataUidKeyNotSet());n.startDataset=n.newDataset=e.activeDataset=t.config.load.dataset.slice(),n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,n.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(n.newSort=e.activeSort,t.sortOperation(n),t.printSort(!1,n),t.targets=n.newOrder):n.startOrder=n.newOrder=t.targets,n.startFilter=n.newFilter=e.activeFilter,n.startSort=n.newSort=e.activeSort,n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,"all"===n.newFilter.selector?n.newFilter.selector=t.config.selectors.target:"none"===n.newFilter.selector&&(n.newFilter.selector="");return n=t.callFilters("operationGetInitialState",n,[e]),(t.lastOperation=n).newFilter&&t.filterOperation(n),e=t.buildState(n)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e,n=this,i=null,o=-1;if(n.callActions("beforeIndexTargets",arguments),n.dom.targets=n.config.layout.allowNestedTargets?n.dom.container.querySelectorAll(n.config.selectors.target):h.children(n.dom.container,n.config.selectors.target,n.dom.document),n.dom.targets=h.arrayFromList(n.dom.targets),n.targets=[],(e=n.config.load.dataset)&&e.length!==n.dom.targets.length)throw new Error(f.messages.errorDatasetPrerenderedMismatch());if(n.dom.targets.length){for(o=0;t=n.dom.targets[o];o++)(i=new f.Target).init(t,n,e?e[o]:void 0),i.isInDom=!0,n.targets.push(i);n.dom.parent=n.dom.targets[0].parentElement===n.dom.container?n.dom.container:n.dom.targets[0].parentElement}n.origOrder=n.targets,n.callActions("afterIndexTargets",arguments)},initControls:function(){var t,e,n=this,i=null,o=null,r=null,s=null,a=-1,l=-1;switch(n.callActions("beforeInitControls",arguments),n.config.controls.scope){case"local":o=n.dom.container;break;case"global":o=n.dom.document;break;default:throw new Error(f.messages.errorConfigInvalidControlsScope())}for(a=0;t=f.controlDefinitions[a];a++)if(n.config.controls.live||t.live){if(t.parent){if(!(r=n.dom[t.parent])||r.length<0)continue;"number"!=typeof r.length&&(r=[r])}else r=[o];for(l=0;i=r[l];l++)s=n.getControl(i,t.type,t.selector),n.controls.push(s)}else for(e=o.querySelectorAll(n.config.selectors.control+t.selector),l=0;i=e[l];l++)(s=n.getControl(i,t.type,""))&&n.controls.push(s);n.callActions("afterInitControls",arguments)},getControl:function(t,e,n){var i=this,o=null,r=-1;if(i.callActions("beforeGetControl",arguments),!n)for(r=0;o=f.controls[r];r++){if(o.el===t&&o.isBound(i))return i.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===n)return o.addBinding(i),i.callFilters("controlGetControl",o,arguments)}return(o=new f.Control).init(t,e,n),o.classNames.base=h.getClassname(i.config.classNames,e),o.classNames.active=h.getClassname(i.config.classNames,e,i.config.classNames.modifierActive),o.classNames.disabled=h.getClassname(i.config.classNames,e,i.config.classNames.modifierDisabled),o.addBinding(i),i.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",n="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=h.clean(t.toggleArray),""===(n=t.toggleArray.join(e))&&(n=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",n,arguments)},buildToggleArray:function(t,e){var n=this,i="";if(n.callActions("beforeBuildToggleArray",arguments),t&&t.filter)i=t.filter.selector.replace(/\s/g,"");else{if(!e)return;i=e.activeFilter.selector.replace(/\s/g,"")}i!==n.config.selectors.target&&"all"!==i||(i=""),"or"===n.config.controls.toggleLogic?n.toggleArray=i.split(","):n.toggleArray=n.splitCompoundSelector(i),n.toggleArray=h.clean(n.toggleArray),n.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],i="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(i=""),i+=e[o],o%2!=0&&n.push(i);return n},updateControls:function(t){var e=this,n=null,i=new f.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?i.filter=t.filter.selector:i.filter=e.state.activeFilter.selector,t.sort?i.sort=e.buildSortString(t.sort):i.sort=e.buildSortString(e.state.activeSort),i.filter===e.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),h.freeze(i),o=0;n=e.controls[o];o++)n.update(i,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var n,i=this,o=-1,r=null,s=null,a=null,l=-1;if(i.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),n=i.getNextSibling(t.index,t.sibling,t.position),r=i.dom.document.createDocumentFragment(),o=n?h.index(n,i.config.selectors.target):i.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<i.dom.targets.indexOf(a))throw new Error(f.messages.errorInsertPreexistingElement());a.style.display="none",r.appendChild(a),r.appendChild(i.dom.document.createTextNode(" ")),h.isElement(a,i.dom.document)&&a.matches(i.config.selectors.target)&&((s=new f.Target).init(a,i),s.isInDom=!0,i.targets.splice(o,0,s),o++)}i.dom.parent.insertBefore(r,n)}e.startOrder=i.origOrder=i.targets,i.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var i=this,o=null;return t=Math.max(t,0),e&&"before"===n?o=e:e&&"after"===n?o=e.nextElementSibling||null:0<i.targets.length&&void 0!==t?o=t<i.targets.length||!i.targets.length?i.targets[t].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&0<i.dom.parent.children.length&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,n,i=!1,o=null,r=-1;for(this.callActions("beforeFilterOperation",arguments),n=t.newFilter.action,r=0;o=t.newOrder[r];r++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,o,n,t);if(t.toRemove.length)for(r=0;o=t.show[r];r++)-1<t.toRemove.indexOf(o)&&(t.show.splice(r,1),-1<(e=t.toShow.indexOf(o))&&t.toShow.splice(e,1),t.toHide.push(o),t.hide.push(o),r--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,i){var o=Array.prototype.slice.call(arguments,1),t=this.callFilters("testResultEvaluateHideShow",t,o);this.callActions("beforeEvaluateHideShow",arguments),!0===t&&"show"===n||!1===t&&"hide"===n?(i.show.push(e),e.isShown||i.toShow.push(e)):(i.hide.push(e),e.isShown&&i.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(n){var t,i=this,e=[],o=null,r=-1;if(i.callActions("beforeSortOperation",arguments),n.startOrder=i.targets,n.newSort.collection){for(e=[],r=0;t=n.newSort.collection[r];r++){if(i.dom.targets.indexOf(t)<0)throw new Error(f.messages.errorSortNonExistentElement());(o=new f.Target).init(t,i),o.isInDom=!0,e.push(o)}n.newOrder=e}else"random"===n.newSort.order?n.newOrder=h.arrayShuffle(n.startOrder):""===n.newSort.attribute?(n.newOrder=i.origOrder.slice(),"desc"===n.newSort.order&&n.newOrder.reverse()):(n.newOrder=n.startOrder.slice(),n.newOrder.sort(function(t,e){return i.compare(t,e,n.newSort)}));h.isEqualArray(n.newOrder,n.startOrder)&&(n.willSort=!1),i.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var i=n.order,o=this.getAttributeValue(t,n.attribute),r=this.getAttributeValue(e,n.attribute),r=isNaN(+o)||isNaN(+r)?(o=o.toLowerCase(),r.toLowerCase()):(o=+o,+r);return o<r?"asc"===i?-1:1:r<o?"asc"===i?1:-1:o===r&&n.next?this.compare(t,e,n.next):0},getAttributeValue:function(t,e){return null===(t=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(f.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",t||0,arguments)},printSort:function(t,e){var n=this,i=t?e.newOrder:e.startOrder,o=t?e.startOrder:e.newOrder,t=i.length?i[i.length-1].dom.el.nextElementSibling:null,r=p.document.createDocumentFragment(),s=null,a=null,l=-1;for(n.callActions("beforePrintSort",arguments),l=0;s=i[l];l++)"absolute"!==(a=s.dom.el).style.position&&(h.removeWhitespace(a.previousSibling),a.parentElement.removeChild(a));for((e=t?t.previousSibling:n.dom.parent.lastChild)&&"#text"===e.nodeName&&h.removeWhitespace(e),l=0;s=o[l];l++)a=s.dom.el,h.isElement(r.lastChild)&&r.appendChild(p.document.createTextNode(" ")),r.appendChild(a);n.dom.parent.firstChild&&n.dom.parent.firstChild!==t&&r.insertBefore(p.document.createTextNode(" "),r.childNodes[0]),t?(r.appendChild(p.document.createTextNode(" ")),n.dom.parent.insertBefore(r,t)):n.dom.parent.appendChild(r),n.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){for(var n,i=t.split(" "),o=e,r=-1,r=0;r<i.length;r++){switch(n=i[r].split(":"),o.sortString=i[r],o.attribute=h.dashCase(n[0]),o.order=n[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;r<i.length-1&&(o.next=new f.CommandSort,h.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",n=t.config.animation.effectsIn||t.config.animation.effects,i=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new f.StyleData,t.effectsOut=new f.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",n,t.effectsIn,t.transformIn),t.parseEffect("fade",i,t.effectsOut,t.transformOut,!0),f.transformDefaults)f.transformDefaults[e]instanceof f.TransformData&&(t.parseEffect(e,n,t.effectsIn,t.transformIn),t.parseEffect(e,i,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",n,t.effectsIn,t.transformIn),t.parseEffect("stagger",i,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,n,i,o){var r,s,a=this,l="",c=["%","px","em","rem","vh","vw","deg"],u=-1;if(a.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(f.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(a.staggerDuration=0);else{switch(-1<(r=e.indexOf(t+"("))&&(e=e.substring(r),l=/\(([^)]+)\)/.exec(e)[1]),t){case"fade":n.opacity=l?parseFloat(l):0;break;case"stagger":a.staggerDuration=l?parseFloat(l):100;break;default:if(o&&a.config.animation.reverseOut&&"scale"!==t?n[t].value=-1*(l?parseFloat(l):f.transformDefaults[t].value):n[t].value=l?parseFloat(l):f.transformDefaults[t].value,l){for(u=0;s=c[u];u++)if(-1<l.indexOf(s)){n[t].unit=s;break}}else n[t].unit=f.transformDefaults[t].unit;i.push(t+"("+n[t].value+n[t].unit+")")}a.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,n=new f.State,i=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;i=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.targets.push(i.dom.el);for(o=0;i=t.matching[o];o++)n.matching.push(i.dom.el);for(o=0;i=t.show[o];o++)n.show.push(i.dom.el);for(o=0;i=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.hide.push(i.dom.el);return n.id=e.id,n.container=e.dom.container,n.activeFilter=t.newFilter,n.activeSort=t.newSort,n.activeDataset=t.newDataset,n.activeContainerClassName=t.newContainerClassName,n.hasFailed=t.hasFailed,n.totalTargets=e.targets.length,n.totalShow=t.show.length,n.totalHide=t.hide.length,n.totalMatching=t.matching.length,n.triggerElement=t.triggerElement,e.callFilters("stateBuildState",n,arguments)},goMix:function(t,e){var n=this,i=null;return n.callActions("beforeGoMix",arguments),n.config.animation.duration&&n.config.animation.effects&&h.isVisible(n.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),f.events.fire("mixStart",n.dom.container,{state:e.startState,futureState:e.newState,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixStart&&n.config.callbacks.onMixStart.call(n.dom.container,e.startState,e.newState,n),h.removeClass(n.dom.container,h.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed)),i=n.userDeferred||(n.userDeferred=h.defer(f.libraries)),n.isBusy=!0,t&&f.features.has.transitions?(p.pageYOffset!==e.docState.scrollTop&&p.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),n.config.animation.applyPerspective&&(n.dom.parent.style[f.features.perspectiveProp]=n.config.animation.perspectiveDistance,n.dom.parent.style[f.features.perspectiveOriginProp]=n.config.animation.perspectiveOrigin),n.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),n.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(n.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){n.moveTargets(e)})):n.config.debug.fauxAsync?setTimeout(function(){n.cleanUp(e)},n.config.animation.duration):n.cleanUp(e),n.callFilters("promiseGoMix",i.promise,arguments)},getStartMixData:function(t){var e=this,n=p.getComputedStyle(e.dom.parent),i=e.dom.parent.getBoundingClientRect(),o=null,r={},s=-1,a=n[f.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),s=0;o=t.show[s];s++)r=o.getPosData(),t.showPosData[s]={startPosData:r};for(s=0;o=t.toHide[s];s++)r=o.getPosData(),t.toHidePosData[s]={startPosData:r};t.startX=i.left,t.startY=i.top,t.startHeight=e.incPadding?i.height:i.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.startWidth=e.incPadding?i.width:i.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),i=0;n=t.toShow[i];i++)n.show();t.willChangeLayout&&(h.removeClass(e.dom.container,t.startContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,n=-1;for(this.callActions("beforeGetInterMixData",arguments),n=0;e=t.show[n];n++)t.showPosData[n].interPosData=e.getPosData();for(n=0;e=t.toHide[n];n++)t.toHidePosData[n].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,n=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),n=0;e=t.toHide[n];n++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,n=this,i=null,o=null,r=-1;for(n.callActions("beforeGetFinalMixData",arguments),r=0;o=t.show[r];r++)t.showPosData[r].finalPosData=o.getPosData();for(r=0;o=t.toHide[r];r++)t.toHidePosData[r].finalPosData=o.getPosData();for((n.config.animation.clampHeight||n.config.animation.clampWidth)&&(n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=""),n.incPadding||(i=p.getComputedStyle(n.dom.parent)),e=n.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=n.incPadding?e.height:e.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.newWidth=n.incPadding?e.width:e.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&n.printSort(!0,t),r=0;o=t.toShow[r];r++)o.hide();for(r=0;o=t.toHide[r];r++)o.show();t.willChangeLayout&&(h.removeClass(n.dom.container,t.newContainerClassName),h.addClass(n.dom.container,n.config.layout.containerClassName)),n.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,n=null,i=null,o=Object.getOwnPropertyNames(e.effectsIn),r="",s=null,a=-1,l=-1,c=-1,u=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;n=t.show[c];c++)for((i=t.showPosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,n.isShown?(i.posIn.x=i.startPosData.x-i.interPosData.x,i.posIn.y=i.startPosData.y-i.interPosData.y):i.posIn.x=i.posIn.y=0,i.posOut.x=i.finalPosData.x-i.interPosData.x,i.posOut.y=i.finalPosData.y-i.interPosData.y,i.posIn.opacity=n.isShown?1:e.effectsIn.opacity,i.posOut.opacity=1,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,n.isShown||e.config.animation.nudge||(i.posIn.x=i.posOut.x,i.posIn.y=i.posOut.y),i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=(i.startPosData.width||i.finalPosData.width)-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=(i.startPosData.height||i.finalPosData.height)-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l,i.posOut.width=i.finalPosData.width,i.posOut.height=i.finalPosData.height,a=(i.finalPosData.width||i.startPosData.width)-i.interPosData.width,i.posOut.marginRight=i.finalPosData.marginRight-a,l=(i.finalPosData.height||i.startPosData.height)-i.interPosData.height,i.posOut.marginBottom=i.finalPosData.marginBottom-l,i.tweenData.width=i.posOut.width-i.posIn.width,i.tweenData.height=i.posOut.height-i.posIn.height,i.tweenData.marginRight=i.posOut.marginRight-i.posIn.marginRight,i.tweenData.marginBottom=i.posOut.marginBottom-i.posIn.marginBottom),u=0;r=o[u];u++)(s=e.effectsIn[r])instanceof f.TransformData&&s.value&&(i.posIn[r].value=s.value,i.posOut[r].value=0,i.tweenData[r].value=i.posOut[r].value-i.posIn[r].value,i.posIn[r].unit=i.posOut[r].unit=i.tweenData[r].unit=s.unit);for(c=0;n=t.toHide[c];c++)for((i=t.toHidePosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,i.posIn.x=n.isShown?i.startPosData.x-i.interPosData.x:0,i.posIn.y=n.isShown?i.startPosData.y-i.interPosData.y:0,i.posOut.x=e.config.animation.nudge?0:i.posIn.x,i.posOut.y=e.config.animation.nudge?0:i.posIn.y,i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=i.startPosData.width-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=i.startPosData.height-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l),i.posIn.opacity=1,i.posOut.opacity=e.effectsOut.opacity,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,u=0;r=o[u];u++)(s=e.effectsOut[r])instanceof f.TransformData&&s.value&&(i.posIn[r].value=0,i.posOut[r].value=s.value,i.tweenData[r].value=i.posOut[r].value-i.posIn[r].value,i.posIn[r].unit=i.posOut[r].unit=i.tweenData[r].unit=s.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,n=null,i=null,o=null,r="",s=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;n=t.show[l];l++)i=new f.IMoveData,o=t.showPosData[l],r=n.isShown?"none":"show",(s=e.willTransition(r,t.hasEffect,o.posIn,o.posOut))&&a++,n.show(),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=r,i.staggerIndex=a,i.operation=t,i.callback=s?c:null,n.move(i);for(l=0;n=t.toHide[l];l++)o=t.toHidePosData[l],i=new f.IMoveData,s=e.willTransition(r="hide",o.posIn,o.posOut),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=r,i.staggerIndex=l,i.operation=t,i.callback=s?c:null,n.move(i);e.config.animation.animateResizeContainer&&(e.dom.parent.style[f.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(h.removeClass(e.dom.container,e.config.layout.ContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t,e=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],n=!1,i=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(i=0;t=e[i];i++)if(t=this.effectsIn[t],0!==(_typeof(t)&&"undefined"!==t.value?t.value:t)){n=!0;break}return this.callFilters("resultHasEffect",n,arguments)},willTransition:function(t,e,n,i){var o=!1,o=!(!h.isVisible(this.dom.container)||!("none"!==t&&e||n.x!==i.x||n.y!==i.y)&&(!this.config.animation.animateResizeTargets||n.width===i.width&&n.height===i.height&&n.marginRight===i.marginRight&&n.marginTop===i.marginTop));return this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e,n,i=this,o=null,r=null,s=-1;for(i.callActions("beforeCleanUp",arguments),s=i.targetsMoved=i.targetsImmovable=i.targetsBound=i.targetsDone=0;o=t.show[s];s++)o.cleanUp(),o.show();for(s=0;o=t.toHide[s];s++)o.cleanUp(),o.hide();if(t.willSort&&i.printSort(!1,t),i.dom.parent.style[f.features.transitionProp]=i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=i.dom.parent.style[f.features.perspectiveProp]=i.dom.parent.style[f.features.perspectiveOriginProp]="",t.willChangeLayout&&(h.removeClass(i.dom.container,t.startContainerClassName),h.addClass(i.dom.container,t.newContainerClassName)),t.toRemove.length){for(s=0;o=i.targets[s];s++)-1<t.toRemove.indexOf(o)&&((e=o.dom.el.previousSibling)&&"#text"===e.nodeName&&(r=o.dom.el.nextSibling)&&"#text"===r.nodeName&&h.removeWhitespace(e),t.willSort||i.dom.parent.removeChild(o.dom.el),i.targets.splice(s,1),o.isInDom=!1,s--);i.origOrder=i.targets}t.willSort&&(i.targets=t.newOrder),i.state=t.newState,i.lastOperation=t,i.dom.targets=i.state.targets,f.events.fire("mixEnd",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixEnd&&i.config.callbacks.onMixEnd.call(i.dom.container,i.state,i),t.hasFailed&&(f.events.fire("mixFail",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixFail&&i.config.callbacks.onMixFail.call(i.dom.container,i.state,i),h.addClass(i.dom.container,h.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed))),"function"==typeof i.userCallback&&i.userCallback.call(i.dom.container,i.state,i),"function"==typeof i.userDeferred.resolve&&i.userDeferred.resolve(i.state),i.userCallback=null,i.userDeferred=null,i.lastClicked=null,i.isToggling=!1,i.isBusy=!1,i.queue.length&&(i.callActions("beforeReadQueueCleanUp",arguments),n=i.queue.shift(),i.userDeferred=n.deferred,i.isToggling=n.isToggling,i.lastClicked=n.triggerElement,(n.instruction.command instanceof f.CommandMultimix?i.multimix:i.dataset).apply(i,n.args)),i.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e,n=this,i=new f.UserInstruction,o=-1;for(i.animate=n.config.animation.enable,i.command=new f.CommandMultimix,o=0;o<t.length;o++)null!==(e=t[o])&&("object"===_typeof(e)?h.extend(i.command,e):"boolean"==typeof e?i.animate=e:"function"==typeof e&&(i.callback=e));return!i.command.insert||i.command.insert instanceof f.CommandInsert||(i.command.insert=n.parseInsertArgs([i.command.insert]).command),!i.command.remove||i.command.remove instanceof f.CommandRemove||(i.command.remove=n.parseRemoveArgs([i.command.remove]).command),!i.command.filter||i.command.filter instanceof f.CommandFilter||(i.command.filter=n.parseFilterArgs([i.command.filter]).command),!i.command.sort||i.command.sort instanceof f.CommandSort||(i.command.sort=n.parseSortArgs([i.command.sort]).command),!i.command.changeLayout||i.command.changeLayout instanceof f.CommandChangeLayout||(i.command.changeLayout=n.parseChangeLayoutArgs([i.command.changeLayout]).command),i=n.callFilters("instructionParseMultimixArgs",i,arguments),h.freeze(i),i},parseFilterArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandFilter,i=0;i<t.length;i++)"string"==typeof(e=t[i])?n.command.selector=e:null===e?n.command.collection=[]:"object"===_typeof(e)&&h.isElement(e,this.dom.document)?n.command.collection=[e]:"object"===_typeof(e)&&void 0!==e.length?n.command.collection=h.arrayFromList(e):"object"===_typeof(e)?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e);if(n.command.selector&&n.command.collection)throw new Error(f.messages.errorFilterInvalidArguments());return n=this.callFilters("instructionParseFilterArgs",n,arguments),h.freeze(n),n},parseSortArgs:function(t){var e,n=new f.UserInstruction,i="",o=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandSort,o=0;o<t.length;o++)if(null!==(e=t[o]))switch(_typeof(e)){case"string":i=e;break;case"object":e.length&&(n.command.collection=h.arrayFromList(e));break;case"boolean":n.animate=e;break;case"function":n.callback=e}return i&&(n.command=this.parseSortString(i,n.command)),n=this.callFilters("instructionParseSortArgs",n,arguments),h.freeze(n),n},parseInsertArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandInsert,i=0;i<t.length;i++)null!==(e=t[i])&&("number"==typeof e?n.command.index=e:"string"==typeof e&&-1<["before","after"].indexOf(e)?n.command.position=e:"string"==typeof e?n.command.collection=h.arrayFromList(h.createElement(e).childNodes):"object"===_typeof(e)&&h.isElement(e,this.dom.document)?n.command.collection.length?n.command.sibling=e:n.command.collection=[e]:"object"===_typeof(e)&&e.length?n.command.collection.length?n.command.sibling=e[0]:n.command.collection=e:"object"===_typeof(e)&&e.childNodes&&e.childNodes.length?n.command.collection.length?n.command.sibling=e.childNodes[0]:n.command.collection=h.arrayFromList(e.childNodes):"object"===_typeof(e)?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e));if(n.command.index&&n.command.sibling)throw new Error(f.messages.errorInsertInvalidArguments());return!n.command.collection.length&&this.config.debug.showWarnings&&console.warn(f.messages.warningInsertNoElements()),n=this.callFilters("instructionParseInsertArgs",n,arguments),h.freeze(n),n},parseRemoveArgs:function(t){var e,n,i=this,o=new f.UserInstruction,r=-1;for(o.animate=i.config.animation.enable,o.command=new f.CommandRemove,r=0;r<t.length;r++)if(null!==(n=t[r]))switch(_typeof(n)){case"number":i.targets[n]&&(o.command.targets[0]=i.targets[n]);break;case"string":o.command.collection=h.arrayFromList(i.dom.parent.querySelectorAll(n));break;case"object":n&&n.length?o.command.collection=n:h.isElement(n,i.dom.document)?o.command.collection=[n]:h.extend(o.command,n);break;case"boolean":o.animate=n;break;case"function":o.callback=n}if(o.command.collection.length)for(r=0;e=i.targets[r];r++)-1<o.command.collection.indexOf(e.dom.el)&&o.command.targets.push(e);return!o.command.targets.length&&i.config.debug.showWarnings&&console.warn(f.messages.warningRemoveNoElements()),h.freeze(o),o},parseDatasetArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandDataset,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(_typeof(e)){case"object":Array.isArray(e)||"number"==typeof e.length?n.command.dataset=e:h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},parseChangeLayoutArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandChangeLayout,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(_typeof(e)){case"string":n.command.containerClassName=e;break;case"object":h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},queueMix:function(t){var e,n=this,i=null;return n.callActions("beforeQueueMix",arguments),i=h.defer(f.libraries),n.config.animation.queue&&n.queue.length<n.config.animation.queueLimit?(t.deferred=i,n.queue.push(t),n.config.controls.enable&&(n.isToggling?(n.buildToggleArray(t.instruction.command),e=n.getToggleSelector(),n.updateControls({filter:{selector:e}})):n.updateControls(t.instruction.command))):(n.config.debug.showWarnings&&console.warn(f.messages.warningMultimixInstanceQueueFull()),i.resolve(n.state),f.events.fire("mixBusy",n.dom.container,{state:n.state,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixBusy&&n.config.callbacks.onMixBusy.call(n.dom.container,n.state,n)),n.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,n=new f.Operation,i=[],n=e.callFilters("operationUnmappedGetDataOperation",n,arguments);if(e.dom.targets.length&&!(i=e.state.activeDataset||[]).length)throw new Error(f.messages.errorDatasetNotSet());return n.id=h.randomHex(),n.startState=e.state,n.startDataset=i,n.newDataset=t.slice(),e.diffDatasets(n),n.startOrder=e.targets,n.newOrder=n.show,e.config.animation.enable&&(e.getStartMixData(n),e.setInter(n),n.docState=h.getDocumentState(e.dom.document),e.getInterMixData(n),e.setFinal(n),e.getFinalMixData(n),e.parseEffects(),n.hasEffect=e.hasEffect(),e.getTweenData(n)),e.targets=n.show.slice(),n.newState=e.buildState(n),Array.prototype.push.apply(e.targets,n.toRemove),n=e.callFilters("operationMappedGetDataOperation",n,arguments)},diffDatasets:function(t){var e=this,n=[],i=[],o=[],r=null,s=null,a=null,l=null,c=null,u={},d="",p=-1;for(e.callActions("beforeDiffDatasets",arguments),p=0;r=t.newDataset[p];p++){if(void 0===(d=r[e.config.data.uidKey])||d.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(u[d])throw new Error(f.messages.errorDatasetDuplicateUid({uid:d}));u[d]=!0,(s=e.cache[d])instanceof f.Target?(e.config.data.dirtyCheck&&!h.deepEquals(r,s.data)&&(a=s.render(r),s.data=r,a!==s.dom.el)&&(s.isInDom&&(s.unbindEvents(),e.dom.parent.replaceChild(a,s.dom.el)),s.isShown||(a.style.display="none"),s.dom.el=a,s.isInDom)&&s.bindEvents(),a=s.dom.el):((s=new f.Target).init(null,e,r),s.hide()),s.isInDom?(c=s.dom.el.nextElementSibling,i.push(d),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,s.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(s.dom.el),s.isInDom=!0,s.unbindEvents(),s.bindEvents(),s.hide(),t.toShow.push(s),o.push(s)),t.show.push(s)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),p=0;r=t.startDataset[p];p++)d=r[e.config.data.uidKey],s=e.cache[d],t.show.indexOf(s)<0?(t.hide.push(s),t.toHide.push(s),t.toRemove.push(s)):n.push(d);h.isEqualArray(n,i)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var i=e?h.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);n.length;)this.targets.splice(i,0,n.shift()),i++},willSort:function(t,e){var n=!1,n=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next);return this.callFilters("resultWillSort",n,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector;return t.isToggling=!0,t.toggleArray.indexOf(n)<0&&t.toggleArray.push(n),n=t.getToggleSelector(),t.multimix({filter:n},e.animate,e.callback)},toggleOff:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector,n=t.toggleArray.indexOf(n);return t.isToggling=!0,-1<n&&t.toggleArray.splice(n,1),n=t.getToggleSelector(),t.multimix({filter:n},e.animate,e.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),n=null;return t.callActions("beforeDataset",arguments),t.isBusy?((n=new f.QueueItem).args=arguments,n.instruction=e,t.queueMix(n)):(e.callback&&(t.userCallback=e.callback),n=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,e=t.getDataOperation(e.command.dataset),t.goMix(n,e))},multimix:function(){var t=this,e=null,n=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((e=new f.QueueItem).args=arguments,e.instruction=n,e.triggerElement=t.lastClicked,e.isToggling=t.isToggling,t.queueMix(e)):(e=t.getOperation(n.command),t.config.controls.enable&&(n.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1)&&t.updateControls(e.command),n.callback&&(t.userCallback=n.callback),n=n.animate^t.config.animation.enable?n.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(n,e))},getOperation:function(t){var e=this,n=t.sort,i=t.filter,o=t.changeLayout,r=t.remove,s=t.insert,a=new f.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=h.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(f.messages.warningGetOperationInstanceBusy()),null):(s&&e.insertTargets(s,a),r&&(a.toRemove=r.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,n&&(a.startSort=a.startState.activeSort,a.newSort=n,a.willSort=e.willSort(n,a.startState.activeSort),a.willSort)&&e.sortOperation(a),a.startFilter=a.startState.activeFilter,a.newFilter=i||h.extend(new f.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=h.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var n,i=null,o=null,r=-1;for(e=Math.min(e,1),e=Math.max(e,0),r=0;i=t.show[r];r++)o=t.showPosData[r],i.applyTween(o,e);for(r=0;i=t.hide[r];r++)i.isShown&&i.hide(),-1<(n=t.toHide.indexOf(i))&&(o=t.toHidePosData[n],i.isShown||i.show(),i.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null,e=t?h.getProperty(this.config,t):this.config;return this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),h.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t=new f.State;return h.extend(t,this.state),h.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,i="";for(i in t.cache)(n=(e=t.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom)&&e.bindEvents();t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,n=null,i=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;n=e.controls[o];o++)n.removeBinding(e);for(o=0;i=e.targets[o];o++)t&&i.show(),i.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete f.instances[e.id],e.callActions("afterDestroy",arguments)}}),f.IMoveData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.IMoveData),f.IMoveData.prototype=Object.create(f.Base.prototype),f.IMoveData.prototype.constructor=f.IMoveData,f.TargetDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TargetDom),f.TargetDom.prototype=Object.create(f.Base.prototype),f.TargetDom.prototype.constructor=f.TargetDom,f.Target=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new f.TargetDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Target),f.Target.prototype=Object.create(f.Base.prototype),h.extend(f.Target.prototype,{constructor:f.Target,init:function(t,e,n){var i=this,o="";if(i.callActions("beforeInit",arguments),i.mixer=e,t=t||i.render(n),i.cacheDom(t),i.bindEvents(),"none"!==i.dom.el.style.display&&(i.isShown=!0),n&&e.config.data.uidKey){if(void 0===(o=n[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));i.id=o,i.data=n,e.cache[o]=i}i.callActions("afterInit",arguments)},render:function(t){var e=null,n=null,i=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(e=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(f.messages.errorDatasetRendererNotSet());return(e=e(t))&&"object"===_typeof(e)&&h.isElement(e)?n=e:"string"==typeof e&&((i=document.createElement("div")).innerHTML=e,n=i.firstElementChild),this.callFilters("elRender",n,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){t=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),t=isNaN(+t)?t.toLowerCase():+t,this.sortString=t,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var n,i,o=this,r=t.posIn,s=[],a=new f.StyleData,l=-1;for(o.callActions("beforeApplyTween",arguments),a.x=r.x,a.y=r.y,0===e?o.hide():o.isShown||o.show(),l=0;n=f.features.TWEENABLE[l];l++)i=t.tweenData[n],"x"===n?i&&(a.x=r.x+i*e):"y"===n?i&&(a.y=r.y+i*e):i instanceof f.TransformData?i.value&&(a[n].value=r[n].value+i.value*e,a[n].unit=i.unit,s.push(n+"("+a[n].value+i.unit+")")):i&&(a[n]=r[n]+i*e,o.dom.el.style[n]=a[n]);(a.x||a.y)&&s.unshift("translate("+a.x+"px, "+a.y+"px)"),s.length&&(o.dom.el.style[f.features.transformProp]=s.join(" ")),o.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,n=t.posIn,i=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+n.x+"px, "+n.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=n.width+"px",e.dom.el.style.height=n.height+"px"),e.dom.el.style.marginRight=n.marginRight+"px",e.dom.el.style.marginBottom=n.marginBottom+"px"),i&&(e.dom.el.style.opacity=n.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[f.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,n=[],i=[],o=e.mixer.config.animation.animateResizeTargets,r=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),n.push(e.writeTransitionRule(f.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&n.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(n.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),t.callback){switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(n),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":r&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),i=i.concat(e.mixer.transformOut);break;case"show":r&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[f.features.transformProp]=i.join(" "),e.callActions("afterApplyStylesOut",arguments)}else e.mixer.targetsImmovable++,e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation)},writeTransitionRule:function(t,e,n){e=this.getDelay(e),n=t+" "+(0<n?n:this.mixer.config.animation.duration)+"ms "+e+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing);return this.callFilters("ruleWriteTransitionRule",n,arguments)},getDelay:function(t){var e=this;return"function"==typeof e.mixer.config.animation.staggerSequence&&(t=e.mixer.config.animation.staggerSequence.call(e,t,e.state)),t=e.mixer.staggerDuration?t*e.mixer.staggerDuration:0,e.callFilters("delayGetDelay",t,arguments)},applyTransition:function(t){t=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[f.features.transitionProp]=t,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,i=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<n.indexOf("transform")||-1<n.indexOf("opacity")||i&&-1<n.indexOf("height")||i&&-1<n.indexOf("width")||i&&-1<n.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),h.off(t.dom.el,"webkitTransitionEnd",t.handler),h.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===f.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},h.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,n=new f.StyleData;return e.callActions("beforeGetPosData",arguments),n.x=e.dom.el.offsetLeft,n.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(t=e.dom.el.getBoundingClientRect(),n.top=t.top,n.right=t.right,n.bottom=t.bottom,n.left=t.left,n.width=t.width,n.height=t.height),e.mixer.config.animation.animateResizeTargets&&(t=p.getComputedStyle(e.dom.el),n.marginBottom=parseFloat(t.marginBottom),n.marginRight=parseFloat(t.marginRight)),e.callFilters("posDataGetPosData",n,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[f.features.transformProp]="",t.dom.el.style[f.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),f.Collection=function(t){var e,n=-1;for(this.callActions("beforeConstruct"),n=0;e=t[n];n++)this[n]=e;this.length=t.length,this.callActions("afterConstruct"),h.freeze(this)},f.BaseStatic.call(f.Collection),f.Collection.prototype=Object.create(f.Base.prototype),h.extend(f.Collection.prototype,{constructor:f.Collection,mixitup:function(t){var e=null,n=Array.prototype.slice.call(arguments),i=[],o=-1;for(this.callActions("beforeMixitup"),n.shift(),o=0;e=this[o];o++)i.push(e[t].apply(e,n));return this.callFilters("promiseMixitup",h.all(i,f.libraries),arguments)}}),f.Operation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Operation),f.Operation.prototype=Object.create(f.Base.prototype),f.Operation.prototype.constructor=f.Operation,f.State=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.State),f.State.prototype=Object.create(f.Base.prototype),f.State.prototype.constructor=f.State,f.UserInstruction=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UserInstruction),f.UserInstruction.prototype=Object.create(f.Base.prototype),f.UserInstruction.prototype.constructor=f.UserInstruction,f.Messages=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),h.seal(this)},f.BaseStatic.call(f.Messages),f.Messages.prototype=Object.create(f.Base.prototype),f.Messages.prototype.constructor=f.Messages,f.Messages.prototype.compileTemplates=function(){var t,e="";for(e in this)"string"==typeof(t=this[e])&&(this[h.camelCase(e)]=h.template(t))},f.messages=new f.Messages,f.Facade=function(t){f.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.Facade),f.Facade.prototype=Object.create(f.Base.prototype),f.Facade.prototype.constructor=f.Facade,"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"object"===("undefined"==typeof module?"undefined":_typeof(module))?module.exports=f:"function"==typeof define&&define.amd?define(function(){return f}):void 0!==p.mixitup&&"function"==typeof p.mixitup||(p.mixitup=f),f.BaseStatic.call(f.constructor),f.NAME="mixitup",f.CORE_VERSION="3.3.1"}(window),$(".home-slider__slider").slick({dots:!0,arrows:!1,fade:!0,autoplay:!0}),document.querySelector(".gallery__inner")&&(filter=mixitup(".gallery__inner",{load:{filter:".bedroom-furniture"}})),$(".header__btn").on("click",function(){$(".rightside-menu").removeClass("rightside-menu--close")}),$(".rightside-menu__close").on("click",function(){$(".rightside-menu").addClass("rightside-menu--close")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,