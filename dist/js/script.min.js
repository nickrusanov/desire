"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var filter;!function(t,e){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=t.document?e(t,!0):function(t){if(t.document)return e(t);throw new Error("jQuery requires a window with a document")}:e(t)}("undefined"!=typeof window?window:void 0,function(x,F){function v(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item}function g(t){return null!=t&&t===t.window}var e=[],L=Object.getPrototypeOf,a=e.slice,j=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},B=e.push,H=e.indexOf,_={},q=_.toString,z=_.hasOwnProperty,W=z.toString,U=W.call(Object),m={},C=x.document,X={type:!0,src:!0,nonce:!0,noModule:!0};function Y(t,e,n){var i,o,s=(n=n||C).createElement("script");if(s.text=t,e)for(i in X)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&s.setAttribute(i,o);n.head.appendChild(s).parentNode.removeChild(s)}function h(t){return null==t?t+"":"object"===_typeof(t)||"function"==typeof t?_[q.call(t)]||"object":_typeof(t)}var t="3.6.1",S=function t(e,n){return new t.fn.init(e,n)};function G(t){var e=!!t&&"length"in t&&t.length,n=h(t);return!v(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}S.fn=S.prototype={jquery:t,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){t=S.merge(this.constructor(),t);return t.prevObject=this,t},each:function(t){return S.each(this,t)},map:function(n){return this.pushStack(S.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,t=+t+(t<0?e:0);return this.pushStack(0<=t&&t<e?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:B,sort:e.sort,splice:e.splice},S.extend=S.fn.extend=function(){var t,e,n,i,o,s=arguments[0]||{},r=1,a=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[r]||{},r++),"object"===_typeof(s)||v(s)||(s={}),r===a&&(s=this,r--);r<a;r++)if(null!=(t=arguments[r]))for(e in t)n=t[e],"__proto__"!==e&&s!==n&&(l&&n&&(S.isPlainObject(n)||(i=Array.isArray(n)))?(o=s[e],o=i&&!Array.isArray(o)?[]:i||S.isPlainObject(o)?o:{},i=!1,s[e]=S.extend(l,o,n)):void 0!==n&&(s[e]=n));return s},S.extend({expando:"jQuery"+(t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){return!(!t||"[object Object]"!==q.call(t)||(t=L(t))&&("function"!=typeof(t=z.call(t,"constructor")&&t.constructor)||W.call(t)!==U))},isEmptyObject:function(t){for(var e in t)return!1;return!0},globalEval:function(t,e,n){Y(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(G(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){e=e||[];return null!=t&&(G(Object(t))?S.merge(e,"string"==typeof t?[t]:t):B.call(e,t)),e},inArray:function(t,e,n){return null==e?-1:H.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,s=t.length,r=!n;o<s;o++)!e(t[o],o)!=r&&i.push(t[o]);return i},map:function(t,e,n){var i,o,s=0,r=[];if(G(t))for(i=t.length;s<i;s++)null!=(o=e(t[s],s,n))&&r.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&r.push(o);return j(r)},guid:1,support:m}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=e[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){_["[object "+e+"]"]=e.toLowerCase()});function i(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&S(t).is(n))break;i.push(t)}return i}function V(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}var t=function(F){function u(t,e){return t="0x"+t.slice(1)-65536,e||(t<0?String.fromCharCode(65536+t):String.fromCharCode(t>>10|55296,1023&t|56320))}function L(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}function j(){C()}var t,p,w,s,B,f,H,_,x,l,c,C,S,n,T,h,i,o,g,A="sizzle"+ +new Date,d=F.document,k=0,q=0,z=O(),W=O(),U=O(),m=O(),X=function(t,e){return t===e&&(c=!0),0},Y={}.hasOwnProperty,e=[],G=e.pop,V=e.push,E=e.push,K=e.slice,v=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",r="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+r+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Z="\\["+r+"*("+a+")(?:"+r+"*([*^$|!~]?=)"+r+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+r+"*\\]",J=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Z+")*)|.*)\\)|)",tt=new RegExp(r+"+","g"),y=new RegExp("^"+r+"+|((?:^|[^\\\\])(?:\\\\.)*)"+r+"+$","g"),et=new RegExp("^"+r+"*,"+r+"*"),nt=new RegExp("^"+r+"*([>+~]|"+r+")"+r+"*"),it=new RegExp(r+"|>"),ot=new RegExp(J),st=new RegExp("^"+a+"$"),b={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+Z),PSEUDO:new RegExp("^"+J),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+r+"*(even|odd|(([+-]|)(\\d*)n|)"+r+"*(?:([+-]|)"+r+"*(\\d+)|))"+r+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+r+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+r+"*((?:-\\d)?\\d*)"+r+"*\\)|)(?=[^-]|$)","i")},rt=/HTML$/i,at=/^(?:input|select|textarea|button)$/i,lt=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,ct=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,dt=/[+~]/,D=new RegExp("\\\\[\\da-fA-F]{1,6}"+r+"?|\\\\([^\\r\\n\\f])","g"),ut=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,pt=vt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{E.apply(e=K.call(d.childNodes),d.childNodes),e[d.childNodes.length].nodeType}catch(t){E={apply:e.length?function(t,e){V.apply(t,K.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function P(e,t,n,i){var o,s,r,a,l,c,d=t&&t.ownerDocument,u=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==u&&9!==u&&11!==u)return n;if(!i&&(C(t),t=t||S,T)){if(11!==u&&(a=ct.exec(e)))if(o=a[1]){if(9===u){if(!(c=t.getElementById(o)))return n;if(c.id===o)return n.push(c),n}else if(d&&(c=d.getElementById(o))&&g(t,c)&&c.id===o)return n.push(c),n}else{if(a[2])return E.apply(n,t.getElementsByTagName(e)),n;if((o=a[3])&&p.getElementsByClassName&&t.getElementsByClassName)return E.apply(n,t.getElementsByClassName(o)),n}if(p.qsa&&!m[e+" "]&&(!h||!h.test(e))&&(1!==u||"object"!==t.nodeName.toLowerCase())){if(c=e,d=t,1===u&&(it.test(e)||nt.test(e))){for((d=dt.test(e)&&mt(t.parentNode)||t)===t&&p.scope||((r=t.getAttribute("id"))?r=r.replace(ut,L):t.setAttribute("id",r=A)),s=(l=f(e)).length;s--;)l[s]=(r?"#"+r:":scope")+" "+R(l[s]);c=l.join(",")}try{return E.apply(n,d.querySelectorAll(c)),n}catch(t){m(e,!0)}finally{r===A&&t.removeAttribute("id")}}}return _(e.replace(y,"$1"),t,n,i)}function O(){var n=[];function i(t,e){return n.push(t+" ")>w.cacheLength&&delete i[n.shift()],i[t+" "]=e}return i}function I(t){return t[A]=!0,t}function N(t){var e=S.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e)}}function ft(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function ht(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&pt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function M(r){return I(function(s){return s=+s,I(function(t,e){for(var n,i=r([],t.length,s),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in p=P.support={},B=P.isXML=function(t){var e=t&&t.namespaceURI,t=t&&(t.ownerDocument||t).documentElement;return!rt.test(e||t&&t.nodeName||"HTML")},C=P.setDocument=function(t){var t=t?t.ownerDocument||t:d;return t!=S&&9===t.nodeType&&t.documentElement&&(n=(S=t).documentElement,T=!B(S),d!=S&&(t=S.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",j,!1):t.attachEvent&&t.attachEvent("onunload",j)),p.scope=N(function(t){return n.appendChild(t).appendChild(S.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),p.attributes=N(function(t){return t.className="i",!t.getAttribute("className")}),p.getElementsByTagName=N(function(t){return t.appendChild(S.createComment("")),!t.getElementsByTagName("*").length}),p.getElementsByClassName=$.test(S.getElementsByClassName),p.getById=N(function(t){return n.appendChild(t).id=A,!S.getElementsByName||!S.getElementsByName(A).length}),p.getById?(w.filter.ID=function(t){var e=t.replace(D,u);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T)return(e=e.getElementById(t))?[e]:[]}):(w.filter.ID=function(t){var e=t.replace(D,u);return function(t){t=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return t&&t.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,i,o,s=e.getElementById(t);if(s){if((n=s.getAttributeNode("id"))&&n.value===t)return[s];for(o=e.getElementsByName(t),i=0;s=o[i++];)if((n=s.getAttributeNode("id"))&&n.value===t)return[s]}return[]}}),w.find.TAG=p.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):p.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;n=s[o++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=p.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},i=[],h=[],(p.qsa=$.test(S.querySelectorAll))&&(N(function(t){var e;n.appendChild(t).innerHTML="<a id='"+A+"'></a><select id='"+A+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+r+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||h.push("\\["+r+"*(?:value|"+Q+")"),t.querySelectorAll("[id~="+A+"-]").length||h.push("~="),(e=S.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||h.push("\\["+r+"*name"+r+"*="+r+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||h.push(":checked"),t.querySelectorAll("a#"+A+"+*").length||h.push(".#.+[+~]"),t.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),N(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=S.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&h.push("name"+r+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),h.push(",.*:")})),(p.matchesSelector=$.test(o=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&N(function(t){p.disconnectedMatch=o.call(t,"*"),o.call(t,"[s!='']:x"),i.push("!=",J)}),h=h.length&&new RegExp(h.join("|")),i=i.length&&new RegExp(i.join("|")),t=$.test(n.compareDocumentPosition),g=t||$.test(n.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,e=e&&e.parentNode;return t===e||!(!e||1!==e.nodeType||!(n.contains?n.contains(e):t.compareDocumentPosition&&16&t.compareDocumentPosition(e)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=t?function(t,e){var n;return t===e?(c=!0,0):(n=!t.compareDocumentPosition-!e.compareDocumentPosition)||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===n?t==S||t.ownerDocument==d&&g(d,t)?-1:e==S||e.ownerDocument==d&&g(d,e)?1:l?v(l,t)-v(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t==S?-1:e==S?1:o?-1:s?1:l?v(l,t)-v(l,e):0;if(o===s)return ht(t,e);for(n=t;n=n.parentNode;)r.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;r[i]===a[i];)i++;return i?ht(r[i],a[i]):r[i]==d?-1:a[i]==d?1:0}),S},P.matches=function(t,e){return P(t,null,null,e)},P.matchesSelector=function(t,e){if(C(t),p.matchesSelector&&T&&!m[e+" "]&&(!i||!i.test(e))&&(!h||!h.test(e)))try{var n=o.call(t,e);if(n||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){m(e,!0)}return 0<P(e,S,null,[t]).length},P.contains=function(t,e){return(t.ownerDocument||t)!=S&&C(t),g(t,e)},P.attr=function(t,e){(t.ownerDocument||t)!=S&&C(t);var n=w.attrHandle[e.toLowerCase()],n=n&&Y.call(w.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==n?n:p.attributes||!T?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},P.escape=function(t){return(t+"").replace(ut,L)},P.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},P.uniqueSort=function(t){var e,n=[],i=0,o=0;if(c=!p.detectDuplicates,l=!p.sortStable&&t.slice(0),t.sort(X),c){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return l=null,t},s=P.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=s(e);return n},(w=P.selectors={cacheLength:50,createPseudo:I,match:b,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(D,u),t[3]=(t[3]||t[4]||t[5]||"").replace(D,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||P.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&P.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return b.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ot.test(n)&&(e=(e=f(n,!0))&&n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(D,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=z[t+" "];return e||(e=new RegExp("(^|"+r+")"+t+"("+r+"|$)"))&&z(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(t){t=P.attr(t,e);return null==t?"!="===n:!n||(t+="","="===n?t===i:"!="===n?t!==i:"^="===n?i&&0===t.indexOf(i):"*="===n?i&&-1<t.indexOf(i):"$="===n?i&&t.slice(-i.length)===i:"~="===n?-1<(" "+t.replace(tt," ")+" ").indexOf(i):"|="===n&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,t,e,g,m){var y="nth"!==h.slice(0,3),v="last"!==h.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,o,s,r,a,l,c=y!=v?"nextSibling":"previousSibling",d=t.parentNode,u=b&&t.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(d){if(y){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[v?d.firstChild:d.lastChild],v&&p){for(f=(a=(i=(o=(s=(r=d)[A]||(r[A]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===k&&i[1])&&i[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(f=a=0,l.pop());)if(1===r.nodeType&&++f&&r===t){o[h]=[k,a,f];break}}else if(!1===(f=p?a=(i=(o=(s=(r=t)[A]||(r[A]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]||[])[0]===k&&i[1]:f))for(;(r=++a&&r&&r[c]||(f=a=0,l.pop()))&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++f||(p&&((o=(s=r[A]||(r[A]={}))[r.uniqueID]||(s[r.uniqueID]={}))[h]=[k,f]),r!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,s){var e,r=w.pseudos[t]||w.setFilters[t.toLowerCase()]||P.error("unsupported pseudo: "+t);return r[A]?r(s):1<r.length?(e=[t,t,"",s],w.setFilters.hasOwnProperty(t.toLowerCase())?I(function(t,e){for(var n,i=r(t,s),o=i.length;o--;)t[n=v(t,i[o])]=!(e[n]=i[o])}):function(t){return r(t,0,e)}):r}},pseudos:{not:I(function(t){var i=[],o=[],a=H(t.replace(y,"$1"));return a[A]?I(function(t,e,n,i){for(var o,s=a(t,null,i,[]),r=t.length;r--;)(o=s[r])&&(t[r]=!(e[r]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),i[0]=null,!o.pop()}}),has:I(function(e){return function(t){return 0<P(e,t).length}}),contains:I(function(e){return e=e.replace(D,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:I(function(n){return st.test(n||"")||P.error("unsupported lang: "+n),n=n.replace(D,u).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=F.location&&F.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===n},focus:function(t){return t===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return lt.test(t.nodeName)},input:function(t){return at.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(t=t.getAttribute("type"))||"text"===t.toLowerCase())},first:M(function(){return[0]}),last:M(function(t,e){return[e-1]}),eq:M(function(t,e,n){return[n<0?n+e:n]}),even:M(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:M(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:M(function(t,e,n){for(var i=n<0?n+e:e<n?e:n;0<=--i;)t.push(i);return t}),gt:M(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=function(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}(t);function yt(){}function R(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function vt(r,t,e){var a=t.dir,l=t.next,c=l||a,d=e&&"parentNode"===c,u=q++;return t.first?function(t,e,n){for(;t=t[a];)if(1===t.nodeType||d)return r(t,e,n);return!1}:function(t,e,n){var i,o,s=[k,u];if(n){for(;t=t[a];)if((1===t.nodeType||d)&&r(t,e,n))return!0}else for(;t=t[a];)if(1===t.nodeType||d)if(o=(o=t[A]||(t[A]={}))[t.uniqueID]||(o[t.uniqueID]={}),l&&l===t.nodeName.toLowerCase())t=t[a]||t;else{if((i=o[c])&&i[0]===k&&i[1]===u)return s[2]=i[2];if((o[c]=s)[2]=r(t,e,n))return!0}return!1}}function bt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function wt(t,e,n,i,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)!(s=t[a])||n&&!n(s,i,o)||(r.push(s),c&&e.push(a));return r}function xt(f,h,g,m,y,t){return m&&!m[A]&&(m=xt(m)),y&&!y[A]&&(y=xt(y,t)),I(function(t,e,n,i){var o,s,r,a=[],l=[],c=e.length,d=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)P(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),u=!f||!t&&h?d:wt(d,a,f,n,i),p=g?y||(t?f:c||m)?[]:e:u;if(g&&g(u,p,n,i),m)for(o=wt(p,l),m(o,[],n,i),s=o.length;s--;)(r=o[s])&&(p[l[s]]=!(u[l[s]]=r));if(t){if(y||f){if(y){for(o=[],s=p.length;s--;)(r=p[s])&&o.push(u[s]=r);y(null,p=[],o,i)}for(s=p.length;s--;)(r=p[s])&&-1<(o=y?v(t,r):a[s])&&(t[o]=!(e[o]=r))}}else p=wt(p===e?p.splice(c,p.length):p),y?y(null,e,p,i):E.apply(e,p)})}function Ct(m,y){function t(t,e,n,i,o){var s,r,a,l=0,c="0",d=t&&[],u=[],p=x,f=t||b&&w.find.TAG("*",o),h=k+=null==p?1:Math.random()||.1,g=f.length;for(o&&(x=e==S||e||o);c!==g&&null!=(s=f[c]);c++){if(b&&s){for(r=0,e||s.ownerDocument==S||(C(s),n=!T);a=m[r++];)if(a(s,e||S,n)){i.push(s);break}o&&(k=h)}v&&((s=!a&&s)&&l--,t)&&d.push(s)}if(l+=c,v&&c!==l){for(r=0;a=y[r++];)a(d,u,e,n);if(t){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=G.call(i));u=wt(u)}E.apply(i,u),o&&!t&&0<u.length&&1<l+y.length&&P.uniqueSort(i)}return o&&(k=h,x=p),d}var v=0<y.length,b=0<m.length;return v?I(t):t}return yt.prototype=w.filters=w.pseudos,w.setFilters=new yt,f=P.tokenize=function(t,e){var n,i,o,s,r,a,l,c=W[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=w.preFilter;r;){for(s in n&&!(i=et.exec(r))||(i&&(r=r.slice(i[0].length)||r),a.push(o=[])),n=!1,(i=nt.exec(r))&&(n=i.shift(),o.push({value:n,type:i[0].replace(y," ")}),r=r.slice(n.length)),w.filter)!(i=b[s].exec(r))||l[s]&&!(i=l[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),r=r.slice(n.length));if(!n)break}return e?r.length:r?P.error(t):W(t,a).slice(0)},H=P.compile=function(t,e){var n,i=[],o=[],s=U[t+" "];if(!s){for(n=(e=e||f(t)).length;n--;)((s=function t(e){for(var i,n,o,s=e.length,r=w.relative[e[0].type],a=r||w.relative[" "],l=r?1:0,c=vt(function(t){return t===i},a,!0),d=vt(function(t){return-1<v(i,t)},a,!0),u=[function(t,e,n){return t=!r&&(n||e!==x)||((i=e).nodeType?c:d)(t,e,n),i=null,t}];l<s;l++)if(n=w.relative[e[l].type])u=[vt(bt(u),n)];else{if((n=w.filter[e[l].type].apply(null,e[l].matches))[A]){for(o=++l;o<s&&!w.relative[e[o].type];o++);return xt(1<l&&bt(u),1<l&&R(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(y,"$1"),n,l<o&&t(e.slice(l,o)),o<s&&t(e=e.slice(o)),o<s&&R(e))}u.push(n)}return bt(u)}(e[n]))[A]?i:o).push(s);(s=U(t,Ct(o,i))).selector=t}return s},_=P.select=function(t,e,n,i){var o,s,r,a,l,c="function"==typeof t&&t,d=!i&&f(t=c.selector||t);if(n=n||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&T&&w.relative[s[1].type]){if(!(e=(w.find.ID(r.matches[0].replace(D,u),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=b.needsContext.test(t)?0:s.length;o--&&(r=s[o],!w.relative[a=r.type]);)if((l=w.find[a])&&(i=l(r.matches[0].replace(D,u),dt.test(s[0].type)&&mt(e.parentNode)||e))){if(s.splice(o,1),t=i.length&&R(s))break;return E.apply(n,i),n}}return(c||H(t,d))(i,e,!T,n,!e||dt.test(t)&&mt(e.parentNode)||e),n},p.sortStable=A.split("").sort(X).join("")===A,p.detectDuplicates=!!c,C(),p.sortDetached=N(function(t){return 1&t.compareDocumentPosition(S.createElement("fieldset"))}),N(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ft("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),p.attributes&&N(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ft("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),N(function(t){return null==t.getAttribute("disabled")})||ft(Q,function(t,e,n){if(!n)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),P}(x),K=(S.find=t,S.expr=t.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=t.uniqueSort,S.text=t.getText,S.isXMLDoc=t.isXML,S.contains=t.contains,S.escapeSelector=t.escape,S.expr.match.needsContext);function l(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var Q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Z(t,n,i){return v(n)?S.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?S.grep(t,function(t){return t===n!==i}):"string"!=typeof n?S.grep(t,function(t){return-1<H.call(n,t)!==i}):S.filter(n,t,i)}S.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?S.find.matchesSelector(i,t)?[i]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<i;e++)if(S.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)S.find(t,o[e],n);return 1<i?S.uniqueSort(n):n},filter:function(t){return this.pushStack(Z(this,t||[],!1))},not:function(t){return this.pushStack(Z(this,t||[],!0))},is:function(t){return!!Z(this,"string"==typeof t&&K.test(t)?S(t):t||[],!1).length}});var J,tt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,et=((S.fn.init=function(t,e,n){if(t){if(n=n||J,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(S):S.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:tt.exec(t))||!i[1]&&e)return(!e||e.jquery?e||n:this.constructor(e)).find(t);if(i[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:C,!0)),Q.test(i[1])&&S.isPlainObject(e))for(var i in e)v(this[i])?this[i](e[i]):this.attr(i,e[i])}else(n=C.getElementById(i[2]))&&(this[0]=n,this.length=1)}return this}).prototype=S.fn,J=S(C),/^(?:parents|prev(?:Until|All))/),nt={children:!0,contents:!0,next:!0,prev:!0};function it(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,s=[],r="string"!=typeof t&&S(t);if(!K.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?-1<r.index(n):1===n.nodeType&&S.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(1<s.length?S.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?H.call(S(t),this[0]):H.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){return(t=t.parentNode)&&11!==t.nodeType?t:null},parents:function(t){return i(t,"parentNode")},parentsUntil:function(t,e,n){return i(t,"parentNode",n)},next:function(t){return it(t,"nextSibling")},prev:function(t){return it(t,"previousSibling")},nextAll:function(t){return i(t,"nextSibling")},prevAll:function(t){return i(t,"previousSibling")},nextUntil:function(t,e,n){return i(t,"nextSibling",n)},prevUntil:function(t,e,n){return i(t,"previousSibling",n)},siblings:function(t){return V((t.parentNode||{}).firstChild,t)},children:function(t){return V(t.firstChild)},contents:function(t){return null!=t.contentDocument&&L(t.contentDocument)?t.contentDocument:(l(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},function(i,o){S.fn[i]=function(t,e){var n=S.map(this,o,t);return(e="Until"!==i.slice(-5)?t:e)&&"string"==typeof e&&(n=S.filter(e,n)),1<this.length&&(nt[i]||S.uniqueSort(n),et.test(i))&&n.reverse(),this.pushStack(n)}});var T=/[^\x20\t\r\n\f]+/g;function d(t){return t}function ot(t){throw t}function st(t,e,n,i){var o;try{t&&v(o=t.promise)?o.call(t).done(e).fail(n):t&&v(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}S.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},S.each(t.match(T)||[],function(t,e){n[e]=!0}),n):S.extend({},i);function o(){for(a=a||i.once,r=s=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&i.stopOnFalse&&(d=l.length,e=!1);i.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(e&&!s&&(d=l.length-1,c.push(e)),function n(t){S.each(t,function(t,e){v(e)?i.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==h(e)&&n(e)})}(arguments),e)&&!s&&o(),this},remove:function(){return S.each(arguments,function(t,e){for(var n;-1<(n=S.inArray(e,l,n));)l.splice(n,1),n<=d&&d--}),this},has:function(t){return t?-1<S.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s)||o(),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},S.extend({Deferred:function(t){var s=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var o=arguments;return S.Deferred(function(i){S.each(s,function(t,e){var n=v(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),o=null}).promise()},then:function(e,n,i){var l=0;function c(o,s,r,a){return function(){function t(){var t,e;if(!(o<l)){if((t=r.apply(n,i))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"===_typeof(t)||"function"==typeof t)&&t.then,v(e)?a?e.call(t,c(l,s,d,a),c(l,s,ot,a)):(l++,e.call(t,c(l,s,d,a),c(l,s,ot,a),c(l,s,d,s.notifyWith))):(r!==d&&(n=void 0,i=[t]),(a||s.resolveWith)(n,i))}}var n=this,i=arguments,e=a?t:function(){try{t()}catch(t){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(r!==ot&&(n=void 0,i=[t]),s.rejectWith(n,i))}};o?e():(S.Deferred.getStackHook&&(e.stackTrace=S.Deferred.getStackHook()),x.setTimeout(e))}}return S.Deferred(function(t){s[0][3].add(c(0,t,v(i)?i:d,t.notifyWith)),s[1][3].add(c(0,t,v(e)?e:d)),s[2][3].add(c(0,t,v(n)?n:ot))}).promise()},promise:function(t){return null!=t?S.extend(t,r):r}},a={};return S.each(s,function(t,e){var n=e[2],i=e[5];r[e[1]]=n.add,i&&n.add(function(){o=i},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--n||r.resolveWith(o,s)}}var n=arguments.length,i=n,o=Array(i),s=a.call(arguments),r=S.Deferred();if(n<=1&&(st(t,r.done(e(i)).resolve,r.reject,!n),"pending"===r.state()||v(s[i]&&s[i].then)))return r.then();for(;i--;)st(s[i],e(i),r.reject);return r.promise()}});var rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,at=(S.Deferred.exceptionHook=function(t,e){x.console&&x.console.warn&&t&&rt.test(t.name)&&x.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){x.setTimeout(function(){throw t})},S.Deferred());function lt(){C.removeEventListener("DOMContentLoaded",lt),x.removeEventListener("load",lt),S.ready()}S.fn.ready=function(t){return at.then(t).catch(function(t){S.readyException(t)}),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0)!==t&&0<--S.readyWait||at.resolveWith(C,[S])}}),S.ready.then=at.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?x.setTimeout(S.ready):(C.addEventListener("DOMContentLoaded",lt),x.addEventListener("load",lt));function u(t,e,n,i,o,s,r){var a=0,l=t.length,c=null==n;if("object"===h(n))for(a in o=!0,n)u(t,e,a,n[a],!0,s,r);else if(void 0!==i&&(o=!0,v(i)||(r=!0),e=c?r?(e.call(t,i),null):(c=e,function(t,e,n){return c.call(S(t),n)}):e))for(;a<l;a++)e(t[a],n,r?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):s}var ct=/^-ms-/,dt=/-([a-z])/g;function ut(t,e){return e.toUpperCase()}function b(t){return t.replace(ct,"ms-").replace(dt,ut)}function y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function pt(){this.expando=S.expando+pt.uid++}pt.uid=1,pt.prototype={cache:function(t){var e=t[this.expando];return e||(e={},y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[b(e)]=n;else for(i in e)o[b(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][b(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(b):(e=b(e))in i?[e]:e.match(T)||[]).length;for(;n--;)delete i[e[n]]}void 0!==e&&!S.isEmptyObject(i)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){t=t[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var w=new pt,c=new pt,ft=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ht=/[A-Z]/g;function gt(t,e,n){var i,o;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(ht,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:ft.test(o)?JSON.parse(o):o)}catch(t){}c.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return c.hasData(t)||w.hasData(t)},data:function(t,e,n){return c.access(t,e,n)},removeData:function(t,e){c.remove(t,e)},_data:function(t,e,n){return w.access(t,e,n)},_removeData:function(t,e){w.remove(t,e)}}),S.fn.extend({data:function(n,t){var e,i,o,s=this[0],r=s&&s.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){c.set(this,n)}):u(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=c.get(s,n))||void 0!==(e=gt(s,n))?e:void 0;this.each(function(){c.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=c.get(s),1===s.nodeType)&&!w.get(s,"hasDataAttrs")){for(e=r.length;e--;)r[e]&&0===(i=r[e].name).indexOf("data-")&&(i=b(i.slice(5)),gt(s,i,o[i]));w.set(s,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){c.remove(this,t)})}}),S.extend({queue:function(t,e,n){var i;if(t)return i=w.get(t,e=(e||"fx")+"queue"),n&&(!i||Array.isArray(n)?i=w.access(t,e,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),i=n.length,o=n.shift(),s=S._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete s.stop,o.call(t,function(){S.dequeue(t,e)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return w.get(t,n)||w.access(t,n,{empty:S.Callbacks("once memory").add(function(){w.remove(t,[e+"queue",n])})})}}),S.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?S.queue(this[0],e):void 0===n?this:this.each(function(){var t=S.queue(this,e,n);S._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&S.dequeue(this,e)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function n(){--o||s.resolveWith(r,[r])}var i,o=1,s=S.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(i=w.get(r[a],t+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),s.promise(e)}});function mt(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&k(t)&&"none"===S.css(t,"display")}var t=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,yt=new RegExp("^(?:([+-])=|)("+t+")([a-z%]*)$","i"),p=["Top","Right","Bottom","Left"],A=C.documentElement,k=function(t){return S.contains(t.ownerDocument,t)},vt={composed:!0};A.getRootNode&&(k=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(vt)===t.ownerDocument});function bt(t,e,n,i){var o,s,r=20,a=i?function(){return i.cur()}:function(){return S.css(t,e,"")},l=a(),c=n&&n[3]||(S.cssNumber[e]?"":"px"),d=t.nodeType&&(S.cssNumber[e]||"px"!==c&&+l)&&yt.exec(S.css(t,e));if(d&&d[3]!==c){for(c=c||d[3],d=+(l/=2)||1;r--;)S.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;S.style(t,e,(d*=2)+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i)&&(i.unit=c,i.start=d,i.end=o),o}var wt={};function E(t,e){for(var n,i,o,s,r,a=[],l=0,c=t.length;l<c;l++)(i=t[l]).style&&(n=i.style.display,e?("none"===n&&(a[l]=w.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&mt(i)&&(a[l]=(r=s=void 0,s=(o=i).ownerDocument,o=o.nodeName,(r=wt[o])||(s=s.body.appendChild(s.createElement(o)),r=S.css(s,"display"),s.parentNode.removeChild(s),wt[o]=r="none"===r?"block":r),r))):"none"!==n&&(a[l]="none",w.set(i,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(t[l].style.display=a[l]);return t}S.fn.extend({show:function(){return E(this,!0)},hide:function(){return E(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){mt(this)?S(this).show():S(this).hide()})}});var xt=/^(?:checkbox|radio)$/i,Ct=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,St=/^$|^module$|\/(?:java|ecma)script/i,$=(I=C.createDocumentFragment().appendChild(C.createElement("div")),(s=C.createElement("input")).setAttribute("type","radio"),s.setAttribute("checked","checked"),s.setAttribute("name","t"),I.appendChild(s),m.checkClone=I.cloneNode(!0).cloneNode(!0).lastChild.checked,I.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!I.cloneNode(!0).lastChild.defaultValue,I.innerHTML="<option></option>",m.option=!!I.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function D(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&l(t,e)?S.merge([t],n):n}function Tt(t,e){for(var n=0,i=t.length;n<i;n++)w.set(t[n],"globalEval",!e||w.get(e[n],"globalEval"))}$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td,m.option||($.optgroup=$.option=[1,"<select multiple='multiple'>","</select>"]);var At=/<|&#?\w+;/;function kt(t,e,n,i,o){for(var s,r,a,l,c,d=e.createDocumentFragment(),u=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===h(s))S.merge(u,s.nodeType?[s]:s);else if(At.test(s)){for(r=r||d.appendChild(e.createElement("div")),a=(Ct.exec(s)||["",""])[1].toLowerCase(),a=$[a]||$._default,r.innerHTML=a[1]+S.htmlPrefilter(s)+a[2],c=a[0];c--;)r=r.lastChild;S.merge(u,r.childNodes),(r=d.firstChild).textContent=""}else u.push(e.createTextNode(s));for(d.textContent="",p=0;s=u[p++];)if(i&&-1<S.inArray(s,i))o&&o.push(s);else if(l=k(s),r=D(d.appendChild(s),"script"),l&&Tt(r),n)for(c=0;s=r[c++];)St.test(s.type||"")&&n.push(s);return d}var Et=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function f(){return!1}function $t(t,e){return t===function(){try{return C.activeElement}catch(t){}}()==("focus"===e)}function Dt(t,e,n,i,o,s){var r,a;if("object"===_typeof(e)){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Dt(t,a,n,i,e[a],s);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=f;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return S().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=S.guid++)),t.each(function(){S.event.add(this,e,o,i,n)})}function Pt(t,o,s){s?(w.set(t,o,!1),S.event.add(t,o,{namespace:!1,handler:function(t){var e,n,i=w.get(this,o);if(1&t.isTrigger&&this[o]){if(i.length)(S.event.special[o]||{}).delegateType&&t.stopPropagation();else if(i=a.call(arguments),w.set(this,o,i),e=s(this,o),this[o](),i!==(n=w.get(this,o))||e?w.set(this,o,!1):n={},i!==n)return t.stopImmediatePropagation(),t.preventDefault(),n&&n.value}else i.length&&(w.set(this,o,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===w.get(t,o)&&S.event.add(t,o,n)}S.event={global:{},add:function(e,t,n,i,o){var s,r,a,l,c,d,u,p,f,h=w.get(e);if(y(e))for(n.handler&&(n=(s=n).handler,o=s.selector),o&&S.find.matchesSelector(A,o),n.guid||(n.guid=S.guid++),a=(a=h.events)||(h.events=Object.create(null)),r=(r=h.handle)||(h.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(T)||[""]).length;l--;)u=f=(p=Et.exec(t[l])||[])[1],p=(p[2]||"").split(".").sort(),u&&(c=S.event.special[u]||{},u=(o?c.delegateType:c.bindType)||u,c=S.event.special[u]||{},f=S.extend({type:u,origType:f,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:p.join(".")},s),(d=a[u])||((d=a[u]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,p,r))||e.addEventListener&&e.addEventListener(u,r),c.add&&(c.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,f):d.push(f),S.event.global[u]=!0)},remove:function(t,e,n,i,o){var s,r,a,l,c,d,u,p,f,h,g,m=w.hasData(t)&&w.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(T)||[""]).length;c--;)if(f=g=(a=Et.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=S.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)d=p[s],!o&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(s,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(t,d));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(t,h,m.handle)||S.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)S.event.remove(t,f+e[c],n,i,!0);S.isEmptyObject(l)&&w.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,s,r=new Array(arguments.length),a=S.event.fix(t),t=(w.get(this,"events")||Object.create(null))[a.type]||[],l=S.event.special[a.type]||{};for(r[0]=a,e=1;e<arguments.length;e++)r[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=S.event.handlers.call(this,a,t),e=0;(i=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(o=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,r))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},n=0;n<l;n++)void 0===r[o=(i=e[n]).selector+" "]&&(r[o]=i.needsContext?-1<S(o,this).index(c):S.find(o,this,null,[c]).length),r[o]&&s.push(i);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&Pt(t,"click",n),!1},trigger:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&Pt(t,"click"),!0},_default:function(t){t=t.target;return xt.test(t.type)&&t.click&&l(t,"input")&&w.get(t,"click")||l(t,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?n:f,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=n,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=n,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=n,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return Pt(this,e,$t),!1},trigger:function(){return Pt(this,e),!0},_default:function(t){return w.get(t.target,e)},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){S.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||S.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),S.fn.extend({on:function(t,e,n,i){return Dt(this,t,e,n,i)},one:function(t,e,n,i){return Dt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)i=t.handleObj,S(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);else{if("object"!==_typeof(t))return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=f),this.each(function(){S.event.remove(this,t,n,e)});for(o in t)this.off(o,e,t[o])}return this}});var Ot=/<script|<style|<link/i,It=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Mt(t,e){return l(t,"table")&&l(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Rt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Lt(t,e){var n,i,o,s;if(1===e.nodeType){if(w.hasData(t)&&(s=w.get(t).events))for(o in w.remove(e,"handle events"),s)for(n=0,i=s[o].length;n<i;n++)S.event.add(e,o,s[o][n]);c.hasData(t)&&(t=c.access(t),t=S.extend({},t),c.set(e,t))}}function P(n,i,o,s){i=j(i);var t,e,r,a,l,c,d=0,u=n.length,p=u-1,f=i[0],h=v(f);if(h||1<u&&"string"==typeof f&&!m.checkClone&&It.test(f))return n.each(function(t){var e=n.eq(t);h&&(i[0]=f.call(this,t,e.html())),P(e,i,o,s)});if(u&&(e=(t=kt(i,n[0].ownerDocument,!1,n,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=S.map(D(t,"script"),Rt)).length;d<u;d++)l=t,d!==p&&(l=S.clone(l,!0,!0),a)&&S.merge(r,D(l,"script")),o.call(n[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,S.map(r,Ft),d=0;d<a;d++)l=r[d],St.test(l.type||"")&&!w.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):Y(l.textContent.replace(Nt,""),l,c))}return n}function jt(t,e,n){for(var i,o=e?S.filter(e,t):t,s=0;null!=(i=o[s]);s++)n||1!==i.nodeType||S.cleanData(D(i)),i.parentNode&&(n&&k(i)&&Tt(D(i,"script")),i.parentNode.removeChild(i));return t}S.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,s,r,a,l,c,d=t.cloneNode(!0),u=k(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(r=D(d),i=0,o=(s=D(t)).length;i<o;i++)a=s[i],l=r[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&xt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(s=s||D(t),r=r||D(d),i=0,o=s.length;i<o;i++)Lt(s[i],r[i]);else Lt(t,d);return 0<(r=D(d,"script")).length&&Tt(r,!u&&D(t,"script")),d},cleanData:function(t){for(var e,n,i,o=S.event.special,s=0;void 0!==(n=t[s]);s++)if(y(n)){if(e=n[w.expando]){if(e.events)for(i in e.events)o[i]?S.event.remove(n,i):S.removeEvent(n,i,e.handle);n[w.expando]=void 0}n[c.expando]&&(n[c.expando]=void 0)}}}),S.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return u(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return P(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Mt(this,t).appendChild(t)})},prepend:function(){return P(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=Mt(this,t)).insertBefore(t,e.firstChild)})},before:function(){return P(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return P(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(D(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return u(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ot.test(t)&&!$[(Ct.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(D(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return P(this,arguments,function(t){var e=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(D(this)),e)&&e.replaceChild(t,this)},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){S.fn[t]=function(t){for(var e,n=[],i=S(t),o=i.length-1,s=0;s<=o;s++)e=s===o?this:this.clone(!0),S(i[s])[r](e),B.apply(n,e.get());return this.pushStack(n)}});function Bt(t){var e=t.ownerDocument.defaultView;return(e=e&&e.opener?e:x).getComputedStyle(t)}function Ht(t,e,n){var i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in n=n.call(t),e)t.style[i]=o[i];return n}var _t,qt,zt,Wt,Ut,Xt,Yt,o,Gt=new RegExp("^("+t+")(?!px)[a-z%]+$","i"),Vt=/^--/,Kt=new RegExp(p.join("|"),"i"),s="[\\x20\\t\\r\\n\\f]",Qt=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g");function Zt(){var t;o&&(Yt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",o.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",A.appendChild(Yt).appendChild(o),t=x.getComputedStyle(o),_t="1%"!==t.top,Xt=12===Jt(t.marginLeft),o.style.right="60%",Wt=36===Jt(t.right),qt=36===Jt(t.width),o.style.position="absolute",zt=12===Jt(o.offsetWidth/3),A.removeChild(Yt),o=null)}function Jt(t){return Math.round(parseFloat(t))}function te(t,e,n){var i,o=Vt.test(e),s=t.style;return(n=n||Bt(t))&&(i=n.getPropertyValue(e)||n[e],""!==(i=o?i.replace(Qt,"$1"):i)||k(t)||(i=S.style(t,e)),!m.pixelBoxStyles())&&Gt.test(i)&&Kt.test(e)&&(o=s.width,t=s.minWidth,e=s.maxWidth,s.minWidth=s.maxWidth=s.width=i,i=n.width,s.width=o,s.minWidth=t,s.maxWidth=e),void 0!==i?i+"":i}function ee(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Yt=C.createElement("div"),(o=C.createElement("div")).style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===o.style.backgroundClip,S.extend(m,{boxSizingReliable:function(){return Zt(),qt},pixelBoxStyles:function(){return Zt(),Wt},pixelPosition:function(){return Zt(),_t},reliableMarginLeft:function(){return Zt(),Xt},scrollboxSize:function(){return Zt(),zt},reliableTrDimensions:function(){var t,e,n;return null==Ut&&(t=C.createElement("table"),e=C.createElement("tr"),n=C.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",A.appendChild(t).appendChild(e).appendChild(n),n=x.getComputedStyle(e),Ut=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===e.offsetHeight,A.removeChild(t)),Ut}}));var ne=["Webkit","Moz","ms"],ie=C.createElement("div").style,oe={};function se(t){var e=S.cssProps[t]||oe[t];return e||(t in ie?t:oe[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if((t=ne[n]+e)in ie)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ae={position:"absolute",visibility:"hidden",display:"block"},le={letterSpacing:"0",fontWeight:"400"};function ce(t,e,n){var i=yt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function de(t,e,n,i,o,s){var r="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(l+=S.css(t,n+p[r],!0,o)),i?("content"===n&&(l-=S.css(t,"padding"+p[r],!0,o)),"margin"!==n&&(l-=S.css(t,"border"+p[r]+"Width",!0,o))):(l+=S.css(t,"padding"+p[r],!0,o),"padding"!==n?l+=S.css(t,"border"+p[r]+"Width",!0,o):a+=S.css(t,"border"+p[r]+"Width",!0,o));return!i&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function ue(t,e,n){var i=Bt(t),o=(!m.boxSizingReliable()||n)&&"border-box"===S.css(t,"boxSizing",!1,i),s=o,r=te(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Gt.test(r)){if(!n)return r;r="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&l(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===S.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===S.css(t,"boxSizing",!1,i),s=a in t)&&(r=t[a]),(r=parseFloat(r)||0)+de(t,e,n||(o?"border":"content"),s,i,r)+"px"}function r(t,e,n,i,o){return new r.prototype.init(t,e,n,i,o)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e)return""===(e=te(t,"opacity"))?"1":e}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=b(e),l=Vt.test(e),c=t.style;if(l||(e=se(a)),r=S.cssHooks[e]||S.cssHooks[a],void 0===n)return r&&"get"in r&&void 0!==(o=r.get(t,!1,i))?o:c[e];"string"===(s=_typeof(n))&&(o=yt.exec(n))&&o[1]&&(n=bt(t,e,o),s="number"),null==n||n!=n||("number"!==s||l||(n+=o&&o[3]||(S.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,i)))||(l?c.setProperty(e,n):c[e]=n)}},css:function(t,e,n,i){var o,s=b(e);return Vt.test(e)||(e=se(s)),"normal"===(o=void 0===(o=(s=S.cssHooks[e]||S.cssHooks[s])&&"get"in s?s.get(t,!0,n):o)?te(t,e,i):o)&&e in le&&(o=le[e]),(""===n||n)&&(s=parseFloat(o),!0===n||isFinite(s))?s||0:o}}),S.each(["height","width"],function(t,r){S.cssHooks[r]={get:function(t,e,n){if(e)return!re.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ue(t,r,n):Ht(t,ae,function(){return ue(t,r,n)})},set:function(t,e,n){var i=Bt(t),o=!m.scrollboxSize()&&"absolute"===i.position,s=(o||n)&&"border-box"===S.css(t,"boxSizing",!1,i),n=n?de(t,r,n,s,i):0;return s&&o&&(n-=Math.ceil(t["offset"+r[0].toUpperCase()+r.slice(1)]-parseFloat(i[r])-de(t,r,"border",!1,i)-.5)),n&&(s=yt.exec(e))&&"px"!==(s[3]||"px")&&(t.style[r]=e,e=S.css(t,r)),ce(0,e,n)}}}),S.cssHooks.marginLeft=ee(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(te(t,"marginLeft"))||t.getBoundingClientRect().left-Ht(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(o,s){S.cssHooks[o+s]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+p[e]+s]=i[e]||i[e-2]||i[0];return n}},"margin"!==o&&(S.cssHooks[o+s].set=ce)}),S.fn.extend({css:function(t,e){return u(this,function(t,e,n){var i,o,s={},r=0;if(Array.isArray(e)){for(i=Bt(t),o=e.length;r<o;r++)s[e[r]]=S.css(t,e[r],!1,i);return s}return void 0!==n?S.style(t,e,n):S.css(t,e)},t,e,1<arguments.length)}}),((S.Tween=r).prototype={constructor:r,init:function(t,e,n,i,o,s){this.elem=t,this.prop=n,this.easing=o||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(S.cssNumber[n]?"":"px")},cur:function(){var t=r.propHooks[this.prop];return(t&&t.get?t:r.propHooks._default).get(this)},run:function(t){var e,n=r.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:r.propHooks._default).set(this),this}}).init.prototype=r.prototype,(r.propHooks={_default:{get:function(t){return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(t=S.css(t.elem,t.prop,""))&&"auto"!==t?t:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[se(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=r.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=r.prototype.init,S.fx.step={};var O,pe,I,fe=/^(?:toggle|show|hide)$/,he=/queueHooks$/;function ge(){pe&&(!1===C.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(ge):x.setTimeout(ge,S.fx.interval),S.fx.tick())}function me(){return x.setTimeout(function(){O=void 0}),O=Date.now()}function ye(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=p[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function ve(t,e,n){for(var i,o=(N.tweeners[e]||[]).concat(N.tweeners["*"]),s=0,r=o.length;s<r;s++)if(i=o[s].call(n,e,t))return i}function N(o,t,e){var n,s,i,r,a,l,c,d=0,u=N.prefilters.length,p=S.Deferred().always(function(){delete f.elem}),f=function(){if(!s){for(var t=O||me(),t=Math.max(0,h.startTime+h.duration-t),e=1-(t/h.duration||0),n=0,i=h.tweens.length;n<i;n++)h.tweens[n].run(e);if(p.notifyWith(o,[h,e,t]),e<1&&i)return t;i||p.notifyWith(o,[h,1,0]),p.resolveWith(o,[h])}return!1},h=p.promise({elem:o,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},e),originalProperties:t,originalOptions:e,startTime:O||me(),duration:e.duration,tweens:[],createTween:function(t,e){e=S.Tween(o,h.opts,t,e,h.opts.specialEasing[t]||h.opts.easing);return h.tweens.push(e),e},stop:function(t){var e=0,n=t?h.tweens.length:0;if(!s){for(s=!0;e<n;e++)h.tweens[e].run(1);t?(p.notifyWith(o,[h,1,0]),p.resolveWith(o,[h,t])):p.rejectWith(o,[h,t])}return this}}),g=h.props,m=g,y=h.opts.specialEasing;for(i in m)if(a=y[r=b(i)],l=m[i],Array.isArray(l)&&(a=l[1],l=m[i]=l[0]),i!==r&&(m[r]=l,delete m[i]),(c=S.cssHooks[r])&&"expand"in c)for(i in l=c.expand(l),delete m[r],l)i in m||(m[i]=l[i],y[i]=a);else y[r]=a;for(;d<u;d++)if(n=N.prefilters[d].call(h,o,g,h.opts))return v(n.stop)&&(S._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return S.map(g,ve,h),v(h.opts.start)&&h.opts.start.call(o,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),S.fx.timer(S.extend(f,{elem:o,anim:h,queue:h.opts.queue})),h}S.Animation=S.extend(N,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return bt(n.elem,t,yt.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,o=(t=v(t)?(e=t,["*"]):t.match(T)).length;i<o;i++)n=t[i],N.tweeners[n]=N.tweeners[n]||[],N.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,s,r,a,l,c,d="width"in e||"height"in e,u=this,p={},f=t.style,h=t.nodeType&&mt(t),g=w.get(t,"fxshow");for(i in n.queue||(null==(r=S._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,S.queue(t,"fx").length||r.empty.fire()})})),e)if(o=e[i],fe.test(o)){if(delete e[i],s=s||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||S.style(t,i)}if((l=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(i in d&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=w.get(t,"display")),"none"===(d=S.css(t,"display"))&&(c?d=c:(E([t],!0),c=t.style.display||c,d=S.css(t,"display"),E([t]))),"inline"===d||"inline-block"===d&&null!=c)&&"none"===S.css(t,"float")&&(l||(u.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block"),n.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=w.access(t,"fxshow",{display:c}),s&&(g.hidden=!h),h&&E([t],!0),u.done(function(){for(i in h||E([t]),w.remove(t,"fxshow"),p)S.style(t,i,p[i])})),l=ve(h?g[i]:0,i,u),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?N.prefilters.unshift(t):N.prefilters.push(t)}}),S.speed=function(t,e,n){var i=t&&"object"===_typeof(t)?S.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(t,e,n,i){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){function o(){var t=N(this,S.extend({},e),r);(s||w.get(this,"finish"))&&t.stop(!0)}var s=S.isEmptyObject(e),r=S.speed(t,n,i);return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(o,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof o&&(s=t,t=o,o=void 0),t&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=S.timers,i=w.get(this);if(e)i[e]&&i[e].stop&&r(i[e]);else for(e in i)i[e]&&i[e].stop&&he.test(e)&&r(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(s),t=!1,n.splice(e,1));!t&&s||S.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=w.get(this),n=e[r+"queue"],i=e[r+"queueHooks"],o=S.timers,s=n?n.length:0;for(e.finish=!0,S.queue(this,r,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===r&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),S.each(["toggle","show","hide"],function(t,i){var o=S.fn[i];S.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(ye(i,!0),t,e,n)}}),S.each({slideDown:ye("show"),slideUp:ye("hide"),slideToggle:ye("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){S.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(O=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),O=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pe||(pe=!0,ge())},S.fx.stop=function(){pe=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(i,t){return i=S.fx&&S.fx.speeds[i]||i,this.queue(t=t||"fx",function(t,e){var n=x.setTimeout(t,i);e.stop=function(){x.clearTimeout(n)}})},I=C.createElement("input"),t=C.createElement("select").appendChild(C.createElement("option")),I.type="checkbox",m.checkOn=""!==I.value,m.optSelected=t.selected,(I=C.createElement("input")).value="t",I.type="radio",m.radioValue="t"===I.value;var be,we=S.expr.attrHandle,xe=(S.fn.extend({attr:function(t,e){return u(this,S.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?S.prop(t,e,n):(1===s&&S.isXMLDoc(t)||(o=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?be:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):!(o&&"get"in o&&null!==(i=o.get(t,e)))&&null==(i=S.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){var n;if(!m.radioValue&&"radio"===e&&l(t,"input"))return n=t.value,t.setAttribute("type",e),n&&(t.value=n),e}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(T);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),be={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var r=we[e]||S.find.attr;we[e]=function(t,e,n){var i,o,s=e.toLowerCase();return n||(o=we[s],we[s]=i,i=null!=r(t,e,n)?s:null,we[s]=o),i}}),/^(?:input|select|textarea|button)$/i),Ce=/^(?:a|area)$/i;function M(t){return(t.match(T)||[]).join(" ")}function R(t){return t.getAttribute&&t.getAttribute("class")||""}function Se(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(T)||[]}S.fn.extend({prop:function(t,e){return u(this,S.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&S.isXMLDoc(t)||(e=S.propFix[e]||e,o=S.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):xe.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(S.propHooks.selected={get:function(t){t=t.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(t){t=t.parentNode;t&&(t.selectedIndex,t.parentNode)&&t.parentNode.selectedIndex}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(e){var t,n,i,o,s,r;return v(e)?this.each(function(t){S(this).addClass(e.call(this,t,R(this)))}):(t=Se(e)).length?this.each(function(){if(i=R(this),n=1===this.nodeType&&" "+M(i)+" "){for(s=0;s<t.length;s++)o=t[s],n.indexOf(" "+o+" ")<0&&(n+=o+" ");r=M(n),i!==r&&this.setAttribute("class",r)}}):this},removeClass:function(e){var t,n,i,o,s,r;return v(e)?this.each(function(t){S(this).removeClass(e.call(this,t,R(this)))}):arguments.length?(t=Se(e)).length?this.each(function(){if(i=R(this),n=1===this.nodeType&&" "+M(i)+" "){for(s=0;s<t.length;s++)for(o=t[s];-1<n.indexOf(" "+o+" ");)n=n.replace(" "+o+" "," ");r=M(n),i!==r&&this.setAttribute("class",r)}}):this:this.attr("class","")},toggleClass:function(e,n){var t,i,o,s,r=_typeof(e),a="string"===r||Array.isArray(e);return v(e)?this.each(function(t){S(this).toggleClass(e.call(this,t,R(this),n),n)}):"boolean"==typeof n&&a?n?this.addClass(e):this.removeClass(e):(t=Se(e),this.each(function(){if(a)for(s=S(this),o=0;o<t.length;o++)i=t[o],s.hasClass(i)?s.removeClass(i):s.addClass(i);else void 0!==e&&"boolean"!==r||((i=R(this))&&w.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",!i&&!1!==e&&w.get(this,"__className__")||""))}))},hasClass:function(t){for(var e,n=0,i=" "+t+" ";e=this[n++];)if(1===e.nodeType&&-1<(" "+M(R(e))+" ").indexOf(i))return!0;return!1}});function Te(t){t.stopPropagation()}var Ae=/\r/g,ke=(S.fn.extend({val:function(e){var n,t,i,o=this[0];return arguments.length?(i=v(e),this.each(function(t){1!==this.nodeType||(null==(t=i?e.call(this,t,S(this).val()):e)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(t){return null==t?"":t+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value"))||(this.value=t)})):o?(n=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(t=n.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(Ae,""):null==t?"":t:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:M(S.text(t))}},select:{get:function(t){for(var e,n=t.options,i=t.selectedIndex,o="select-one"===t.type,s=o?null:[],r=o?i+1:n.length,a=i<0?r:o?i:0;a<r;a++)if(((e=n[a]).selected||a===i)&&!e.disabled&&(!e.parentNode.disabled||!l(e.parentNode,"optgroup"))){if(e=S(e).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,s=S.makeArray(e),r=o.length;r--;)((i=o[r]).selected=-1<S.inArray(S.valHooks.option.get(i),s))&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<S.inArray(S(t).val(),e)}},m.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),m.focusin="onfocusin"in x,/^(?:focusinfocus|focusoutblur)$/),Ee=(S.extend(S.event,{trigger:function(t,e,n,i){var o,s,r,a,l,c,d,u=[n||C],p=z.call(t,"type")?t.type:t,f=z.call(t,"namespace")?t.namespace.split("."):[],h=d=s=n=n||C;if(3!==n.nodeType&&8!==n.nodeType&&!ke.test(p+S.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(t=t[S.expando]?t:new S.Event(p,"object"===_typeof(t)&&t)).isTrigger=i?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:S.makeArray(e,[t]),c=S.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,e))){if(!i&&!c.noBubble&&!g(n)){for(r=c.delegateType||p,ke.test(r+p)||(h=h.parentNode);h;h=h.parentNode)u.push(h),s=h;s===(n.ownerDocument||C)&&u.push(s.defaultView||s.parentWindow||x)}for(o=0;(h=u[o++])&&!t.isPropagationStopped();)d=h,t.type=1<o?r:c.bindType||p,(l=(w.get(h,"events")||Object.create(null))[t.type]&&w.get(h,"handle"))&&l.apply(h,e),(l=a&&h[a])&&l.apply&&y(h)&&(t.result=l.apply(h,e),!1===t.result)&&t.preventDefault();return t.type=p,i||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),e)||!y(n)||a&&v(n[p])&&!g(n)&&((s=n[a])&&(n[a]=null),S.event.triggered=p,t.isPropagationStopped()&&d.addEventListener(p,Te),n[p](),t.isPropagationStopped()&&d.removeEventListener(p,Te),S.event.triggered=void 0,s)&&(n[a]=s),t.result}},simulate:function(t,e,n){n=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(n,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}}),m.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,i){function o(t){S.event.simulate(i,t.target,S.event.fix(t))}S.event.special[i]={setup:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,i);e||t.addEventListener(n,o,!0),w.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,i)-1;e?w.access(t,i,e):(t.removeEventListener(n,o,!0),w.remove(t,i))}}}),x.location),$e={guid:Date.now()},De=/\?/,Pe=(S.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new x.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,function(t){return t.textContent}).join("\n"):t)),e},/\[\]$/),Oe=/\r?\n/g,Ie=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;S.param=function(t,e){function n(t,e){e=v(e)?e():e,o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)}var i,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){n(this.name,this.value)});else for(i in t)!function n(i,t,o,s){if(Array.isArray(t))S.each(t,function(t,e){o||Pe.test(i)?s(i,e):n(i+"["+("object"===_typeof(e)&&null!=e?t:"")+"]",e,o,s)});else if(o||"object"!==h(t))s(i,t);else for(var e in t)n(i+"["+e+"]",t[e],o,s)}(i,t[i],e,n);return o.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&Ne.test(this.nodeName)&&!Ie.test(t)&&(this.checked||!xt.test(t))}).map(function(t,e){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:n.replace(Oe,"\r\n")}}).get()}});var Me=/%20/g,Re=/#.*$/,Fe=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,je=/^(?:GET|HEAD)$/,Be=/^\/\//,He={},_e={},qe="*/".concat("*"),ze=C.createElement("a");function We(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(T)||[];if(v(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(e)):(s[n]=s[n]||[]).push(e)}}function Ue(e,i,o,s){var r={},a=e===_e;function l(t){var n;return r[t]=!0,S.each(e[t]||[],function(t,e){e=e(i,o,s);return"string"!=typeof e||a||r[e]?a?!(n=e):void 0:(i.dataTypes.unshift(e),l(e),!1)}),n}return l(i.dataTypes[0])||!r["*"]&&l("*")}function Xe(t,e){var n,i,o=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i=i||{})[n]=e[n]);return i&&S.extend(!0,t,i),t}ze.href=Ee.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ee.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ee.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Xe(Xe(t,S.ajaxSettings),e):Xe(S.ajaxSettings,t)},ajaxPrefilter:We(He),ajaxTransport:We(_e),ajax:function(t,e){"object"===_typeof(t)&&(e=t,t=void 0);var l,c,d,n,u,p,f,i,h=S.ajaxSetup({},e=e||{}),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?S(g):S.event,y=S.Deferred(),v=S.Callbacks("once memory"),b=h.statusCode||{},o={},s={},r="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=Le.exec(d);)n[e[1].toLowerCase()+" "]=(n[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=n[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(t,e){return null==p&&(t=s[t.toLowerCase()]=s[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==p&&(h.mimeType=t),this},statusCode:function(t){if(t)if(p)w.always(t[w.status]);else for(var e in t)b[e]=[b[e],t[e]];return this},abort:function(t){t=t||r;return l&&l.abort(t),a(0,t),this}};if(y.promise(w),h.url=((t||h.url||Ee.href)+"").replace(Be,Ee.protocol+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(T)||[""],null==h.crossDomain){t=C.createElement("a");try{t.href=h.url,t.href=t.href,h.crossDomain=ze.protocol+"//"+ze.host!=t.protocol+"//"+t.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=S.param(h.data,h.traditional)),Ue(He,h,e,w),!p){for(i in(f=S.event&&h.global)&&0==S.active++&&S.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!je.test(h.type),c=h.url.replace(Re,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Me,"+")):(t=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(De.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(Fe,"$1"),t=(De.test(c)?"&":"?")+"_="+$e.guid+++t),h.url=c+t),h.ifModified&&(S.lastModified[c]&&w.setRequestHeader("If-Modified-Since",S.lastModified[c]),S.etag[c])&&w.setRequestHeader("If-None-Match",S.etag[c]),(h.data&&h.hasContent&&!1!==h.contentType||e.contentType)&&w.setRequestHeader("Content-Type",h.contentType),w.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qe+"; q=0.01":""):h.accepts["*"]),h.headers)w.setRequestHeader(i,h.headers[i]);if(h.beforeSend&&(!1===h.beforeSend.call(g,w,h)||p))return w.abort();if(r="abort",v.add(h.complete),w.done(h.success),w.fail(h.error),l=Ue(_e,h,e,w)){if(w.readyState=1,f&&m.trigger("ajaxSend",[w,h]),p)return w;h.async&&0<h.timeout&&(u=x.setTimeout(function(){w.abort("timeout")},h.timeout));try{p=!1,l.send(o,a)}catch(t){if(p)throw t;a(-1,t)}}else a(-1,"No Transport")}return w;function a(t,e,n,i){var o,s,r,a=e;p||(p=!0,u&&x.clearTimeout(u),l=void 0,d=i||"",w.readyState=0<t?4:0,i=200<=t&&t<300||304===t,n&&(r=function(t,e,n){for(var i,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)s=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),n[s]}(h,w,n)),!i&&-1<S.inArray("script",h.dataTypes)&&S.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),r=function(t,e,n,i){var o,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(h,r,w,i),i?(h.ifModified&&((n=w.getResponseHeader("Last-Modified"))&&(S.lastModified[c]=n),n=w.getResponseHeader("etag"))&&(S.etag[c]=n),204===t||"HEAD"===h.type?a="nocontent":304===t?a="notmodified":(a=r.state,o=r.data,i=!(s=r.error))):(s=a,!t&&a||(a="error",t<0&&(t=0))),w.status=t,w.statusText=(e||a)+"",i?y.resolveWith(g,[o,a,w]):y.rejectWith(g,[w,a,s]),w.statusCode(b),b=void 0,f&&m.trigger(i?"ajaxSuccess":"ajaxError",[w,h,i?o:s]),v.fireWith(g,[w,a]),f&&(m.trigger("ajaxComplete",[w,h]),--S.active||S.event.trigger("ajaxStop")))}},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,o){S[o]=function(t,e,n,i){return v(e)&&(i=i||n,n=e,e=void 0),S.ajax(S.extend({url:t,type:o,dataType:i,data:e,success:n},S.isPlainObject(t)&&t))}}),S.ajaxPrefilter(function(t){for(var e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),S._evalUrl=function(t,e,n){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e,n)}})},S.fn.extend({wrapAll:function(t){return this[0]&&(v(t)&&(t=t.call(this[0])),t=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(t){S(this).wrapInner(n.call(this,t))}):this.each(function(){var t=S(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=v(e);return this.each(function(t){S(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(t){}};var Ye={0:200,1223:204},Ge=S.ajaxSettings.xhr(),Ve=(m.cors=!!Ge&&"withCredentials"in Ge,m.ajax=Ge=!!Ge,S.ajaxTransport(function(o){var s,r;if(m.cors||Ge&&!o.crossDomain)return{send:function(t,e){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);s=function(t){return function(){s&&(s=r=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Ye[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=s(),r=i.onerror=i.ontimeout=s("error"),void 0!==i.onabort?i.onabort=r:i.onreadystatechange=function(){4===i.readyState&&x.setTimeout(function(){s&&r()})},s=s("abort");try{i.send(o.hasContent&&o.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),S.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(t,e){i=S("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(t){i.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),C.head.appendChild(i[0])},abort:function(){o&&o()}}}),[]),Ke=/(=)\?(?=&|$)|\?\?/,Qe=(S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||S.expando+"_"+$e.guid++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,s,r=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(Ke,"$1"+i):!1!==t.jsonp&&(t.url+=(De.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||S.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=x[i],x[i]=function(){s=arguments},n.always(function(){void 0===o?S(x).removeProp(i):x[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(i)),s&&v(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((s=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===s.childNodes.length),S.parseHTML=function(t,e,n){var i;return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,e.head.appendChild(i)):e=C),i=!n&&[],(n=Q.exec(t))?[e.createElement(n[1])]:(n=kt([t],e,i),i&&i.length&&S(i).remove(),S.merge([],n.childNodes)))},S.fn.load=function(t,e,n){var i,o,s,r=this,a=t.indexOf(" ");return-1<a&&(i=M(t.slice(a)),t=t.slice(0,a)),v(e)?(n=e,e=void 0):e&&"object"===_typeof(e)&&(o="POST"),0<r.length&&S.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(i?S("<div>").append(S.parseHTML(t)).find(i):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(t,e,n){var i,o,s,r,a=S.css(t,"position"),l=S(t),c={};"static"===a&&(t.style.position="relative"),s=l.offset(),i=S.css(t,"top"),r=S.css(t,"left"),a=("absolute"===a||"fixed"===a)&&-1<(i+r).indexOf("auto")?(o=(a=l.position()).top,a.left):(o=parseFloat(i)||0,parseFloat(r)||0),null!=(e=v(e)?e.call(t,n,S.extend({},s)):e).top&&(c.top=e.top-s.top+o),null!=e.left&&(c.left=e.left-s.left+a),"using"in e?e.using.call(t,c):l.css(c)}},S.fn.extend({offset:function(e){var t,n;return arguments.length?void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)}):(n=this[0])?n.getClientRects().length?(t=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===S.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),o.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-S.css(i,"marginTop",!0),left:e.left-o.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||A})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var s="pageYOffset"===o;S.fn[e]=function(t){return u(this,function(t,e,n){var i;if(g(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[o]:t[e];i?i.scrollTo(s?i.pageXOffset:n,s?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),S.each(["top","left"],function(t,n){S.cssHooks[n]=ee(m.pixelPosition,function(t,e){if(e)return e=te(t,n),Gt.test(e)?S(t).position()[n]+"px":e})}),S.each({Height:"height",Width:"width"},function(r,a){S.each({padding:"inner"+r,content:a,"":"outer"+r},function(i,s){S.fn[s]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return u(this,function(t,e,n){var i;return g(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+r],i["scroll"+r],t.body["offset"+r],i["offset"+r],i["client"+r])):void 0===n?S.css(t,e,o):S.style(t,e,n,o)},a,n?t:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){S.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Ze=(S.proxy=function(t,e){var n,i;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),(i=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||S.guid++,i},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=l,S.isFunction=v,S.isWindow=g,S.camelCase=b,S.type=h,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},S.trim=function(t){return null==t?"":(t+"").replace(Qe,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S}),x.jQuery),Je=x.$;return S.noConflict=function(t){return x.$===S&&(x.$=Je),t&&x.jQuery===S&&(x.jQuery=Ze),S},void 0===F&&(x.jQuery=x.$=S),S}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){var i,r=window.Slick||{};i=0,(r=function(t,e){var n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,t=c(t).data("slick")||{},n.options=c.extend({},n.defaults,e,t),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=i++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,n){var i=this;if("boolean"==typeof e)n=e,e=null;else if(e<0||e>=i.slideCount)return!1;i.unload(),"number"==typeof e?0===e&&0===i.$slides.length?c(t).appendTo(i.$slideTrack):n?c(t).insertBefore(i.$slides.eq(e)):c(t).insertAfter(i.$slides.eq(e)):!0===n?c(t).prependTo(i.$slideTrack):c(t).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),i.$slidesCache=i.$slides,i.reinit()},r.prototype.animateHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:t},e.options.speed))},r.prototype.animateSlide=function(t,e){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(t=-t),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:t},i.options.speed,i.options.easing,e):i.$slideTrack.animate({top:t},i.options.speed,i.options.easing,e):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:t},{duration:i.options.speed,easing:i.options.easing,step:function(t){t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate("+t+"px, 0px)":n[i.animType]="translate(0px,"+t+"px)",i.$slideTrack.css(n)},complete:function(){e&&e.call()}})):(i.applyTransition(),t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate3d("+t+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+t+"px, 0px)",i.$slideTrack.css(n),e&&setTimeout(function(){i.disableTransition(),e.call()},i.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t=t&&null!==t?c(t).not(this.$slider):t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"===_typeof(t)&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,n={};!1===e.options.fade?n[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:n[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,(!1===e.options.fade?e.$slideTrack:e.$slides.eq(t)).css(n)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0)&&(t.direction=1)),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)e.append(c("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=e.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,n,i=this,o=document.createDocumentFragment(),s=i.$slider.children();if(0<i.options.rows){for(n=i.options.slidesPerRow*i.options.rows,e=Math.ceil(s.length/n),t=0;t<e;t++){for(var r=document.createElement("div"),a=0;a<i.options.rows;a++){for(var l=document.createElement("div"),c=0;c<i.options.slidesPerRow;c++){var d=t*n+(a*i.options.slidesPerRow+c);s.get(d)&&l.appendChild(s.get(d))}r.appendChild(l)}o.appendChild(r)}i.$slider.empty().append(o),i.$slider.children().children().children().css({width:100/i.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var n,i,o,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?o=l:"slider"===s.respondTo?o=a:"min"===s.respondTo&&(o=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(n in i=null,s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[n]&&(i=s.breakpoints[n]):o>s.breakpoints[n]&&(i=s.breakpoints[n]));null!==i?null!==s.activeBreakpoint&&i===s.activeBreakpoint&&!e||(s.activeBreakpoint=i,"unslick"===s.breakpointSettings[i]?s.unslick(i):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[i]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=i):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=i),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(t,e){var n,i=this,o=c(t.currentTarget);switch(o.is("a")&&t.preventDefault(),o.is("li")||(o=o.closest("li")),n=i.slideCount%i.options.slidesToScroll!=0?0:(i.slideCount-i.currentSlide)%i.options.slidesToScroll,t.data.message){case"previous":s=0==n?i.options.slidesToScroll:i.options.slidesToShow-n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide-s,!1,e);break;case"next":s=0==n?i.options.slidesToScroll:n,i.slideCount>i.options.slidesToShow&&i.slideHandler(i.currentSlide+s,!1,e);break;case"index":var s=0===t.data.index?0:t.data.index||o.index()*i.options.slidesToScroll;i.slideHandler(i.checkNavigable(s),!1,e),o.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e=this.getNavigableIndexes(),n=0;if(t>e[e.length-1])t=e[e.length-1];else for(var i in e){if(t<e[i]){t=n;break}n=e[i]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility)&&t.$dots.off("keydown.slick",t.keyHandler),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility)&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow)&&t.$nextArrow.off("keydown.slick",t.keyHandler),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow))&&e.$prevArrow.remove(),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow))&&e.$nextArrow.remove(),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(t)).css(e)},r.prototype.fadeSlide=function(t,e){var n=this;!1===n.cssTransitions?(n.$slides.eq(t).css({zIndex:n.options.zIndex}),n.$slides.eq(t).animate({opacity:1},n.options.speed,n.options.easing,e)):(n.applyTransition(t),n.$slides.eq(t).css({opacity:1,zIndex:n.options.zIndex}),e&&setTimeout(function(){n.disableTransition(t),e.call()},n.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=e.is(":focus"),n.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,n=0,i=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++i;else for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)i=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else i=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return i-1},r.prototype.getLeft=function(t){var e,n,i=this,o=0;return i.slideOffset=0,e=i.$slides.first().outerHeight(!0),!0===i.options.infinite?(i.slideCount>i.options.slidesToShow&&(i.slideOffset=i.slideWidth*i.options.slidesToShow*-1,n=-1,!0===i.options.vertical&&!0===i.options.centerMode&&(2===i.options.slidesToShow?n=-1.5:1===i.options.slidesToShow&&(n=-2)),o=e*i.options.slidesToShow*n),i.slideCount%i.options.slidesToScroll!=0&&t+i.options.slidesToScroll>i.slideCount&&i.slideCount>i.options.slidesToShow&&(o=t>i.slideCount?(i.slideOffset=(i.options.slidesToShow-(t-i.slideCount))*i.slideWidth*-1,(i.options.slidesToShow-(t-i.slideCount))*e*-1):(i.slideOffset=i.slideCount%i.options.slidesToScroll*i.slideWidth*-1,i.slideCount%i.options.slidesToScroll*e*-1))):t+i.options.slidesToShow>i.slideCount&&(i.slideOffset=(t+i.options.slidesToShow-i.slideCount)*i.slideWidth,o=(t+i.options.slidesToShow-i.slideCount)*e),i.slideCount<=i.options.slidesToShow&&(o=i.slideOffset=0),!0===i.options.centerMode&&i.slideCount<=i.options.slidesToShow?i.slideOffset=i.slideWidth*Math.floor(i.options.slidesToShow)/2-i.slideWidth*i.slideCount/2:!0===i.options.centerMode&&!0===i.options.infinite?i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)-i.slideWidth:!0===i.options.centerMode&&(i.slideOffset=0,i.slideOffset+=i.slideWidth*Math.floor(i.options.slidesToShow/2)),n=!1===i.options.vertical?t*i.slideWidth*-1+i.slideOffset:t*e*-1+o,!0===i.options.variableWidth&&(e=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow),n=!0===i.options.rtl?e[0]?-1*(i.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,!0===i.options.centerMode)&&(e=i.slideCount<=i.options.slidesToShow||!1===i.options.infinite?i.$slideTrack.children(".slick-slide").eq(t):i.$slideTrack.children(".slick-slide").eq(t+i.options.slidesToShow+1),n=!0===i.options.rtl?e[0]?-1*(i.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,n+=(i.$list.width()-e.outerWidth())/2),n},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){for(var t=this,e=0,n=0,i=[],o=!1===t.options.infinite?t.slideCount:(e=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);e<o;)i.push(e),e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return i},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var n,i=this,o=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0;return!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*i.swipeLeft)return n=e,!1}),Math.abs(c(n).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(t){return 0<=t&&t<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+t,tabindex:-1}),-1!==e&&(t="slick-slide-control"+n.instanceUid+e,c("#"+t).length)&&c(this).attr({"aria-describedby":t})}),n.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+t,"aria-controls":"slick-slide"+n.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=n.currentSlide,e=t+n.options.slidesToShow;t<e;t++)n.options.focusOnChange?n.$slides.eq(t).attr({tabindex:"0"}):n.$slides.eq(t).removeAttr("tabindex");n.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility)&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility)&&t.$dots.on("keydown.slick",t.keyHandler),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var t,e,n,s=this;function i(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),i)&&t.attr("sizes",i),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},o.src=e})}if(!0===s.options.centerMode?n=!0===s.options.infinite?(e=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(e=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(e=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,n=Math.ceil(e+s.options.slidesToShow),!0===s.options.fade&&(0<e&&e--,n<=s.slideCount)&&n++),t=s.$slider.find(".slick-slide").slice(e,n),"anticipated"===s.options.lazyLoad)for(var o=e-1,r=n,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)o<0&&(o=s.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(r)),o--,r++;i(t),s.slideCount<=s.options.slidesToShow?i(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?i(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&i(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange)&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus())},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,n,i,o,s=this,r=c("img[data-lazy]",s.$slider);r.length?(e=r.first(),n=e.attr("data-lazy"),i=e.attr("data-srcset"),o=e.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(e.attr("srcset",i),o)&&e.attr("sizes",o),e.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,e,n]),s.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout(function(){s.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},r.prototype.refresh=function(t){var e=this,n=e.slideCount-e.options.slidesToShow;!e.options.infinite&&e.currentSlide>n&&(e.currentSlide=n),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),n=e.currentSlide,e.destroy(!0),c.extend(e,e.initials,{currentSlide:n}),e.init(),t||e.changeSlide({data:{message:"index",index:n}},!1)},r.prototype.registerBreakpoints=function(){var t,e,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===e&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(e),i.breakpointSettings[e]=o[t].settings}i.breakpoints.sort(function(t,e){return i.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,n){var i=this;if(t="boolean"==typeof t?!0===(e=t)?0:i.slideCount-1:!0===e?--t:t,i.slideCount<1||t<0||t>i.slideCount-1)return!1;i.unload(),(!0===n?i.$slideTrack.children():i.$slideTrack.children(this.options.slide).eq(t)).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},r.prototype.setCSS=function(t){var e,n,i=this,o={};!0===i.options.rtl&&(t=-t),e="left"==i.positionProp?Math.ceil(t)+"px":"0px",n="top"==i.positionProp?Math.ceil(t)+"px":"0px",o[i.positionProp]=t,!1!==i.transformsEnabled&&(!(o={})===i.cssTransitions?o[i.animType]="translate("+e+", "+n+")":o[i.animType]="translate3d("+e+", "+n+", 0px)"),i.$slideTrack.css(o)},r.prototype.setDimensions=function(){var t=this,e=(!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length))),t.$slides.first().outerWidth(!0)-t.$slides.first().width());!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var n,i=this;i.$slides.each(function(t,e){n=i.slideWidth*t*-1,!0===i.options.rtl?c(e).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.css("height",t))},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,n,i,o,s=this,r=!1;if("object"===c.type(arguments[0])?(n=arguments[0],r=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[0],i=arguments[1],r=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[n]=i;else if("multiple"===o)c.each(n,function(t,e){s.options[t]=e});else if("responsive"===o)for(e in i)if("array"!==c.type(s.options.responsive))s.options.responsive=[i[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===i[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(i[e])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty)&&void 0===e.webkitPerspective&&(t.animType=!1),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty)&&void 0===e.MozPerspective&&(t.animType=!1),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty)&&void 0===e.webkitPerspective&&(t.animType=!1),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform)&&(t.animType=!1),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,n,i,o=this,s=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode?(n=o.options.slidesToShow%2==0?1:0,i=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&((i<=t&&t<=o.slideCount-1-i?o.$slides.slice(t-i+n,t+i+1):(e=o.options.slidesToShow+t,s.slice(e-i+1+n,e+i+2))).addClass("slick-active").attr("aria-hidden","false"),0===t?s.eq(s.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&s.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")):(0<=t&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow):s.length<=o.options.slidesToShow?s:(n=o.slideCount%o.options.slidesToShow,e=!0===o.options.infinite?o.options.slidesToShow+t:t,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?s.slice(e-(o.options.slidesToShow-n),e+n):s.slice(e,e+o.options.slidesToShow))).addClass("slick-active").attr("aria-hidden","false"),"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(e=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,t=i.slideCount;t>i.slideCount-n;--t)c(i.$slides[e=t-1]).clone(!0).attr("id","").attr("data-slick-index",e-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(t=0;t<n+i.slideCount;t+=1)e=t,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){t=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),t=(t=parseInt(t.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(t,!1,!0):this.slideHandler(t)},r.prototype.slideHandler=function(t,e,n){var i,o,s,r=this;e=e||!1,!0===r.animating&&!0===r.options.waitForAnimate||!0===r.options.fade&&r.currentSlide===t||(!1===e&&r.asNavFor(t),i=t,e=r.getLeft(i),s=r.getLeft(r.currentSlide),r.currentLeft=null===r.swipeLeft?s:r.swipeLeft,!1===r.options.infinite&&!1===r.options.centerMode&&(t<0||t>r.getDotCount()*r.options.slidesToScroll)||!1===r.options.infinite&&!0===r.options.centerMode&&(t<0||t>r.slideCount-r.options.slidesToScroll)?!1===r.options.fade&&(i=r.currentSlide,!0!==n&&r.slideCount>r.options.slidesToShow?r.animateSlide(s,function(){r.postSlide(i)}):r.postSlide(i)):(r.options.autoplay&&clearInterval(r.autoPlayTimer),o=i<0?r.slideCount%r.options.slidesToScroll!=0?r.slideCount-r.slideCount%r.options.slidesToScroll:r.slideCount+i:i>=r.slideCount?r.slideCount%r.options.slidesToScroll!=0?0:i-r.slideCount:i,r.animating=!0,r.$slider.trigger("beforeChange",[r,r.currentSlide,o]),t=r.currentSlide,r.currentSlide=o,r.setSlideClasses(r.currentSlide),r.options.asNavFor&&(s=(s=r.getNavTarget()).slick("getSlick")).slideCount<=s.options.slidesToShow&&s.setSlideClasses(r.currentSlide),r.updateDots(),r.updateArrows(),!0===r.options.fade?(!0!==n?(r.fadeSlideOut(t),r.fadeSlide(o,function(){r.postSlide(o)})):r.postSlide(o),r.animateHeight()):!0!==n&&r.slideCount>r.options.slidesToShow?r.animateSlide(e,function(){r.postSlide(o)}):r.postSlide(o)))},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t=this,e=t.touchObject.startX-t.touchObject.curX,n=t.touchObject.startY-t.touchObject.curY,n=Math.atan2(n,e),e=Math.round(180*n/Math.PI);return(e=e<0?360-Math.abs(e):e)<=45&&0<=e||e<=360&&315<=e?!1===t.options.rtl?"left":"right":135<=e&&e<=225?!1===t.options.rtl?"right":"left":!0===t.options.verticalSwiping?35<=e&&e<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(e),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,n,i=this,o=void 0!==t.originalEvent?t.originalEvent.touches:null;return!(!i.dragging||i.scrolling||o&&1!==o.length)&&(e=i.getLeft(i.currentSlide),i.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,i.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curX-i.touchObject.startX,2))),o=Math.round(Math.sqrt(Math.pow(i.touchObject.curY-i.touchObject.startY,2))),!i.options.verticalSwiping&&!i.swiping&&4<o?!(i.scrolling=!0):(!0===i.options.verticalSwiping&&(i.touchObject.swipeLength=o),o=i.swipeDirection(),void 0!==t.originalEvent&&4<i.touchObject.swipeLength&&(i.swiping=!0,t.preventDefault()),t=(!1===i.options.rtl?1:-1)*(i.touchObject.curX>i.touchObject.startX?1:-1),!0===i.options.verticalSwiping&&(t=i.touchObject.curY>i.touchObject.startY?1:-1),n=i.touchObject.swipeLength,(i.touchObject.edgeHit=!1)===i.options.infinite&&(0===i.currentSlide&&"right"===o||i.currentSlide>=i.getDotCount()&&"left"===o)&&(n=i.touchObject.swipeLength*i.options.edgeFriction,i.touchObject.edgeHit=!0),!1===i.options.vertical?i.swipeLeft=e+n*t:i.swipeLeft=e+n*(i.$list.height()/i.listWidth)*t,!0===i.options.verticalSwiping&&(i.swipeLeft=e+n*t),!0!==i.options.fade&&!1!==i.options.touchMove&&(!0===i.animating?(i.swipeLeft=null,!1):void i.setCSS(i.swipeLeft))))},r.prototype.swipeStart=function(t){var e,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==e?e.pageX:t.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==e?e.pageY:t.clientY,n.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2);!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var t,e=this,n=arguments[0],i=Array.prototype.slice.call(arguments,1),o=e.length,s=0;s<o;s++)if("object"==_typeof(n)||void 0===n?e[s].slick=new r(e[s],n):t=e[s].slick[n].apply(e[s].slick,i),void 0!==t)return t;return e}}),function(p){for(var o,s,r,a,f=null,h=null,t=["webkit","moz","o","ms"],e=p.document.createElement("div"),n=-1,n=0;n<t.length&&!p.requestAnimationFrame;n++)p.requestAnimationFrame=p[t[n]+"RequestAnimationFrame"];function i(){}void 0===e.nextElementSibling&&Object.defineProperty(p.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(e=p.Element.prototype).matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(s=Object.prototype.hasOwnProperty,r=!{toString:null}.propertyIsEnumerable("toString"),a=(o=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],n="",i=-1;if("object"!==_typeof(t)&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(n in t)s.call(t,n)&&e.push(n);if(r)for(i=0;i<a;i++)s.call(t,o[i])&&e.push(o[i]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");i.prototype=t||{};var n=new i;return i.prototype=null,void 0!==e&&Object.defineProperties(n,e),null===t&&(n.__proto__=null),n}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,i,o;if(null===this)throw new TypeError;if(0!=(o=(i=Object(this)).length>>>0)&&(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),!(o<=e)))for(n=0<=e?e:Math.max(o-Math.abs(e),0);n<o;n++)if(n in i&&i[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,i,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),i=function(){},o=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))},(n=this).prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),p.Element.prototype.dispatchEvent||(p.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}}),(f=function(t,e,n){var i,o=null,s=!1,r=null,a=null,l=[],c="",d=[],u=-1,a=n||p.document,s=(s=arguments[3])&&"boolean"==typeof s;if("string"==typeof t)d=a.querySelectorAll(t);else if(t&&"object"===_typeof(t)&&h.isElement(t,a))d=[t];else{if(!t||"object"!==_typeof(t)||!t.length)throw new Error(f.messages.errorFactoryInvalidContainer());d=t}if(d.length<1)throw new Error(f.messages.errorFactoryContainerNotFound());for(u=0;(o=d[u])&&(!(0<u)||s);u++)o.id?c=o.id:(c="MixItUp"+h.randomHex(),o.id=c),f.instances[c]instanceof f.Mixer?(r=f.instances[c],(!e||e.debug&&!1!==e.debug.showWarnings)&&console.warn(f.messages.warningFactoryPreexistingInstance())):((r=new f.Mixer).attach(o,a,c,e),f.instances[c]=r),i=new f.Facade(r),e&&e.debug&&e.debug.enable?l.push(r):l.push(i);return s?new f.Collection(l):l[0]}).use=function(t){f.Base.prototype.callActions.call(f,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===f.extensions[t.NAME]&&(t(f),f.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(f.libraries.$=t),f.Base.prototype.callActions.call(f,"afterUse",arguments)},f.instances={},f.extensions={},f.libraries={},h={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){this.hasClass(t,e)&&(e=new RegExp("(\\s|^)"+e+"(\\s|$)"),t.className=t.className.replace(e," ").trim())},extend:function(e,t,n,i){var o,s=[],r=-1;n=n||!1,i=i||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)s.push(r);else t&&(s=Object.keys(t));for(r=0;r<s.length;r++)o=s[r],!n||"object"!==_typeof(t[o])||this.isElement(t[o])?e[o]=t[o]:(Array.isArray(t[o])?e[o]||(e[o]=[]):e[o]||(e[o]={}),this.extend(e[o],t[o],n,i))}catch(t){if(!i)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var n=null,i="",o="",s="",r="",a=-1,l=-1;if(t instanceof TypeError&&(n=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(r in i=n[1],e){for(l=0;l<i.length&&i.charAt(l)===r.charAt(l);)l++;a<l&&(a=l,s=r)}throw 1<a&&(o=f.messages.errorConfigInvalidPropertySuggestion({probableMatch:s})),n=f.messages.errorConfigInvalidProperty({erroneous:i,suggestion:o}),new TypeError(n)}throw t},template:function(i){for(var t,e=/\${([\w]*)}/g,o={};t=e.exec(i);)o[t[1]]=new RegExp("\\${"+t[1]+"}","g");return function(t){var e="",n=i;for(e in t=t||{},o)n=n.replace(o[e],void 0!==t[e]?t[e]:"");return n}},on:function(t,e,n,i){t&&(t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&(t["e"+e+n]=n,t[e+n]=function(){t["e"+e+n](p.event)},t.attachEvent("on"+e,t[e+n])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(t,e,n){var i=null;return n=n||p.document,"function"==typeof p.CustomEvent?i=new p.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof n.createEvent?(i=n.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((i=n.createEventObject()).type=t,i.returnValue=!1,i.cancelBubble=!1,i.detail=e),i},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||p.document,!!(p.HTMLElement&&t instanceof p.HTMLElement)||!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},createElement:function(t,e){var n=null,i=null,n=(e=e||p.document).createDocumentFragment();for((i=e.createElement("div")).innerHTML=t.trim();i.firstChild;)n.appendChild(i.firstChild);return n},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){if("object"===_typeof(t)&&t&&"object"===_typeof(e)&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e,n,i=t.slice(),o=i.length,s=o;s--;)e=~~(Math.random()*o),n=i[s],i[s]=i[e],i[e]=n;return i},arrayFromList:function(e){var n,i;try{return Array.prototype.slice.call(e)}catch(t){for(n=[],i=0;i<e.length;i++)n.push(e[i]);return n}},debounce:function(o,s,r){var a;return function(){var t=this,e=arguments,n=r&&!a,i=function(){a=null,r||o.apply(t,e)};clearTimeout(a),a=setTimeout(i,s),n&&o.apply(t,e)}},position:function(t){for(var e=0,n=0,i=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===i&&(e+=t.offsetLeft,n+=t.offsetTop,i=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=(n=t.x-e.x)<0?-1*n:n,t=(t=t.y-e.y)<0?-1*t:t;return Math.sqrt(Math.pow(n,2)+Math.pow(t,2))},getIntersectionRatio:function(t,e){var n=t.width*t.height,i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left));return Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/n},closestParent:function(t,e,n,i){var o=t.parentNode;if(i=i||p.document,n&&t.matches(e))return t;for(;o&&o!=i.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,n){var i=[],o="";return n=n||p.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),i=n.querySelectorAll("#"+t.id+" > "+e),o)&&t.removeAttribute("id"),i},clean:function(t){for(var e=[],n=-1,n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(t){var e=null,n=null,i=null,n=new this.Deferred;return f.features.has.promises?n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}):(i=p.jQuery||t.$)&&"function"==typeof i.Deferred?(e=i.Deferred(),n.promise=e.promise(),n.resolve=e.resolve,n.reject=e.reject):p.console&&console.warn(f.messages.warningNoPromiseImplementation()),n},all:function(t,e){var n=null;return f.features.has.promises?Promise.all(t):(n=p.jQuery||e.$)&&"function"==typeof n.when?n.when.apply(n,t).done(function(){return arguments}):(p.console&&console.warn(f.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,n){var i=-1,o="";if(h.dashCase(e)in t.style)return"";for(i=0;o=n[i];i++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"===_typeof(t.body)?t:p.document,{scrollTop:p.pageYOffset,scrollLeft:p.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){return!!t.offsetParent||"fixed"===(t=p.getComputedStyle(t)).position&&"hidden"!==t.visibility&&"0"!==t.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){for(var n,i,o=t.split("."),s=e.split("."),r=-1,r=0;r<o.length;r++){if(n=parseInt(o[r].replace(/[^\d.]/g,"")),(i=parseInt(s[r].replace(/[^\d.]/g,"")||0))<n)return!1;if(n<i)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=h.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var i="";return(i+=t.block).length&&(i+=t.delineatorElement),i+=t["element"+this.pascalCase(e)],n&&(i.length&&(i+=t.delineatorModifier),i+=n),i},getProperty:function(t,e){var n,i=e.split("."),o="",s=0;if(!e)return t;for(n=function(t){return t?t[o]:null};s<i.length;)o=i[s],t=n(t),s++;return void 0!==t?t:null}},f.h=h,f.Base=function(){},f.Base.prototype={constructor:f.Base,callActions:function(t,e){var n=this.constructor.actions[t],i="";if(n&&!h.isEmptyObject(n))for(i in n)n[i].apply(this,e)},callFilters:function(t,e,n){var i=this.constructor.filters[t],o=e,s="";if(i&&!h.isEmptyObject(i))for(s in n=n||[],i)(n=h.arrayFromList(n)).unshift(o),o=i[s].apply(this,n);return o}},f.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){h.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},f.Features=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new f.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},f.BaseStatic.call(f.Features),f.Features.prototype=Object.create(f.Base.prototype),h.extend(f.Features.prototype,{constructor:f.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof p.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),h.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=h.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=h.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=h.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+h.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+h.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),f.Has=function(){this.transitions=!1,this.promises=!1,h.seal(this)},f.features=new f.Features,f.features.init(),f.ConfigAnimation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigAnimation),f.ConfigAnimation.prototype=Object.create(f.Base.prototype),f.ConfigAnimation.prototype.constructor=f.ConfigAnimation,f.ConfigBehavior=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigBehavior),f.ConfigBehavior.prototype=Object.create(f.Base.prototype),f.ConfigBehavior.prototype.constructor=f.ConfigBehavior,f.ConfigCallbacks=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigCallbacks),f.ConfigCallbacks.prototype=Object.create(f.Base.prototype),f.ConfigCallbacks.prototype.constructor=f.ConfigCallbacks,f.ConfigControls=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigControls),f.ConfigControls.prototype=Object.create(f.Base.prototype),f.ConfigControls.prototype.constructor=f.ConfigControls,f.ConfigClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigClassNames),f.ConfigClassNames.prototype=Object.create(f.Base.prototype),f.ConfigClassNames.prototype.constructor=f.ConfigClassNames,f.ConfigData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigData),f.ConfigData.prototype=Object.create(f.Base.prototype),f.ConfigData.prototype.constructor=f.ConfigData,f.ConfigDebug=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigDebug),f.ConfigDebug.prototype=Object.create(f.Base.prototype),f.ConfigDebug.prototype.constructor=f.ConfigDebug,f.ConfigLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLayout),f.ConfigLayout.prototype=Object.create(f.Base.prototype),f.ConfigLayout.prototype.constructor=f.ConfigLayout,f.ConfigLoad=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLoad),f.ConfigLoad.prototype=Object.create(f.Base.prototype),f.ConfigLoad.prototype.constructor=f.ConfigLoad,f.ConfigSelectors=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigSelectors),f.ConfigSelectors.prototype=Object.create(f.Base.prototype),f.ConfigSelectors.prototype.constructor=f.ConfigSelectors,f.ConfigRender=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigRender),f.ConfigRender.prototype=Object.create(f.Base.prototype),f.ConfigRender.prototype.constructor=f.ConfigRender,f.ConfigTemplates=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigTemplates),f.ConfigTemplates.prototype=Object.create(f.Base.prototype),f.ConfigTemplates.prototype.constructor=f.ConfigTemplates,f.Config=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.animation=new f.ConfigAnimation,this.behavior=new f.ConfigBehavior,this.callbacks=new f.ConfigCallbacks,this.controls=new f.ConfigControls,this.classNames=new f.ConfigClassNames,this.data=new f.ConfigData,this.debug=new f.ConfigDebug,this.layout=new f.ConfigLayout,this.load=new f.ConfigLoad,this.selectors=new f.ConfigSelectors,this.render=new f.ConfigRender,this.templates=new f.ConfigTemplates,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Config),f.Config.prototype=Object.create(f.Base.prototype),f.Config.prototype.constructor=f.Config,f.MixerDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.MixerDom),f.MixerDom.prototype=Object.create(f.Base.prototype),f.MixerDom.prototype.constructor=f.MixerDom,f.UiClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UiClassNames),f.UiClassNames.prototype=Object.create(f.Base.prototype),f.UiClassNames.prototype.constructor=f.UiClassNames,f.CommandDataset=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandDataset),f.CommandDataset.prototype=Object.create(f.Base.prototype),f.CommandDataset.prototype.constructor=f.CommandDataset,f.CommandMultimix=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandMultimix),f.CommandMultimix.prototype=Object.create(f.Base.prototype),f.CommandMultimix.prototype.constructor=f.CommandMultimix,f.CommandFilter=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandFilter),f.CommandFilter.prototype=Object.create(f.Base.prototype),f.CommandFilter.prototype.constructor=f.CommandFilter,f.CommandSort=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandSort),f.CommandSort.prototype=Object.create(f.Base.prototype),f.CommandSort.prototype.constructor=f.CommandSort,f.CommandInsert=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandInsert),f.CommandInsert.prototype=Object.create(f.Base.prototype),f.CommandInsert.prototype.constructor=f.CommandInsert,f.CommandRemove=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandRemove),f.CommandRemove.prototype=Object.create(f.Base.prototype),f.CommandRemove.prototype.constructor=f.CommandRemove,f.CommandChangeLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandChangeLayout),f.CommandChangeLayout.prototype=Object.create(f.Base.prototype),f.CommandChangeLayout.prototype.constructor=f.CommandChangeLayout,f.ControlDefinition=function(t,e,n,i){f.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=n||!1,this.parent=i||"",this.callActions("afterConstruct"),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.ControlDefinition),f.ControlDefinition.prototype=Object.create(f.Base.prototype),f.ControlDefinition.prototype.constructor=f.ControlDefinition,f.controlDefinitions=[],f.controlDefinitions.push(new f.ControlDefinition("multimix","[data-filter][data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("filter","[data-filter]")),f.controlDefinitions.push(new f.ControlDefinition("sort","[data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("toggle","[data-toggle]")),f.Control=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new f.UiClassNames,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Control),f.Control.prototype=Object.create(f.Base.prototype),h.extend(f.Control.prototype,{constructor:f.Control,init:function(t,e,n){var i=this;if(this.callActions("beforeInit",arguments),i.el=t,i.type=e,i.selector=n,i.selector)i.status="live";else switch(i.canDisable="boolean"==typeof i.el.disable,i.type){case"filter":i.filter=i.el.getAttribute("data-filter");break;case"toggle":i.filter=i.el.getAttribute("data-toggle");break;case"sort":i.sort=i.el.getAttribute("data-sort");break;case"multimix":i.filter=i.el.getAttribute("data-filter"),i.sort=i.el.getAttribute("data-sort")}i.bindClick(),f.controls.push(i),this.callActions("afterInit",arguments)},isBound:function(t){var e=!1;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this;this.callActions("beforeRemoveBinding",arguments),-1<(t=e.bound.indexOf(t))&&e.bound.splice(t,1),e.bound.length<1&&(e.unbindClick(),t=f.controls.indexOf(e),f.controls.splice(t,1),"active"===e.status)&&e.renderStatus(e.el,"inactive"),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},h.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),h.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e,n=this,i=null,o=null,s=!1,r={},a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=n.bound[0],i=n.selector?h.closestParent(t.target,o.config.selectors.control+n.selector,!0,o.dom.document):n.el){switch(n.type){case"filter":r.filter=n.filter||i.getAttribute("data-filter");break;case"sort":r.sort=n.sort||i.getAttribute("data-sort");break;case"multimix":r.filter=n.filter||i.getAttribute("data-filter"),r.sort=n.sort||i.getAttribute("data-sort");break;case"toggle":r.filter=n.filter||i.getAttribute("data-toggle"),s="live"===n.status?h.hasClass(i,n.classNames.active):"active"===n.status}for(l=0;l<n.bound.length;l++)e=new f.CommandMultimix,h.extend(e,r),a.push(e);for(a=n.callFilters("commandsHandleClick",a,arguments),n.pending=n.bound.length,l=0;o=n.bound[l];l++)(r=a[l])&&(o.lastClicked||(o.lastClicked=i),f.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===n.type?s?o.toggleOff(r.filter):o.toggleOn(r.filter):o.multimix(r)));this.callActions("afterHandleClick",arguments)}else n.callActions("afterHandleClick",arguments)},update:function(t,e){var n=this,i=new f.CommandMultimix;n.callActions("beforeUpdate",arguments),n.pending--,n.pending=Math.max(0,n.pending),0<n.pending||("live"===n.status?n.updateLive(t,e):(i.sort=n.sort,i.filter=n.filter,n.callFilters("actionsUpdate",i,arguments),n.parseStatusChange(n.el,t,i,e)),n.callActions("afterUpdate",arguments))},updateLive:function(t,e){var n,i=this,o=null,s=null,r=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(n=i.el.querySelectorAll(i.selector),r=0;s=n[r];r++){switch(o=new f.CommandMultimix,i.type){case"filter":o.filter=s.getAttribute("data-filter");break;case"sort":o.sort=s.getAttribute("data-sort");break;case"multimix":o.filter=s.getAttribute("data-filter"),o.sort=s.getAttribute("data-sort");break;case"toggle":o.filter=s.getAttribute("data-toggle")}o=i.callFilters("actionsUpdateLive",o,arguments),i.parseStatusChange(s,t,o,e)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,i){var o=this,s="",r=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(s=e.sort.replace(/:asc/g,"")),e.sort===n.sort||s===n.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(t,"inactive"),e.filter===n.filter&&o.renderStatus(t,"active"),r=0;r<i.length;r++){if(i[r]===n.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var n=this;switch(n.callActions("beforeRenderStatus",arguments),e){case"active":h.addClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"inactive":h.removeClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"disabled":n.canDisable&&(n.el.disabled=!0),h.addClass(t,n.classNames.disabled),h.removeClass(t,n.classNames.active)}"live"!==n.status&&(n.status=e),n.callActions("afterRenderStatus",arguments)}}),f.controls=[],f.StyleData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new f.TransformData,this.translateX=new f.TransformData,this.translateY=new f.TransformData,this.translateZ=new f.TransformData,this.rotateX=new f.TransformData,this.rotateY=new f.TransformData,this.rotateZ=new f.TransformData,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.StyleData),f.StyleData.prototype=Object.create(f.Base.prototype),f.StyleData.prototype.constructor=f.StyleData,f.TransformData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformData),f.TransformData.prototype=Object.create(f.Base.prototype),f.TransformData.prototype.constructor=f.TransformData,f.TransformDefaults=function(){f.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformDefaults),f.TransformDefaults.prototype=Object.create(f.StyleData.prototype),f.TransformDefaults.prototype.constructor=f.TransformDefaults,f.transformDefaults=new f.TransformDefaults,f.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},f.Events=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Events),f.Events.prototype=Object.create(f.Base.prototype),f.Events.prototype.constructor=f.Events,f.Events.prototype.fire=function(t,e,n,i){var o=new f.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');o.state=new f.State,h.extend(o.state,n.state),n.futureState&&(o.futureState=new f.State,h.extend(o.futureState,n.futureState)),o.instance=n.instance,n.originalEvent&&(o.originalEvent=n.originalEvent),n=h.getCustomEvent(t,o,i),this.callFilters("eventFire",n,arguments),e.dispatchEvent(n)},f.events=new f.Events,f.QueueItem=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.QueueItem),f.QueueItem.prototype=Object.create(f.Base.prototype),f.QueueItem.prototype.constructor=f.QueueItem,f.Mixer=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.config=new f.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new f.MixerDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Mixer),f.Mixer.prototype=Object.create(f.Base.prototype),h.extend(f.Mixer.prototype,{constructor:f.Mixer,attach:function(t,e,n,i){var o=this,s=null,r=-1;for(o.callActions("beforeAttach",arguments),o.id=n,i&&h.extend(o.config,i,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&h.addClass(o.dom.container,o.config.layout.containerClassName),f.features.has.transitions||(o.config.animation.enable=!1),void 0===p.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),r=0;s=o.lastOperation.toHide[r];r++)s.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new f.State,n=new f.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(f.messages.errorConfigDataUidKeyNotSet());n.startDataset=n.newDataset=e.activeDataset=t.config.load.dataset.slice(),n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,n.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(n.newSort=e.activeSort,t.sortOperation(n),t.printSort(!1,n),t.targets=n.newOrder):n.startOrder=n.newOrder=t.targets,n.startFilter=n.newFilter=e.activeFilter,n.startSort=n.newSort=e.activeSort,n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,"all"===n.newFilter.selector?n.newFilter.selector=t.config.selectors.target:"none"===n.newFilter.selector&&(n.newFilter.selector="");return n=t.callFilters("operationGetInitialState",n,[e]),(t.lastOperation=n).newFilter&&t.filterOperation(n),e=t.buildState(n)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e,n=this,i=null,o=-1;if(n.callActions("beforeIndexTargets",arguments),n.dom.targets=n.config.layout.allowNestedTargets?n.dom.container.querySelectorAll(n.config.selectors.target):h.children(n.dom.container,n.config.selectors.target,n.dom.document),n.dom.targets=h.arrayFromList(n.dom.targets),n.targets=[],(e=n.config.load.dataset)&&e.length!==n.dom.targets.length)throw new Error(f.messages.errorDatasetPrerenderedMismatch());if(n.dom.targets.length){for(o=0;t=n.dom.targets[o];o++)(i=new f.Target).init(t,n,e?e[o]:void 0),i.isInDom=!0,n.targets.push(i);n.dom.parent=n.dom.targets[0].parentElement===n.dom.container?n.dom.container:n.dom.targets[0].parentElement}n.origOrder=n.targets,n.callActions("afterIndexTargets",arguments)},initControls:function(){var t,e,n=this,i=null,o=null,s=null,r=null,a=-1,l=-1;switch(n.callActions("beforeInitControls",arguments),n.config.controls.scope){case"local":o=n.dom.container;break;case"global":o=n.dom.document;break;default:throw new Error(f.messages.errorConfigInvalidControlsScope())}for(a=0;t=f.controlDefinitions[a];a++)if(n.config.controls.live||t.live){if(t.parent){if(!(s=n.dom[t.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[o];for(l=0;i=s[l];l++)r=n.getControl(i,t.type,t.selector),n.controls.push(r)}else for(e=o.querySelectorAll(n.config.selectors.control+t.selector),l=0;i=e[l];l++)(r=n.getControl(i,t.type,""))&&n.controls.push(r);n.callActions("afterInitControls",arguments)},getControl:function(t,e,n){var i=this,o=null,s=-1;if(i.callActions("beforeGetControl",arguments),!n)for(s=0;o=f.controls[s];s++){if(o.el===t&&o.isBound(i))return i.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===n)return o.addBinding(i),i.callFilters("controlGetControl",o,arguments)}return(o=new f.Control).init(t,e,n),o.classNames.base=h.getClassname(i.config.classNames,e),o.classNames.active=h.getClassname(i.config.classNames,e,i.config.classNames.modifierActive),o.classNames.disabled=h.getClassname(i.config.classNames,e,i.config.classNames.modifierDisabled),o.addBinding(i),i.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",n="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=h.clean(t.toggleArray),""===(n=t.toggleArray.join(e))&&(n=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",n,arguments)},buildToggleArray:function(t,e){var n=this,i="";if(n.callActions("beforeBuildToggleArray",arguments),t&&t.filter)i=t.filter.selector.replace(/\s/g,"");else{if(!e)return;i=e.activeFilter.selector.replace(/\s/g,"")}i!==n.config.selectors.target&&"all"!==i||(i=""),"or"===n.config.controls.toggleLogic?n.toggleArray=i.split(","):n.toggleArray=n.splitCompoundSelector(i),n.toggleArray=h.clean(n.toggleArray),n.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],i="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(i=""),i+=e[o],o%2!=0&&n.push(i);return n},updateControls:function(t){var e=this,n=null,i=new f.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?i.filter=t.filter.selector:i.filter=e.state.activeFilter.selector,t.sort?i.sort=e.buildSortString(t.sort):i.sort=e.buildSortString(e.state.activeSort),i.filter===e.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),h.freeze(i),o=0;n=e.controls[o];o++)n.update(i,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var n,i=this,o=-1,s=null,r=null,a=null,l=-1;if(i.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),n=i.getNextSibling(t.index,t.sibling,t.position),s=i.dom.document.createDocumentFragment(),o=n?h.index(n,i.config.selectors.target):i.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<i.dom.targets.indexOf(a))throw new Error(f.messages.errorInsertPreexistingElement());a.style.display="none",s.appendChild(a),s.appendChild(i.dom.document.createTextNode(" ")),h.isElement(a,i.dom.document)&&a.matches(i.config.selectors.target)&&((r=new f.Target).init(a,i),r.isInDom=!0,i.targets.splice(o,0,r),o++)}i.dom.parent.insertBefore(s,n)}e.startOrder=i.origOrder=i.targets,i.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var i=this,o=null;return t=Math.max(t,0),e&&"before"===n?o=e:e&&"after"===n?o=e.nextElementSibling||null:0<i.targets.length&&void 0!==t?o=t<i.targets.length||!i.targets.length?i.targets[t].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&0<i.dom.parent.children.length&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,n,i=!1,o=null,s=-1;for(this.callActions("beforeFilterOperation",arguments),n=t.newFilter.action,s=0;o=t.newOrder[s];s++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,o,n,t);if(t.toRemove.length)for(s=0;o=t.show[s];s++)-1<t.toRemove.indexOf(o)&&(t.show.splice(s,1),-1<(e=t.toShow.indexOf(o))&&t.toShow.splice(e,1),t.toHide.push(o),t.hide.push(o),s--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,i){var o=Array.prototype.slice.call(arguments,1),t=this.callFilters("testResultEvaluateHideShow",t,o);this.callActions("beforeEvaluateHideShow",arguments),!0===t&&"show"===n||!1===t&&"hide"===n?(i.show.push(e),e.isShown||i.toShow.push(e)):(i.hide.push(e),e.isShown&&i.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(n){var t,i=this,e=[],o=null,s=-1;if(i.callActions("beforeSortOperation",arguments),n.startOrder=i.targets,n.newSort.collection){for(e=[],s=0;t=n.newSort.collection[s];s++){if(i.dom.targets.indexOf(t)<0)throw new Error(f.messages.errorSortNonExistentElement());(o=new f.Target).init(t,i),o.isInDom=!0,e.push(o)}n.newOrder=e}else"random"===n.newSort.order?n.newOrder=h.arrayShuffle(n.startOrder):""===n.newSort.attribute?(n.newOrder=i.origOrder.slice(),"desc"===n.newSort.order&&n.newOrder.reverse()):(n.newOrder=n.startOrder.slice(),n.newOrder.sort(function(t,e){return i.compare(t,e,n.newSort)}));h.isEqualArray(n.newOrder,n.startOrder)&&(n.willSort=!1),i.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var i=n.order,o=this.getAttributeValue(t,n.attribute),s=this.getAttributeValue(e,n.attribute),s=isNaN(+o)||isNaN(+s)?(o=o.toLowerCase(),s.toLowerCase()):(o=+o,+s);return o<s?"asc"===i?-1:1:s<o?"asc"===i?1:-1:o===s&&n.next?this.compare(t,e,n.next):0},getAttributeValue:function(t,e){return null===(t=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(f.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",t||0,arguments)},printSort:function(t,e){var n=this,i=t?e.newOrder:e.startOrder,o=t?e.startOrder:e.newOrder,t=i.length?i[i.length-1].dom.el.nextElementSibling:null,s=p.document.createDocumentFragment(),r=null,a=null,l=-1;for(n.callActions("beforePrintSort",arguments),l=0;r=i[l];l++)"absolute"!==(a=r.dom.el).style.position&&(h.removeWhitespace(a.previousSibling),a.parentElement.removeChild(a));for((e=t?t.previousSibling:n.dom.parent.lastChild)&&"#text"===e.nodeName&&h.removeWhitespace(e),l=0;r=o[l];l++)a=r.dom.el,h.isElement(s.lastChild)&&s.appendChild(p.document.createTextNode(" ")),s.appendChild(a);n.dom.parent.firstChild&&n.dom.parent.firstChild!==t&&s.insertBefore(p.document.createTextNode(" "),s.childNodes[0]),t?(s.appendChild(p.document.createTextNode(" ")),n.dom.parent.insertBefore(s,t)):n.dom.parent.appendChild(s),n.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){for(var n,i=t.split(" "),o=e,s=-1,s=0;s<i.length;s++){switch(n=i[s].split(":"),o.sortString=i[s],o.attribute=h.dashCase(n[0]),o.order=n[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;s<i.length-1&&(o.next=new f.CommandSort,h.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",n=t.config.animation.effectsIn||t.config.animation.effects,i=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new f.StyleData,t.effectsOut=new f.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",n,t.effectsIn,t.transformIn),t.parseEffect("fade",i,t.effectsOut,t.transformOut,!0),f.transformDefaults)f.transformDefaults[e]instanceof f.TransformData&&(t.parseEffect(e,n,t.effectsIn,t.transformIn),t.parseEffect(e,i,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",n,t.effectsIn,t.transformIn),t.parseEffect("stagger",i,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,n,i,o){var s,r,a=this,l="",c=["%","px","em","rem","vh","vw","deg"],d=-1;if(a.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(f.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(a.staggerDuration=0);else{switch(-1<(s=e.indexOf(t+"("))&&(e=e.substring(s),l=/\(([^)]+)\)/.exec(e)[1]),t){case"fade":n.opacity=l?parseFloat(l):0;break;case"stagger":a.staggerDuration=l?parseFloat(l):100;break;default:if(o&&a.config.animation.reverseOut&&"scale"!==t?n[t].value=-1*(l?parseFloat(l):f.transformDefaults[t].value):n[t].value=l?parseFloat(l):f.transformDefaults[t].value,l){for(d=0;r=c[d];d++)if(-1<l.indexOf(r)){n[t].unit=r;break}}else n[t].unit=f.transformDefaults[t].unit;i.push(t+"("+n[t].value+n[t].unit+")")}a.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,n=new f.State,i=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;i=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.targets.push(i.dom.el);for(o=0;i=t.matching[o];o++)n.matching.push(i.dom.el);for(o=0;i=t.show[o];o++)n.show.push(i.dom.el);for(o=0;i=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.hide.push(i.dom.el);return n.id=e.id,n.container=e.dom.container,n.activeFilter=t.newFilter,n.activeSort=t.newSort,n.activeDataset=t.newDataset,n.activeContainerClassName=t.newContainerClassName,n.hasFailed=t.hasFailed,n.totalTargets=e.targets.length,n.totalShow=t.show.length,n.totalHide=t.hide.length,n.totalMatching=t.matching.length,n.triggerElement=t.triggerElement,e.callFilters("stateBuildState",n,arguments)},goMix:function(t,e){var n=this,i=null;return n.callActions("beforeGoMix",arguments),n.config.animation.duration&&n.config.animation.effects&&h.isVisible(n.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),f.events.fire("mixStart",n.dom.container,{state:e.startState,futureState:e.newState,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixStart&&n.config.callbacks.onMixStart.call(n.dom.container,e.startState,e.newState,n),h.removeClass(n.dom.container,h.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed)),i=n.userDeferred||(n.userDeferred=h.defer(f.libraries)),n.isBusy=!0,t&&f.features.has.transitions?(p.pageYOffset!==e.docState.scrollTop&&p.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),n.config.animation.applyPerspective&&(n.dom.parent.style[f.features.perspectiveProp]=n.config.animation.perspectiveDistance,n.dom.parent.style[f.features.perspectiveOriginProp]=n.config.animation.perspectiveOrigin),n.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),n.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(n.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){n.moveTargets(e)})):n.config.debug.fauxAsync?setTimeout(function(){n.cleanUp(e)},n.config.animation.duration):n.cleanUp(e),n.callFilters("promiseGoMix",i.promise,arguments)},getStartMixData:function(t){var e=this,n=p.getComputedStyle(e.dom.parent),i=e.dom.parent.getBoundingClientRect(),o=null,s={},r=-1,a=n[f.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),r=0;o=t.show[r];r++)s=o.getPosData(),t.showPosData[r]={startPosData:s};for(r=0;o=t.toHide[r];r++)s=o.getPosData(),t.toHidePosData[r]={startPosData:s};t.startX=i.left,t.startY=i.top,t.startHeight=e.incPadding?i.height:i.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.startWidth=e.incPadding?i.width:i.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),i=0;n=t.toShow[i];i++)n.show();t.willChangeLayout&&(h.removeClass(e.dom.container,t.startContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,n=-1;for(this.callActions("beforeGetInterMixData",arguments),n=0;e=t.show[n];n++)t.showPosData[n].interPosData=e.getPosData();for(n=0;e=t.toHide[n];n++)t.toHidePosData[n].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,n=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),n=0;e=t.toHide[n];n++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,n=this,i=null,o=null,s=-1;for(n.callActions("beforeGetFinalMixData",arguments),s=0;o=t.show[s];s++)t.showPosData[s].finalPosData=o.getPosData();for(s=0;o=t.toHide[s];s++)t.toHidePosData[s].finalPosData=o.getPosData();for((n.config.animation.clampHeight||n.config.animation.clampWidth)&&(n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=""),n.incPadding||(i=p.getComputedStyle(n.dom.parent)),e=n.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=n.incPadding?e.height:e.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.newWidth=n.incPadding?e.width:e.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&n.printSort(!0,t),s=0;o=t.toShow[s];s++)o.hide();for(s=0;o=t.toHide[s];s++)o.show();t.willChangeLayout&&(h.removeClass(n.dom.container,t.newContainerClassName),h.addClass(n.dom.container,n.config.layout.containerClassName)),n.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,n=null,i=null,o=Object.getOwnPropertyNames(e.effectsIn),s="",r=null,a=-1,l=-1,c=-1,d=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;n=t.show[c];c++)for((i=t.showPosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,n.isShown?(i.posIn.x=i.startPosData.x-i.interPosData.x,i.posIn.y=i.startPosData.y-i.interPosData.y):i.posIn.x=i.posIn.y=0,i.posOut.x=i.finalPosData.x-i.interPosData.x,i.posOut.y=i.finalPosData.y-i.interPosData.y,i.posIn.opacity=n.isShown?1:e.effectsIn.opacity,i.posOut.opacity=1,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,n.isShown||e.config.animation.nudge||(i.posIn.x=i.posOut.x,i.posIn.y=i.posOut.y),i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=(i.startPosData.width||i.finalPosData.width)-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=(i.startPosData.height||i.finalPosData.height)-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l,i.posOut.width=i.finalPosData.width,i.posOut.height=i.finalPosData.height,a=(i.finalPosData.width||i.startPosData.width)-i.interPosData.width,i.posOut.marginRight=i.finalPosData.marginRight-a,l=(i.finalPosData.height||i.startPosData.height)-i.interPosData.height,i.posOut.marginBottom=i.finalPosData.marginBottom-l,i.tweenData.width=i.posOut.width-i.posIn.width,i.tweenData.height=i.posOut.height-i.posIn.height,i.tweenData.marginRight=i.posOut.marginRight-i.posIn.marginRight,i.tweenData.marginBottom=i.posOut.marginBottom-i.posIn.marginBottom),d=0;s=o[d];d++)(r=e.effectsIn[s])instanceof f.TransformData&&r.value&&(i.posIn[s].value=r.value,i.posOut[s].value=0,i.tweenData[s].value=i.posOut[s].value-i.posIn[s].value,i.posIn[s].unit=i.posOut[s].unit=i.tweenData[s].unit=r.unit);for(c=0;n=t.toHide[c];c++)for((i=t.toHidePosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,i.posIn.x=n.isShown?i.startPosData.x-i.interPosData.x:0,i.posIn.y=n.isShown?i.startPosData.y-i.interPosData.y:0,i.posOut.x=e.config.animation.nudge?0:i.posIn.x,i.posOut.y=e.config.animation.nudge?0:i.posIn.y,i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=i.startPosData.width-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=i.startPosData.height-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l),i.posIn.opacity=1,i.posOut.opacity=e.effectsOut.opacity,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,d=0;s=o[d];d++)(r=e.effectsOut[s])instanceof f.TransformData&&r.value&&(i.posIn[s].value=0,i.posOut[s].value=r.value,i.tweenData[s].value=i.posOut[s].value-i.posIn[s].value,i.posIn[s].unit=i.posOut[s].unit=i.tweenData[s].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,n=null,i=null,o=null,s="",r=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;n=t.show[l];l++)i=new f.IMoveData,o=t.showPosData[l],s=n.isShown?"none":"show",(r=e.willTransition(s,t.hasEffect,o.posIn,o.posOut))&&a++,n.show(),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=s,i.staggerIndex=a,i.operation=t,i.callback=r?c:null,n.move(i);for(l=0;n=t.toHide[l];l++)o=t.toHidePosData[l],i=new f.IMoveData,r=e.willTransition(s="hide",o.posIn,o.posOut),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=s,i.staggerIndex=l,i.operation=t,i.callback=r?c:null,n.move(i);e.config.animation.animateResizeContainer&&(e.dom.parent.style[f.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(h.removeClass(e.dom.container,e.config.layout.ContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t,e=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],n=!1,i=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(i=0;t=e[i];i++)if(t=this.effectsIn[t],0!==(_typeof(t)&&"undefined"!==t.value?t.value:t)){n=!0;break}return this.callFilters("resultHasEffect",n,arguments)},willTransition:function(t,e,n,i){var o=!1,o=!(!h.isVisible(this.dom.container)||!("none"!==t&&e||n.x!==i.x||n.y!==i.y)&&(!this.config.animation.animateResizeTargets||n.width===i.width&&n.height===i.height&&n.marginRight===i.marginRight&&n.marginTop===i.marginTop));return this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e,n,i=this,o=null,s=null,r=-1;for(i.callActions("beforeCleanUp",arguments),r=i.targetsMoved=i.targetsImmovable=i.targetsBound=i.targetsDone=0;o=t.show[r];r++)o.cleanUp(),o.show();for(r=0;o=t.toHide[r];r++)o.cleanUp(),o.hide();if(t.willSort&&i.printSort(!1,t),i.dom.parent.style[f.features.transitionProp]=i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=i.dom.parent.style[f.features.perspectiveProp]=i.dom.parent.style[f.features.perspectiveOriginProp]="",t.willChangeLayout&&(h.removeClass(i.dom.container,t.startContainerClassName),h.addClass(i.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;o=i.targets[r];r++)-1<t.toRemove.indexOf(o)&&((e=o.dom.el.previousSibling)&&"#text"===e.nodeName&&(s=o.dom.el.nextSibling)&&"#text"===s.nodeName&&h.removeWhitespace(e),t.willSort||i.dom.parent.removeChild(o.dom.el),i.targets.splice(r,1),o.isInDom=!1,r--);i.origOrder=i.targets}t.willSort&&(i.targets=t.newOrder),i.state=t.newState,i.lastOperation=t,i.dom.targets=i.state.targets,f.events.fire("mixEnd",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixEnd&&i.config.callbacks.onMixEnd.call(i.dom.container,i.state,i),t.hasFailed&&(f.events.fire("mixFail",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixFail&&i.config.callbacks.onMixFail.call(i.dom.container,i.state,i),h.addClass(i.dom.container,h.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed))),"function"==typeof i.userCallback&&i.userCallback.call(i.dom.container,i.state,i),"function"==typeof i.userDeferred.resolve&&i.userDeferred.resolve(i.state),i.userCallback=null,i.userDeferred=null,i.lastClicked=null,i.isToggling=!1,i.isBusy=!1,i.queue.length&&(i.callActions("beforeReadQueueCleanUp",arguments),n=i.queue.shift(),i.userDeferred=n.deferred,i.isToggling=n.isToggling,i.lastClicked=n.triggerElement,(n.instruction.command instanceof f.CommandMultimix?i.multimix:i.dataset).apply(i,n.args)),i.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e,n=this,i=new f.UserInstruction,o=-1;for(i.animate=n.config.animation.enable,i.command=new f.CommandMultimix,o=0;o<t.length;o++)null!==(e=t[o])&&("object"===_typeof(e)?h.extend(i.command,e):"boolean"==typeof e?i.animate=e:"function"==typeof e&&(i.callback=e));return!i.command.insert||i.command.insert instanceof f.CommandInsert||(i.command.insert=n.parseInsertArgs([i.command.insert]).command),!i.command.remove||i.command.remove instanceof f.CommandRemove||(i.command.remove=n.parseRemoveArgs([i.command.remove]).command),!i.command.filter||i.command.filter instanceof f.CommandFilter||(i.command.filter=n.parseFilterArgs([i.command.filter]).command),!i.command.sort||i.command.sort instanceof f.CommandSort||(i.command.sort=n.parseSortArgs([i.command.sort]).command),!i.command.changeLayout||i.command.changeLayout instanceof f.CommandChangeLayout||(i.command.changeLayout=n.parseChangeLayoutArgs([i.command.changeLayout]).command),i=n.callFilters("instructionParseMultimixArgs",i,arguments),h.freeze(i),i},parseFilterArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandFilter,i=0;i<t.length;i++)"string"==typeof(e=t[i])?n.command.selector=e:null===e?n.command.collection=[]:"object"===_typeof(e)&&h.isElement(e,this.dom.document)?n.command.collection=[e]:"object"===_typeof(e)&&void 0!==e.length?n.command.collection=h.arrayFromList(e):"object"===_typeof(e)?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e);if(n.command.selector&&n.command.collection)throw new Error(f.messages.errorFilterInvalidArguments());return n=this.callFilters("instructionParseFilterArgs",n,arguments),h.freeze(n),n},parseSortArgs:function(t){var e,n=new f.UserInstruction,i="",o=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandSort,o=0;o<t.length;o++)if(null!==(e=t[o]))switch(_typeof(e)){case"string":i=e;break;case"object":e.length&&(n.command.collection=h.arrayFromList(e));break;case"boolean":n.animate=e;break;case"function":n.callback=e}return i&&(n.command=this.parseSortString(i,n.command)),n=this.callFilters("instructionParseSortArgs",n,arguments),h.freeze(n),n},parseInsertArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandInsert,i=0;i<t.length;i++)null!==(e=t[i])&&("number"==typeof e?n.command.index=e:"string"==typeof e&&-1<["before","after"].indexOf(e)?n.command.position=e:"string"==typeof e?n.command.collection=h.arrayFromList(h.createElement(e).childNodes):"object"===_typeof(e)&&h.isElement(e,this.dom.document)?n.command.collection.length?n.command.sibling=e:n.command.collection=[e]:"object"===_typeof(e)&&e.length?n.command.collection.length?n.command.sibling=e[0]:n.command.collection=e:"object"===_typeof(e)&&e.childNodes&&e.childNodes.length?n.command.collection.length?n.command.sibling=e.childNodes[0]:n.command.collection=h.arrayFromList(e.childNodes):"object"===_typeof(e)?h.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e));if(n.command.index&&n.command.sibling)throw new Error(f.messages.errorInsertInvalidArguments());return!n.command.collection.length&&this.config.debug.showWarnings&&console.warn(f.messages.warningInsertNoElements()),n=this.callFilters("instructionParseInsertArgs",n,arguments),h.freeze(n),n},parseRemoveArgs:function(t){var e,n,i=this,o=new f.UserInstruction,s=-1;for(o.animate=i.config.animation.enable,o.command=new f.CommandRemove,s=0;s<t.length;s++)if(null!==(n=t[s]))switch(_typeof(n)){case"number":i.targets[n]&&(o.command.targets[0]=i.targets[n]);break;case"string":o.command.collection=h.arrayFromList(i.dom.parent.querySelectorAll(n));break;case"object":n&&n.length?o.command.collection=n:h.isElement(n,i.dom.document)?o.command.collection=[n]:h.extend(o.command,n);break;case"boolean":o.animate=n;break;case"function":o.callback=n}if(o.command.collection.length)for(s=0;e=i.targets[s];s++)-1<o.command.collection.indexOf(e.dom.el)&&o.command.targets.push(e);return!o.command.targets.length&&i.config.debug.showWarnings&&console.warn(f.messages.warningRemoveNoElements()),h.freeze(o),o},parseDatasetArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandDataset,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(_typeof(e)){case"object":Array.isArray(e)||"number"==typeof e.length?n.command.dataset=e:h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},parseChangeLayoutArgs:function(t){var e,n=new f.UserInstruction,i=-1;for(n.animate=this.config.animation.enable,n.command=new f.CommandChangeLayout,i=0;i<t.length;i++)if(null!==(e=t[i]))switch(_typeof(e)){case"string":n.command.containerClassName=e;break;case"object":h.extend(n.command,e);break;case"boolean":n.animate=e;break;case"function":n.callback=e}return h.freeze(n),n},queueMix:function(t){var e,n=this,i=null;return n.callActions("beforeQueueMix",arguments),i=h.defer(f.libraries),n.config.animation.queue&&n.queue.length<n.config.animation.queueLimit?(t.deferred=i,n.queue.push(t),n.config.controls.enable&&(n.isToggling?(n.buildToggleArray(t.instruction.command),e=n.getToggleSelector(),n.updateControls({filter:{selector:e}})):n.updateControls(t.instruction.command))):(n.config.debug.showWarnings&&console.warn(f.messages.warningMultimixInstanceQueueFull()),i.resolve(n.state),f.events.fire("mixBusy",n.dom.container,{state:n.state,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixBusy&&n.config.callbacks.onMixBusy.call(n.dom.container,n.state,n)),n.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,n=new f.Operation,i=[],n=e.callFilters("operationUnmappedGetDataOperation",n,arguments);if(e.dom.targets.length&&!(i=e.state.activeDataset||[]).length)throw new Error(f.messages.errorDatasetNotSet());return n.id=h.randomHex(),n.startState=e.state,n.startDataset=i,n.newDataset=t.slice(),e.diffDatasets(n),n.startOrder=e.targets,n.newOrder=n.show,e.config.animation.enable&&(e.getStartMixData(n),e.setInter(n),n.docState=h.getDocumentState(e.dom.document),e.getInterMixData(n),e.setFinal(n),e.getFinalMixData(n),e.parseEffects(),n.hasEffect=e.hasEffect(),e.getTweenData(n)),e.targets=n.show.slice(),n.newState=e.buildState(n),Array.prototype.push.apply(e.targets,n.toRemove),n=e.callFilters("operationMappedGetDataOperation",n,arguments)},diffDatasets:function(t){var e=this,n=[],i=[],o=[],s=null,r=null,a=null,l=null,c=null,d={},u="",p=-1;for(e.callActions("beforeDiffDatasets",arguments),p=0;s=t.newDataset[p];p++){if(void 0===(u=s[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(d[u])throw new Error(f.messages.errorDatasetDuplicateUid({uid:u}));d[u]=!0,(r=e.cache[u])instanceof f.Target?(e.config.data.dirtyCheck&&!h.deepEquals(s,r.data)&&(a=r.render(s),r.data=s,a!==r.dom.el)&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(a,r.dom.el)),r.isShown||(a.style.display="none"),r.dom.el=a,r.isInDom)&&r.bindEvents(),a=r.dom.el):((r=new f.Target).init(null,e,s),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,i.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),o.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),p=0;s=t.startDataset[p];p++)u=s[e.config.data.uidKey],r=e.cache[u],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):n.push(u);h.isEqualArray(n,i)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var i=e?h.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);n.length;)this.targets.splice(i,0,n.shift()),i++},willSort:function(t,e){var n=!1,n=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next);return this.callFilters("resultWillSort",n,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector;return t.isToggling=!0,t.toggleArray.indexOf(n)<0&&t.toggleArray.push(n),n=t.getToggleSelector(),t.multimix({filter:n},e.animate,e.callback)},toggleOff:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector,n=t.toggleArray.indexOf(n);return t.isToggling=!0,-1<n&&t.toggleArray.splice(n,1),n=t.getToggleSelector(),t.multimix({filter:n},e.animate,e.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),n=null;return t.callActions("beforeDataset",arguments),t.isBusy?((n=new f.QueueItem).args=arguments,n.instruction=e,t.queueMix(n)):(e.callback&&(t.userCallback=e.callback),n=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,e=t.getDataOperation(e.command.dataset),t.goMix(n,e))},multimix:function(){var t=this,e=null,n=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((e=new f.QueueItem).args=arguments,e.instruction=n,e.triggerElement=t.lastClicked,e.isToggling=t.isToggling,t.queueMix(e)):(e=t.getOperation(n.command),t.config.controls.enable&&(n.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1)&&t.updateControls(e.command),n.callback&&(t.userCallback=n.callback),n=n.animate^t.config.animation.enable?n.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(n,e))},getOperation:function(t){var e=this,n=t.sort,i=t.filter,o=t.changeLayout,s=t.remove,r=t.insert,a=new f.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=h.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(f.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,a),s&&(a.toRemove=s.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,n&&(a.startSort=a.startState.activeSort,a.newSort=n,a.willSort=e.willSort(n,a.startState.activeSort),a.willSort)&&e.sortOperation(a),a.startFilter=a.startState.activeFilter,a.newFilter=i||h.extend(new f.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=h.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var n,i=null,o=null,s=-1;for(e=Math.min(e,1),e=Math.max(e,0),s=0;i=t.show[s];s++)o=t.showPosData[s],i.applyTween(o,e);for(s=0;i=t.hide[s];s++)i.isShown&&i.hide(),-1<(n=t.toHide.indexOf(i))&&(o=t.toHidePosData[n],i.isShown||i.show(),i.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null,e=t?h.getProperty(this.config,t):this.config;return this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),h.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t=new f.State;return h.extend(t,this.state),h.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,i="";for(i in t.cache)(n=(e=t.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom)&&e.bindEvents();t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,n=null,i=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;n=e.controls[o];o++)n.removeBinding(e);for(o=0;i=e.targets[o];o++)t&&i.show(),i.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete f.instances[e.id],e.callActions("afterDestroy",arguments)}}),f.IMoveData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.IMoveData),f.IMoveData.prototype=Object.create(f.Base.prototype),f.IMoveData.prototype.constructor=f.IMoveData,f.TargetDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TargetDom),f.TargetDom.prototype=Object.create(f.Base.prototype),f.TargetDom.prototype.constructor=f.TargetDom,f.Target=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new f.TargetDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Target),f.Target.prototype=Object.create(f.Base.prototype),h.extend(f.Target.prototype,{constructor:f.Target,init:function(t,e,n){var i=this,o="";if(i.callActions("beforeInit",arguments),i.mixer=e,t=t||i.render(n),i.cacheDom(t),i.bindEvents(),"none"!==i.dom.el.style.display&&(i.isShown=!0),n&&e.config.data.uidKey){if(void 0===(o=n[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));i.id=o,i.data=n,e.cache[o]=i}i.callActions("afterInit",arguments)},render:function(t){var e=null,n=null,i=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(e=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(f.messages.errorDatasetRendererNotSet());return(e=e(t))&&"object"===_typeof(e)&&h.isElement(e)?n=e:"string"==typeof e&&((i=document.createElement("div")).innerHTML=e,n=i.firstElementChild),this.callFilters("elRender",n,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){t=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),t=isNaN(+t)?t.toLowerCase():+t,this.sortString=t,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var n,i,o=this,s=t.posIn,r=[],a=new f.StyleData,l=-1;for(o.callActions("beforeApplyTween",arguments),a.x=s.x,a.y=s.y,0===e?o.hide():o.isShown||o.show(),l=0;n=f.features.TWEENABLE[l];l++)i=t.tweenData[n],"x"===n?i&&(a.x=s.x+i*e):"y"===n?i&&(a.y=s.y+i*e):i instanceof f.TransformData?i.value&&(a[n].value=s[n].value+i.value*e,a[n].unit=i.unit,r.push(n+"("+a[n].value+i.unit+")")):i&&(a[n]=s[n]+i*e,o.dom.el.style[n]=a[n]);(a.x||a.y)&&r.unshift("translate("+a.x+"px, "+a.y+"px)"),r.length&&(o.dom.el.style[f.features.transformProp]=r.join(" ")),o.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,n=t.posIn,i=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+n.x+"px, "+n.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=n.width+"px",e.dom.el.style.height=n.height+"px"),e.dom.el.style.marginRight=n.marginRight+"px",e.dom.el.style.marginBottom=n.marginBottom+"px"),i&&(e.dom.el.style.opacity=n.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[f.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,n=[],i=[],o=e.mixer.config.animation.animateResizeTargets,s=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),n.push(e.writeTransitionRule(f.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&n.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(n.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),t.callback){switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(n),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":s&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),i=i.concat(e.mixer.transformOut);break;case"show":s&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[f.features.transformProp]=i.join(" "),e.callActions("afterApplyStylesOut",arguments)}else e.mixer.targetsImmovable++,e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation)},writeTransitionRule:function(t,e,n){e=this.getDelay(e),n=t+" "+(0<n?n:this.mixer.config.animation.duration)+"ms "+e+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing);return this.callFilters("ruleWriteTransitionRule",n,arguments)},getDelay:function(t){var e=this;return"function"==typeof e.mixer.config.animation.staggerSequence&&(t=e.mixer.config.animation.staggerSequence.call(e,t,e.state)),t=e.mixer.staggerDuration?t*e.mixer.staggerDuration:0,e.callFilters("delayGetDelay",t,arguments)},applyTransition:function(t){t=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[f.features.transitionProp]=t,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,i=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<n.indexOf("transform")||-1<n.indexOf("opacity")||i&&-1<n.indexOf("height")||i&&-1<n.indexOf("width")||i&&-1<n.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),h.off(t.dom.el,"webkitTransitionEnd",t.handler),h.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===f.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},h.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,n=new f.StyleData;return e.callActions("beforeGetPosData",arguments),n.x=e.dom.el.offsetLeft,n.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(t=e.dom.el.getBoundingClientRect(),n.top=t.top,n.right=t.right,n.bottom=t.bottom,n.left=t.left,n.width=t.width,n.height=t.height),e.mixer.config.animation.animateResizeTargets&&(t=p.getComputedStyle(e.dom.el),n.marginBottom=parseFloat(t.marginBottom),n.marginRight=parseFloat(t.marginRight)),e.callFilters("posDataGetPosData",n,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[f.features.transformProp]="",t.dom.el.style[f.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),f.Collection=function(t){var e,n=-1;for(this.callActions("beforeConstruct"),n=0;e=t[n];n++)this[n]=e;this.length=t.length,this.callActions("afterConstruct"),h.freeze(this)},f.BaseStatic.call(f.Collection),f.Collection.prototype=Object.create(f.Base.prototype),h.extend(f.Collection.prototype,{constructor:f.Collection,mixitup:function(t){var e=null,n=Array.prototype.slice.call(arguments),i=[],o=-1;for(this.callActions("beforeMixitup"),n.shift(),o=0;e=this[o];o++)i.push(e[t].apply(e,n));return this.callFilters("promiseMixitup",h.all(i,f.libraries),arguments)}}),f.Operation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Operation),f.Operation.prototype=Object.create(f.Base.prototype),f.Operation.prototype.constructor=f.Operation,f.State=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.State),f.State.prototype=Object.create(f.Base.prototype),f.State.prototype.constructor=f.State,f.UserInstruction=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UserInstruction),f.UserInstruction.prototype=Object.create(f.Base.prototype),f.UserInstruction.prototype.constructor=f.UserInstruction,f.Messages=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),h.seal(this)},f.BaseStatic.call(f.Messages),f.Messages.prototype=Object.create(f.Base.prototype),f.Messages.prototype.constructor=f.Messages,f.Messages.prototype.compileTemplates=function(){var t,e="";for(e in this)"string"==typeof(t=this[e])&&(this[h.camelCase(e)]=h.template(t))},f.messages=new f.Messages,f.Facade=function(t){f.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.Facade),f.Facade.prototype=Object.create(f.Base.prototype),f.Facade.prototype.constructor=f.Facade,"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"object"===("undefined"==typeof module?"undefined":_typeof(module))?module.exports=f:"function"==typeof define&&define.amd?define(function(){return f}):void 0!==p.mixitup&&"function"==typeof p.mixitup||(p.mixitup=f),f.BaseStatic.call(f.constructor),f.NAME="mixitup",f.CORE_VERSION="3.3.1"}(window),function(l,r,h,g){var o,s,a,d,e,c,p,u,i,t,n,f,m;function y(t,e){var n,i,o,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},n=(e=t&&t.data?u(t.data.options,e):e).$target||h(t.currentTarget).trigger("blur"),(o=h.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(n))||(s=e.selector?h(e.selector):(i=n.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+i+'"]'):h('[data-fancybox="'+i+'"]'):[n],r=h(s).index(n),(o=h.fancybox.open(s,e,r=r<0?0:r)).$trigger=n)}l.console=l.console||{info:function(t){}},h&&(h.fn.fancybox?console.info("fancyBox already initialized"):(t={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:h.noop,beforeLoad:h.noop,afterLoad:h.noop,beforeShow:h.noop,afterShow:h.noop,beforeClose:h.noop,afterClose:h.noop,onActivate:h.noop,onDeactivate:h.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},o=h(l),s=h(r),a=0,d=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},e=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},c=function(){var t,e=r.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in n)if(e.style[t]!==g)return n[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},u=function(t,e){var n=h.extend(!0,{},t,e);return h.each(e,function(t,e){h.isArray(e)&&(n[t]=e)}),n},h.extend((i=function(t,e,n){var i=this;i.opts=u({index:n},h.fancybox.defaults),h.isPlainObject(e)&&(i.opts=u(i.opts,e)),h.fancybox.isMobile&&(i.opts=u(i.opts,i.opts.mobile)),i.id=i.opts.id||++a,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init()}).prototype,{init:function(){var e,n,i=this,o=i.group[i.currIndex].opts;o.closeExisting&&h.fancybox.close(!0),h("body").addClass("fancybox-active"),!h.fancybox.getInstance()&&!1!==o.hideScrollbar&&!h.fancybox.isMobile&&r.body.scrollHeight>l.innerHeight&&(h("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-r.documentElement.clientWidth)+"px;}</style>"),h("body").addClass("compensate-for-scrollbar")),n="",h.each(o.buttons,function(t,e){n+=o.btnTpl[e]||""}),e=h(i.translate(i,o.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(o.baseClass).data("FancyBox",i).appendTo(o.parentEl),i.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){i.$refs[t]=e.find(".fancybox-"+t)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return n[e]===g?t:n[e]})},addContent:function(t){var r=this,t=h.makeArray(t);h.each(t,function(t,e){var n,i,o={},s={};h.isPlainObject(e)?s=(o=e).opts||e:"object"===h.type(e)&&h(e).length?(s=(n=h(e)).data()||{},(s=h.extend(!0,{},s,s.options)).$orig=n,o.src=r.opts.src||s.src||n.attr("href"),o.type||o.src||(o.type="inline",o.src=e)):o={type:"html",src:e+""},o.opts=h.extend(!0,{},r.opts,s),h.isArray(s.buttons)&&(o.opts.buttons=s.buttons),h.fancybox.isMobile&&o.opts.mobile&&(o.opts=u(o.opts,o.opts.mobile)),n=o.type||o.opts.type,s=o.src||"",!n&&s&&((i=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===i[1]?"ogg":i[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":s.match(/\.(pdf)((\?|#).*)?$/i)?o=h.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!(n="iframe")}}}):"#"===s.charAt(0)&&(n="inline")),n?o.type=n:r.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<h.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=r.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<h.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===r.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length)&&(o.opts.$orig=o.opts.$trigger),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===h.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(e,[r,o])),"function"===h.type(r.opts.caption)&&(o.opts.caption=r.opts.caption.apply(e,[r,o])),o.opts.caption instanceof h||(o.opts.caption=o.opts.caption===g?"":o.opts.caption+""),"ajax"===o.type&&1<(i=s.split(/\s+/,2)).length&&(o.src=i.shift(),o.opts.filter=i.shift()),o.opts.modal&&(o.opts=h.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),r.group.push(o)}),Object.keys(r.slides).length&&(r.updateControls(),t=r.Thumbs)&&t.isActive&&(t.create(),t.focus())},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),i.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(t){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(i.requestId&&e(i.requestId),i.requestId=d(function(){i.update(t)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(t)},h.fancybox.isMobile?600:250))}),s.on("keydown.fb",function(t){var e=(h.fancybox?h.fancybox.getInstance():null).current,n=t.keyCode||t.which;9==n?e.opts.trapFocus&&i.focus(t):!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||h(t.target).is("input,textarea,video,audio,select")||(8===n||27===n?(t.preventDefault(),i.close(t)):37===n||38===n?(t.preventDefault(),i.previous()):39===n||40===n?(t.preventDefault(),i.next()):i.trigger("afterKeydown",t,n))}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),s.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,i){var e,n,o,s,r,a,l,c,d=this,u=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(t=parseInt(t,10),!(n=(d.current||d).opts.loop)&&(t<0||u<=t))return!1;e=d.firstRun=!Object.keys(d.slides).length,s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,o=d.createSlide(t),1<u&&((n||o.index<u-1)&&d.createSlide(t+1),n||0<o.index)&&d.createSlide(t-1),d.current=o,d.currIndex=o.index,d.currPos=o.pos,d.trigger("beforeShow",e),d.updateControls(),o.forcedDuration=g,h.isNumeric(i)?o.forcedDuration=i:i=o.opts[e?"animationDuration":"transitionDuration"],i=parseInt(i,10),u=d.isMoved(o),o.$slide.addClass("fancybox-slide--current"),e?(o.opts.animationEffect&&i&&d.$refs.container.css("transition-duration",i+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(o)):(r=h.fancybox.getTranslate(s.$slide),a=h.fancybox.getTranslate(d.$refs.stage),h.each(d.slides,function(t,e){h.fancybox.stop(e.$slide,!0)}),s.pos!==o.pos&&(s.isComplete=!1),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),u?(c=r.left-(s.pos*r.width+s.pos*s.opts.gutter),h.each(d.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=e.pos*r.width+e.pos*e.opts.gutter;h.fancybox.setTranslate(e.$slide,{top:0,left:n-a.left+c}),e.pos!==o.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>o.pos?"next":"previous")),p(e.$slide),h.fancybox.animate(e.$slide,{top:0,left:(e.pos-o.pos)*r.width+(e.pos-o.pos)*e.opts.gutter},i,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===d.currPos&&d.complete()})})):i&&o.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+o.opts.transitionEffect,s.$slide.addClass("fancybox-slide--"+(s.pos>o.pos?"next":"previous")),h.fancybox.animate(s.$slide,l,i,function(){s.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),o.isLoaded?d.revealContent(o):d.loadSlide(o)),d.preload("image")}},createSlide:function(t){var e,n=this,i=t%n.group.length;return i=i<0?n.group.length+i:i,!n.slides[t]&&n.group[i]&&(e=h('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[t]=h.extend(!0,{},n.group[i],{pos:t,$slide:e,isLoaded:!1}),n.updateSlide(n.slides[t])),n.slides[t]},scaleToActual:function(t,e,n){var i,o,s,r,a=this,l=a.current,c=l.$content,d=h.fancybox.getTranslate(l.$slide).width,u=h.fancybox.getTranslate(l.$slide).height,p=l.width,f=l.height;a.isAnimating||a.isMoved()||!c||"image"!=l.type||!l.isLoaded||l.hasError||(a.isAnimating=!0,h.fancybox.stop(c),t=t===g?.5*d:t,e=e===g?.5*u:e,(i=h.fancybox.getTranslate(c)).top-=h.fancybox.getTranslate(l.$slide).top,i.left-=h.fancybox.getTranslate(l.$slide).left,l=p/i.width,r=f/i.height,o=.5*d-.5*p,s=.5*u-.5*f,d<p&&(o=0<(o=i.left*l-(t*l-t))?0:o)<d-p&&(o=d-p),u<f&&(s=0<(s=i.top*r-(e*r-e))?0:s)<u-f&&(s=u-f),a.updateCursor(p,f),h.fancybox.animate(c,{top:s,left:o,scaleX:l,scaleY:r},n||366,function(){a.isAnimating=!1}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop())},scaleToFit:function(t){var e=this,n=e.current,i=n.$content;e.isAnimating||e.isMoved()||!i||"image"!=n.type||!n.isLoaded||n.hasError||(e.isAnimating=!0,h.fancybox.stop(i),n=e.getFitPos(n),e.updateCursor(n.width,n.height),h.fancybox.animate(i,{top:n.top,left:n.left,scaleX:n.width/i.width(),scaleY:n.height/i.height()},t||366,function(){e.isAnimating=!1}))},getFitPos:function(t){var e,n,i=t.$content,o=t.$slide,s=t.width||t.opts.width,r=t.height||t.opts.height,a={};return!!(t.isLoaded&&i&&i.length)&&(e=h.fancybox.getTranslate(this.$refs.stage).width,n=h.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(o.css("paddingLeft"))+parseFloat(o.css("paddingRight"))+parseFloat(i.css("marginLeft"))+parseFloat(i.css("marginRight")),n-=parseFloat(o.css("paddingTop"))+parseFloat(o.css("paddingBottom"))+parseFloat(i.css("marginTop"))+parseFloat(i.css("marginBottom")),s&&r||(s=e,r=n),e-.5<(s*=i=Math.min(1,e/s,n/r))&&(s=e),n-.5<(r*=i)&&(r=n),"image"===t.type?(a.top=Math.floor(.5*(n-r))+parseFloat(o.css("paddingTop")),a.left=Math.floor(.5*(e-s))+parseFloat(o.css("paddingLeft"))):"video"===t.contentType&&(s/(i=t.opts.width&&t.opts.height?s/r:t.opts.ratio||16/9)<r?r=s/i:r*i<s&&(s=r*i)),a.width=s,a.height=r,a)},update:function(n){var i=this;h.each(i.slides,function(t,e){i.updateSlide(e,n)})},updateSlide:function(t,e){var n=this,i=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;n.adjustCaption(t),i&&(o||s||"video"===t.contentType)&&!t.hasError&&(h.fancybox.stop(i),h.fancybox.setTranslate(i,n.getFitPos(t)),t.pos===n.currPos)&&(n.isAnimating=!1,n.updateCursor()),n.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===n.currPos)&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight),n.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,n=e.current,i=n.$slide;!e.isClosing&&n&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),h.fancybox.animate(i,{top:0,left:0,opacity:1},t===g?0:t,function(){i.css({transform:"",opacity:""}),n.isComplete||e.complete()},!1))},isMoved:function(t){var e,n,t=t||this.current;return!!t&&(n=h.fancybox.getTranslate(this.$refs.stage),e=h.fancybox.getTranslate(t.$slide),!t.$slide.hasClass("fancybox-animated"))&&(.5<Math.abs(e.top-n.top)||.5<Math.abs(e.left-n.left))},updateCursor:function(t,e){var n=this.current,i=this.$refs.container;n&&!this.isClosing&&this.Guestures&&(i.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),e=!!(t=this.canPan(t,e))||this.isZoomable(),i.toggleClass("fancybox-is-zoomable",e),h("[data-fancybox-zoom]").prop("disabled",!e),t?i.addClass("fancybox-can-pan"):e&&("zoom"===n.opts.clickContent||h.isFunction(n.opts.clickContent)&&"zoom"==n.opts.clickContent(n))?i.addClass("fancybox-can-zoomIn"):n.opts.touch&&(n.opts.touch.vertical||1<this.group.length)&&"video"!==n.contentType&&i.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var n=!1,i=this.current,o=i.$content;return t!==g&&e!==g?n=t<i.width&&e<i.height:o&&(n=(n=h.fancybox.getTranslate(o)).width<i.width&&n.height<i.height),n},canPan:function(t,e){var n=this.current,i=null,o=!1;return o="image"===n.type&&(n.isComplete||t&&e)&&!n.hasError&&(o=this.getFitPos(n),t!==g&&e!==g?i={width:t,height:e}:n.isComplete&&(i=h.fancybox.getTranslate(n.$content)),i)?o&&(1.5<Math.abs(i.width-o.width)||1.5<Math.abs(i.height-o.height)):o},loadSlide:function(n){var t,e,i,o=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===o.trigger("beforeLoad",n))return n.isLoading=!1;switch(t=n.type,(e=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),t){case"image":o.setImage(n);break;case"iframe":o.setIframe(n);break;case"html":o.setContent(n,n.src||n.content);break;case"video":o.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":h(n.src).length?o.setContent(n,h(n.src)):o.setError(n);break;case"ajax":o.showLoading(n),i=h.ajax(h.extend({},n.opts.ajax.settings,{url:n.src,success:function(t,e){"success"===e&&o.setContent(n,t)},error:function(t,e){t&&"abort"!==e&&o.setError(n)}})),e.one("onReset",function(){i.abort()});break;default:o.setError(n)}return!0}},setImage:function(e){var t,n=this;setTimeout(function(){var t=e.$image;n.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||n.showLoading(e)},50),n.checkSrcset(e),e.$content=h('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=r.createElement("img")).onerror=function(){h(this).remove(),e.$ghost=null},t.onload=function(){n.afterLoad(e)},e.$ghost=h(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),n.setBigImage(e)},checkSrcset:function(t){var e,n,i,o,s=t.opts.srcset||t.opts.image.srcset;if(s){i=l.devicePixelRatio||1,o=l.innerWidth*i,(n=s.split(",").map(function(t){var i={};return t.trim().split(/\s+/).forEach(function(t,e){var n=parseInt(t.substring(0,t.length-1),10);if(0===e)return i.url=t;n&&(i.value=n,i.postfix=t[t.length-1])}),i})).sort(function(t,e){return t.value-e.value});for(var r=0;r<n.length;r++){var a=n[r];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=i){e=a;break}}(e=!e&&n.length?n[n.length-1]:e)&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var n=this,t=r.createElement("img"),i=h(t);e.$image=i.one("error",function(){n.setError(e)}).one("load",function(){var t;e.$ghost||(n.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),n.afterLoad(e)),n.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<o.width()/o.height()?"100":Math.round(e.width/e.height*100))+"vw"),i.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!n.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),n.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):t.error&&i.trigger("error")},resolveImageSlideSize:function(t,e,n){var i=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=n,0<i&&(t.width=i,t.height=Math.floor(i*n/e)),0<o&&(t.width=Math.floor(o*e/n),t.height=o)},setIframe:function(o){var s,e=this,r=o.opts.iframe,a=o.$slide;o.$content=h('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=s=h(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(o.$content),r.preload?(e.showLoading(o),s.on("load.fb error.fb",function(t){this.isReady=1,o.$slide.trigger("refresh"),e.afterLoad(o)}),a.on("refresh.fb",function(){var t,e=o.$content,n=r.css.width,i=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),n===g&&(n=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",n||"").css("max-width",""),i===g&&(i=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",i||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(o),s.attr("src",o.src),a.one("onReset",function(){try{h(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}h(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(t,e){var n;this.isClosing||(this.hideLoading(t),t.$content&&h.fancybox.stop(t.$content),t.$slide.empty(),(n=e)&&n.hasOwnProperty&&n instanceof h&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=h("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===h.type(e)&&(e=h("<div>").append(h.trim(e)).contents()),t.opts.filter&&(e=h("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){h(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(h(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),h(e).appendTo(t.$slide),h(e).is("video,audio")&&(h(e).addClass("fancybox-video"),h(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||h(e).attr("width"),t.opts.height=t.opts.height||h(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=h(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){this.isClosing||(t.isLoading=!1,t.isLoaded=!0,this.trigger("afterLoad",t),this.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=h(this.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type)&&h('<div class="fancybox-spaceball"></div>').appendTo(t.$content),this.adjustCaption(t),this.adjustLayout(t),t.pos===this.currPos&&this.updateCursor(),this.revealContent(t))},adjustCaption:function(t){var t=t||this.current,e=t.opts.caption,n=t.opts.preventCaptionOverlap,i=this.$refs.caption,o=!1;i.toggleClass("fancybox-caption--separate",n),n&&e&&e.length&&(t.pos!==this.currPos?((n=i.clone().appendTo(i.parent())).children().eq(0).empty().html(e),o=n.outerHeight(!0),n.empty().remove()):this.$caption&&(o=this.$caption.outerHeight(!0)),t.$slide.css("padding-bottom",o||""))},adjustLayout:function(t){var e,n,i,o,t=t||this.current;t.isLoaded&&!0!==t.opts.disableLayoutFix&&(t.$content.css("margin-bottom",""),t.$content.outerHeight()>t.$slide.height()+.5&&(i=t.$slide[0].style["padding-bottom"],o=t.$slide.css("padding-bottom"),0<parseFloat(o))&&(e=t.$slide[0].scrollHeight,t.$slide.css("padding-bottom",0),Math.abs(e-t.$slide[0].scrollHeight)<1&&(n=o),t.$slide.css("padding-bottom",i)),t.$content.css("margin-bottom",n))},revealContent:function(t){var e,n,i,o,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),d=t.isRevealed;t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],i=t.opts[s.firstRun?"animationDuration":"transitionDuration"],i=parseInt(t.forcedDuration===g?i:t.forcedDuration,10),"zoom"===(e=!c&&t.pos===s.currPos&&i?e:!1)&&(t.pos===s.currPos&&i&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,(o="auto"==(o=t.opts.zoomOpacity)?.1<Math.abs(t.width/t.height-l.width/l.height):o)&&(l.opacity=.1,a.opacity=1),h.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),h.fancybox.animate(t.$content,a,i,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(h.fancybox.stop(r),n="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(n).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),h.fancybox.animate(r,"fancybox-slide--current",i,function(){r.removeClass(n).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),t.pos===s.currPos&&s.complete()))},getThumbPos:function(t){var e,n,i,o,t=t.$thumb;return!!(t&&(i=t[0])&&i.ownerDocument===r&&(h(".fancybox-container").css("pointer-events","none"),o={x:i.getBoundingClientRect().left+i.offsetWidth/2,y:i.getBoundingClientRect().top+i.offsetHeight/2},o=r.elementFromPoint(o.x,o.y)===i,h(".fancybox-container").css("pointer-events",""),o))&&(i=h.fancybox.getTranslate(t),o=parseFloat(t.css("border-top-width")||0),e=parseFloat(t.css("border-right-width")||0),n=parseFloat(t.css("border-bottom-width")||0),t=parseFloat(t.css("border-left-width")||0),e={top:i.top+o,left:i.left+t,width:i.width-e-t,height:i.height-o-n,scaleX:1,scaleY:1},0<i.width)&&0<i.height&&e},complete:function(){var t,n=this,e=n.current,i={};!n.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),n.preload("inline"),p(e.$slide),e.$slide.addClass("fancybox-slide--complete"),h.each(n.slides,function(t,e){e.pos>=n.currPos-1&&e.pos<=n.currPos+1?i[e.pos]=e:e&&(h.fancybox.stop(e.$slide),e.$slide.off().remove())}),n.slides=i),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):n.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n;this.group.length<2||(n=this.slides[this.currPos+1],(e=this.slides[this.currPos-1])&&e.type===t&&this.loadSlide(e),n&&n.type===t&&this.loadSlide(n))},focus:function(t,e){var n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((e=(e=!t&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(n).filter(function(){return"hidden"!==h(this).css("visibility")&&!h(this).hasClass("disabled")})).length?(n=e.index(r.activeElement),t&&t.shiftKey?(n<0||0==n)&&(t.preventDefault(),e.eq(e.length-1).trigger("focus")):(n<0||n==e.length-1)&&(t&&t.preventDefault(),e.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var e=this;h(".fancybox-container").each(function(){var t=h(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function n(){l.cleanUp(t)}var i,o,s,r,a,l=this,c=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",t)?(l.isClosing=!1,d(function(){l.update()}),!1):(l.removeEvents(),o=c.$content,i=c.opts.animationEffect,e=h.isNumeric(e)?e:i?c.opts.animationDuration:0,c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?h.fancybox.stop(c.$slide):i=!1,c.$slide.siblings().trigger("onReset").remove(),e&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",e+"ms"),l.hideLoading(c),l.hideControls(!0),l.updateCursor(),"zoom"===(i="zoom"!==i||o&&e&&"image"===c.type&&!l.isMoved()&&!c.hasError&&(a=l.getThumbPos(c))?i:"fade")?(h.fancybox.stop(o),r={top:(r=h.fancybox.getTranslate(o)).top,left:r.left,scaleX:r.width/a.width,scaleY:r.height/a.height,width:a.width,height:a.height},(s="auto"==(s=c.opts.zoomOpacity)?.1<Math.abs(c.width/c.height-a.width/a.height):s)&&(a.opacity=0),h.fancybox.setTranslate(o,r),p(o),h.fancybox.animate(o,a,e,n)):i&&e?h.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,e,n):!0===t?setTimeout(n,e):n(),!0))},cleanUp:function(t){var e,n=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",t),this.current.opts.backFocus&&(n=n&&n.length&&n.is(":visible")?n:this.$trigger)&&n.length&&(t=l.scrollX,e=l.scrollY,n.trigger("focus"),h("html, body").scrollTop(e).scrollLeft(t)),this.current=null,(n=h.fancybox.getInstance())?n.activate():(h("body").removeClass("fancybox-active compensate-for-scrollbar"),h("#fancybox-style-noscroll").remove())},trigger:function(t,e){var n,i=Array.prototype.slice.call(arguments,1),e=e&&e.opts?e:this.current;if(e?i.unshift(e):e=this,i.unshift(this),!1===(n=h.isFunction(e.opts[t])?e.opts[t].apply(e,i):n))return n;("afterClose"!==t&&this.$refs?this.$refs.container:s).trigger(t+".fb",i)},updateControls:function(){var t=this,e=t.current,n=e.index,i=t.$refs.container,o=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=o).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),i.find("[data-fancybox-count]").html(t.group.length),i.find("[data-fancybox-index]").html(n+1),i.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&n<=0),i.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&n>=t.group.length-1),"image"===e.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),h(r.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=(this.current||this).opts,e=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,e.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<this.group.length)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<this.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),h.fancybox={version:"3.5.7",defaults:t,getInstance:function(t){var e=h('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return e instanceof i&&("string"===h.type(t)?e[t].apply(e,n):"function"===h.type(t)&&t.apply(e,n),e)},open:function(t,e,n){return new i(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t)&&this.close(t)},destroy:function(){this.close(!0),s.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=r.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(r.documentMode&&r.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var n="",i={};if(t&&e)return e.left===g&&e.top===g||(n=(e.left===g?t.position():e).left+"px, "+(e.top===g?t.position():e).top+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==g&&e.scaleY!==g?n+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==g&&(n+=" scaleX("+e.scaleX+")"),n.length&&(i.transform=n),e.opacity!==g&&(i.opacity=e.opacity),e.width!==g&&(i.width=e.width),e.height!==g&&(i.height=e.height),t.css(i)},animate:function(e,n,i,o,s){var r,a=this;h.isFunction(i)&&(o=i,i=null),a.stop(e),r=a.getTranslate(e),e.on(c,function(t){(!t||!t.originalEvent||e.is(t.originalEvent.target)&&"z-index"!=t.originalEvent.propertyName)&&(a.stop(e),h.isNumeric(i)&&e.css("transition-duration",""),h.isPlainObject(n)?n.scaleX!==g&&n.scaleY!==g&&a.setTranslate(e,{top:n.top,left:n.left,width:r.width*n.scaleX,height:r.height*n.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(n),h.isFunction(o))&&o(t)}),h.isNumeric(i)&&e.css("transition-duration",i+"ms"),h.isPlainObject(n)?(n.scaleX!==g&&n.scaleY!==g&&(delete n.width,delete n.height,e.parent().hasClass("fancybox-slide--image"))&&e.parent().addClass("fancybox-is-scaling"),h.fancybox.setTranslate(e,n)):e.addClass(n),e.data("timer",setTimeout(function(){e.trigger(c)},i+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(c),t.off(c).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},h.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?h("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},y),this},s.on("click.fb-start","[data-fancybox]",y),s.on("click.fb-start","[data-fancybox-trigger]",function(t){h('[data-fancybox="'+h(this).attr("data-fancybox-trigger")+'"]').eq(h(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:h(this)})}),n=".fancybox-button",f="fancybox-focus",m=null,s.on("mousedown mouseup focus blur",n,function(t){switch(t.type){case"mousedown":m=h(this);break;case"mouseup":m=null;break;case"focusin":h(n).removeClass(f),h(this).is(m)||h(this).is("[disabled]")||h(this).addClass(f);break;case"focusout":h(n).removeClass(f)}})))}(window,document,jQuery),function(f){function h(n,t,e){if(n)return"object"===f.type(e=e||"")&&(e=f.param(e,!0)),f.each(t,function(t,e){n=n.replace("$"+t,e||"")}),e.length&&(n+=(0<n.indexOf("?")?"&":"?")+e),n}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},o=(f(document).on("objectNeedsType.fb",function(t,e,o){var s,r,a,l,c,d,u=o.src||"",p=!1,n=f.extend(!0,{},i,o.opts.media);f.each(n,function(t,e){if(r=u.match(e.matcher)){if(p=e.type,d=t,c={},e.paramPlace&&r[e.paramPlace]){l=(l="?"==(l=r[e.paramPlace])[0]?l.substring(1):l).split("&");for(var n=0;n<l.length;++n){var i=l[n].split("=",2);2==i.length&&(c[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return a=f.extend(!0,{},e.params,o.opts[t],c),u="function"===f.type(e.url)?e.url.call(this,r,a,o):h(e.url,r,a),s="function"===f.type(e.thumb)?e.thumb.call(this,r,a,o):h(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),p?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===p&&(o.opts=f.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),f.extend(o,{type:p,src:u,origSrc:o.src,contentSource:d,contentType:"image"===p?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(o.type=o.opts.defaultType)}),{youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;this[t].loaded?setTimeout(function(){n.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e))},done:function(t){var e,n;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=f.fancybox.getInstance())&&(n=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){e.next()}))}});f(document).on({"afterShow.fb":function(t,e,n){1<e.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&o.load(n.contentSource)}})}(jQuery),function(d,l,u){function p(t){var e,n=[];for(e in t=(t=t.originalEvent||t||d.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[e].pageX?n.push({x:t[e].pageX,y:t[e].pageY}):t[e].clientX&&n.push({x:t[e].clientX,y:t[e].clientY});return n}function f(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||u.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,n=t[0].attributes,i=n.length;e<i;e++)if("data-fancybox-"===n[e].nodeName.substr(0,14))return 1}function h(t){for(var e,n,i,o=!1;(e=t.get(0),i=n=i=n=void 0,n=d.getComputedStyle(e)["overflow-y"],i=d.getComputedStyle(e)["overflow-x"],n=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,i=("scroll"===i||"auto"===i)&&e.scrollWidth>e.clientWidth,!(o=n||i))&&((t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body")););return o}function n(t){this.instance=t,this.$bg=t.$refs.bg,this.$stage=t.$refs.stage,this.$container=t.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",u.proxy(this,"ontouchstart"))}var g=d.requestAnimationFrame||d.webkitRequestAnimationFrame||d.mozRequestAnimationFrame||d.oRequestAnimationFrame||function(t){return d.setTimeout(t,1e3/60)},m=d.cancelAnimationFrame||d.webkitCancelAnimationFrame||d.mozCancelAnimationFrame||d.oCancelAnimationFrame||function(t){d.clearTimeout(t)};n.prototype.destroy=function(){this.$container.off(".fb.touch"),u(l).off(".fb.touch"),this.requestId&&(m(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},n.prototype.ontouchstart=function(t){var e=this,n=u(t.target),i=e.instance,o=i.current,s=o.$slide,r=o.$content,a="touchstart"==t.type;a&&e.$container.off("mousedown.fb.touch"),t.originalEvent&&2==t.originalEvent.button||!s.length||!n.length||c(n)||c(n.parent())||!n.is("img")&&t.originalEvent.clientX>n[0].clientWidth+n.offset().left||(!o||i.isAnimating||o.$slide.hasClass("fancybox-animated")?(t.stopPropagation(),t.preventDefault()):(e.realPoints=e.startPoints=p(t),e.startPoints.length&&(o.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=n,e.$content=r,e.opts=o.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=i.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=u.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=u.fancybox.getTranslate(s),e.stagePos=u.fancybox.getTranslate(i.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,u(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",u.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",u.proxy(e,"ontouchmove")),u.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),(e.opts||e.canPan)&&(n.is(e.$stage)||e.$stage.find(n).length)||(n.is(".fancybox-image")&&t.preventDefault(),u.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(e.isScrollable=h(n)||h(n.parent()),u.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!o.hasError||(e.canPan?(u.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length)&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,u.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-u(d).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-u(d).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=f(e.startPoints[0],e.startPoints[1]))))},n.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(t){var e=this;void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?e.ontouchend(t):e.isScrolling?e.canTap=!1:(e.newPoints=p(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=f(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=f(e.newPoints[0],e.startPoints[0],"y"),e.distance=f(e.newPoints[0],e.startPoints[0]),0<e.distance)&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))},n.prototype.onSwipe=function(t){var e,o=this,s=o.instance,n=o.isSwiping,i=o.sliderStartPos.left||0;if(!0===n){if(10<Math.abs(o.distance)){if(o.canTap=!1,s.group.length<2&&o.opts.vertical?o.isSwiping="y":s.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<u(d).width()?o.isSwiping="x":(e=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<e&&e<135?"y":"x"),"y"===o.isSwiping&&u.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);s.isDragging=o.isSwiping,o.startPoints=o.newPoints,u.each(s.slides,function(t,e){var n,i;u.fancybox.stop(e.$slide),n=u.fancybox.getTranslate(e.$slide),i=u.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(o.sliderStartPos.top=n.top-i.top,o.sliderStartPos.left=n.left-i.left),u.fancybox.setTranslate(e.$slide,{top:n.top-i.top,left:n.left-i.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}}else"x"==n&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?i+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?i-=Math.pow(-o.distanceX,.8):i+=o.distanceX),o.sliderLastPos={top:"x"==n?0:o.sliderStartPos.top+o.distanceY,left:i},o.requestId&&(m(o.requestId),o.requestId=null),o.requestId=g(function(){o.sliderLastPos&&(u.each(o.instance.slides,function(t,e){var n=e.pos-o.instance.currPos;u.fancybox.setTranslate(e.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+n*o.canvasWidth+n*e.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))})},n.prototype.onPan=function(){var t=this;f(t.newPoints[0],t.realPoints[0])<(u.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)}))},n.prototype.limitMovement=function(){var t=this.canvasWidth,e=this.canvasHeight,n=this.distanceX,i=this.distanceY,o=this.contentStartPos,s=o.left,r=o.top,a=o.width,o=o.height,l=t<a?s+n:s,c=r+i,d=Math.max(0,.5*t-.5*a),u=Math.max(0,.5*e-.5*o),t=Math.min(t-a,.5*t-.5*a),a=Math.min(e-o,.5*e-.5*o);return 0<n&&d<l&&(l=d-1+Math.pow(-d+s+n,.8)||0),n<0&&l<t&&(l=t+1-Math.pow(t-s-n,.8)||0),0<i&&u<c&&(c=u-1+Math.pow(-u+r+i,.8)||0),{top:c=i<0&&c<a?a+1-Math.pow(a-r-i,.8)||0:c,left:l}},n.prototype.limitPosition=function(t,e,n,i){var o=this.canvasWidth,s=this.canvasHeight;return t=o<n?(t=0<t?0:t)<o-n?o-n:t:Math.max(0,o/2-n/2),{top:e=s<i?(e=0<e?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),left:t}},n.prototype.onZoom=function(){var t=this,e=t.contentStartPos,n=e.width,i=e.height,o=e.left,e=e.top,s=f(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,r=Math.floor(n*s),a=Math.floor(i*s),n=(n-r)*t.percentageOfImageAtPinchPointX,i=(i-a)*t.percentageOfImageAtPinchPointY,l=(t.newPoints[0].x+t.newPoints[1].x)/2-u(d).scrollLeft(),c=(t.newPoints[0].y+t.newPoints[1].y)/2-u(d).scrollTop(),l=l-t.centerPointStartX,e={top:e+(i+(c-t.centerPointStartY)),left:o+(n+l),scaleX:s,scaleY:s};t.canTap=!1,t.newWidth=r,t.newHeight=a,t.contentLastPos=e,t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)})},n.prototype.ontouchend=function(t){var e=this,n=e.isSwiping,i=e.isPanning,o=e.isZooming,s=e.isScrolling;if(e.endPoints=p(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),u(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(m(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,i?e.endPanning():o?e.endZooming():e.endSwiping(n,s)},n.prototype.endSwiping=function(t,e){var n=this,i=!1,o=n.instance.group.length,s=Math.abs(n.distanceX),o="x"==t&&1<o&&(130<n.dMs&&10<s||50<s);n.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(n.distanceY)?(u.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),i=n.instance.close(!0,250)):o&&0<n.distanceX?i=n.instance.previous(300):o&&n.distanceX<0&&(i=n.instance.next(300)),!1!==i||"x"!=t&&"y"!=t||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var t,e,n=this;n.contentLastPos&&(t=!1===n.opts.momentum||350<n.dMs?(e=n.contentLastPos.left,n.contentLastPos.top):(e=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(e=n.limitPosition(e,t,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,e.height=n.contentStartPos.height,u.fancybox.animate(n.$content,e,366))},n.prototype.endZooming=function(){var t,e,n=this,i=n.instance.current,o=n.newWidth,s=n.newHeight;n.contentLastPos&&(t=n.contentLastPos.left,e=n.contentLastPos.top,u.fancybox.setTranslate(n.$content,{top:e,left:t,width:o,height:s,scaleX:1,scaleY:1}),o<n.canvasWidth&&s<n.canvasHeight?n.instance.scaleToFit(150):o>i.width||s>i.height?n.instance.scaleToActual(n.centerPointStartX,n.centerPointStartY,150):(i=n.limitPosition(t,e,o,s),u.fancybox.animate(n.$content,i,150)))},n.prototype.onTap=function(e){function t(t){if(t=r.opts[t],t=u.isFunction(t)?t.apply(s,[r,e]):t)switch(t){case"close":s.close(i.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(i.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(i.startEvent))}}var n,i=this,o=u(e.target),s=i.instance,r=s.current,a=e&&p(e)||i.startPoints,l=a[0]?a[0].x-u(d).scrollLeft()-i.stagePos.left:0,c=a[0]?a[0].y-u(d).scrollTop()-i.stagePos.top:0;if((!e.originalEvent||2!=e.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))n="Outside";else if(o.is(".fancybox-slide"))n="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;n="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(c-i.tapY))return this;t("dblclick"+n)}else i.tapX=l,i.tapY=c,r.opts["dblclick"+n]&&r.opts["dblclick"+n]!==r.opts["click"+n]?i.tapped=setTimeout(function(){i.tapped=null,s.isAnimating||t("click"+n)},500):t("click"+n);return this}},u(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new n(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(s,r){r.extend(!0,r.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(t){this.instance=t,this.init()}r.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,n=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!n?t.$button.hide():n.progress&&(t.$progress=r('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this.instance,n=e.current;n&&(!0===t||n.opts.loop||e.currIndex<e.group.length-1)?this.isActive&&"video"!==n.contentType&&(this.$progress&&r.fancybox.animate(this.$progress.show(),{scaleX:1},n.opts.slideShow.speed),this.timer=setTimeout(function(){e.current.opts.loop||e.current.index!=e.group.length-1?e.next():e.jumpTo(0)},n.opts.slideShow.speed)):(this.stop(),e.idleSecondsCounter=0,e.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this.instance.current;t&&(this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,t.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this.instance.current;this.clear(),this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),r(s).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,i){e=e&&e.SlideShow;i?e&&n.opts.slideShow.autoStart&&e.start():e&&e.isActive&&e.clear()},"afterShow.fb":function(t,e,n){e=e&&e.SlideShow;e&&e.isActive&&e.set()},"afterKeydown.fb":function(t,e,n,i,o){e=e&&e.SlideShow;!e||!n.opts.slideShow||80!==o&&32!==o||r(s.activeElement).is("button,a,input")||(i.preventDefault(),e.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){e=e&&e.SlideShow;e&&e.stop()}}),r(s).on("visibilitychange",function(){var t=r.fancybox.getInstance(),t=t&&t.SlideShow;t&&t.isActive&&(s.hidden?t.clear():t.set())})}(document,jQuery),function(s,n){var i,o=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},n=0;n<t.length;n++){var i=t[n];if(i&&i[1]in s){for(var o=0;o<i.length;o++)e[t[0][o]]=i[o];return e}}return!1}();o&&(i={request:function(t){(t=t||s.documentElement)[o.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[o.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[o.fullscreenElement])},enabled:function(){return Boolean(s[o.fullscreenEnabled])}},n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(s).on(o.fullscreenchange,function(){var t=i.isFullscreen(),e=n.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})),n(s).on({"onInit.fb":function(t,e){o?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),i.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,i,o){e&&e.FullScreen&&70===o&&(i.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(t,s){function n(t){this.init(t)}var r="fancybox-thumbs",a=r+"-active";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);s.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,i=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=n.length;o<s&&(n[o].thumb&&i++,!(1<i));o++);1<i&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var n,t=this,e=t.instance,i=t.opts.parentEl,o=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(i).addBack().filter(i)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(n=e.thumb)||"image"!==e.type||(n=e.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=o.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,i=this.$list,o=this.$grid;this.instance.current&&(n=(e=i.children().removeClass(a).filter('[data-index="'+this.instance.current.index+'"]').addClass(a)).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-e.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},t):"x"===this.opts.axis&&(n.left<o.scrollLeft()||n.left>o.scrollLeft()+(o.width()-e.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){e&&!e.Thumbs&&(e=new n(e)).isActive&&!0===e.opts.autoStart&&e.show()},"beforeShow.fb":function(t,e,n,i){e=e&&e.Thumbs;e&&e.isVisible&&e.focus(i?0:250)},"afterKeydown.fb":function(t,e,n,i,o){e=e&&e.Thumbs;e&&e.isActive&&71===o&&(i.preventDefault(),e.toggle())},"beforeClose.fb":function(t,e){e=e&&e.Thumbs;e&&e.isVisible&&!1!==e.opts.hideOnClose&&e.$grid.hide()}})}(document,jQuery),function(t,o){o.extend(!0,o.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),o(t).on("click","[data-fancybox-share]",function(){var t,e,n=o.fancybox.getInstance(),i=n.current||null;i&&("function"===o.type(i.opts.share.url)&&(t=i.opts.share.url.apply(i,[n,i])),i=i.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===i.type?encodeURIComponent(i.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),o.fancybox.open({src:n.translate(n,i),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){n.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,i){function o(){var t=s.location.hash.substr(1),e=t.split("-"),n=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:n<1?1:n,gallery:e.join("-")}}function e(t){""!==t.gallery&&i("[data-fancybox='"+i.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function a(t){return!!t&&""!==(t=(t=(t.current||t).opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&t}i.escapeSelector||(i.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),i(function(){!1!==i.fancybox.defaults.hash&&(i(r).on({"onInit.fb":function(t,e){var n,i;!1!==e.group[e.currIndex].opts.hash&&(n=o(),i=a(e))&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1)},"beforeShow.fb":function(t,e,n,i){var o;n&&!1!==n.opts.hash&&(o=a(e))&&(e.currentHash=o+(1<e.group.length?"-"+(n.index+1):""),s.location.hash!=="#"+e.currentHash)&&(i&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[i?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),i&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300))},"beforeClose.fb":function(t,e,n){n&&!1!==n.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),i(s).on("hashchange.fb",function(){var t=o(),n=null;i.each(i(".fancybox-container").get().reverse(),function(t,e){e=i(e).data("FancyBox");if(e&&e.currentHash)return n=e,!1}),n?n.currentHash===t.gallery+"-"+t.index||1===t.index&&n.currentHash==t.gallery||(n.currentHash=null,n.close()):""!==t.gallery&&e(t)}),setTimeout(function(){i.fancybox.getInstance()||e(o())},50))})}(window,document,jQuery),function(t,e){var o=(new Date).getTime();e(t).on({"onInit.fb":function(t,i,e){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=i.current,n=(new Date).getTime();i.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated"))||(t=t.originalEvent||t,n-o<250)||(o=n,i[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())})}})}(document,jQuery),$(".home-slider__slider").slick({dots:!0,arrows:!1,fade:!0,autoplay:!0}),$(".contact__slider").slick({infinite:!0,slidesToShow:10,slidesToScroll:10,dots:!0,arrows:!1}),$(".blog__post-slider").slick({prevArrow:'<button type="button" class="slick-arrow slick-arrow--prev"></button>',nextArrow:'<button type="button" class="slick-arrow slick-arrow--next"></button>'}),document.querySelector(".gallery__inner")&&(filter=mixitup(".gallery__inner",{load:{filter:".bedroom-furniture"}})),$(".header__btn").on("click",function(){$(".rightside-menu").removeClass("rightside-menu--close")}),$(".rightside-menu__close").on("click",function(){$(".rightside-menu").addClass("rightside-menu--close")});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,